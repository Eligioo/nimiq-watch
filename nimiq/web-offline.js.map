{"version":3,"sources":["src/main/platform/browser/index.prefix.js","src/main/platform/browser/Class.js","src/main/platform/browser/utils/LogNative.js","src/main/generic/utils/Log.js","src/main/generic/utils/Observable.js","src/main/platform/browser/crypto/CryptoLib.js","src/main/generic/utils/array/ArrayUtils.js","src/main/generic/utils/assert/Assert.js","src/main/generic/utils/buffer/BufferUtils.js","src/main/generic/utils/buffer/SerialBuffer.js","src/main/generic/utils/crc/CRC8.js","src/main/generic/utils/number/BigNumber.js","src/main/generic/utils/number/NumberUtils.js","src/main/generic/utils/merkle/MerklePath.js","src/main/generic/utils/mnemonic/MnemonicUtils.js","src/main/generic/utils/platform/PlatformUtils.js","src/main/generic/utils/string/StringUtils.js","src/main/generic/consensus/Policy.js","src/main/generic/consensus/base/primitive/Serializable.js","src/main/generic/consensus/base/primitive/Hash.js","src/main/generic/consensus/base/primitive/PrivateKey.js","src/main/generic/consensus/base/primitive/PublicKey.js","src/main/generic/consensus/base/primitive/KeyPair.js","src/main/generic/consensus/base/primitive/Entropy.js","src/main/generic/consensus/base/primitive/ExtendedPrivateKey.js","src/main/generic/consensus/base/primitive/RandomSecret.js","src/main/generic/consensus/base/primitive/Signature.js","src/main/generic/consensus/base/primitive/Commitment.js","src/main/generic/consensus/base/primitive/CommitmentPair.js","src/main/generic/consensus/base/primitive/PartialSignature.js","src/main/generic/consensus/base/account/Address.js","src/main/generic/consensus/base/account/Account.js","src/main/generic/consensus/base/transaction/Transaction.js","src/main/generic/consensus/base/transaction/SignatureProof.js","src/main/generic/consensus/base/transaction/BasicTransaction.js","src/main/generic/consensus/base/transaction/ExtendedTransaction.js","src/main/generic/utils/IWorker.js","src/main/generic/utils/WasmHelper.js","src/main/generic/utils/crypto/CryptoWorker.js","src/main/generic/utils/crypto/CryptoUtils.js","src/main/generic/consensus/GenesisConfigOffline.js","src/main/platform/browser/index.suffix.js"],"names":["Nimiq","window","Proxy","exports","_currentScript","document","currentScript","scripts","getElementsByTagName","length","_path","src","indexOf","substring","lastIndexOf","Class","scope","self","[object Object]","cls","name","register","LogNative","this","_global_level","Log","INFO","_tag_levels","localStorage","c","getItem","JSON","parse","e","console","warn","tag","level","setItem","stringify","args","isLoggable","unshift","Level","toStringTag","Date","toTimeString","substr","error","ERROR","apply","WARNING","info","debug","DEBUG","trace","TRACE","log","instance","_instance","native","_native","setLoggable","get","l","i","toString","constructor","msg","message","arguments","Array","prototype","slice","call","undefined","VERBOSE","ASSERT","v","isNaN","parseInt","toLowerCase","d","bind","w","t","Observable","WILDCARD","_listeners","Map","clear","type","callback","has","push","set","id","promises","listeners","key","res","Promise","all","observable","types","fire","on","CryptoLib","getRandomValues","crypto","msCrypto","ArrayUtils","arr","Math","floor","random","uintarr","begin","end","clamp","min","max","byteLength","len","Uint8Array","buffer","byteOffset","list","k","n","indices","from","x","map","reverseRange","found","j","Assert","condition","Error","BufferUtils","String","fromCharCode","string","buf","charCodeAt","u8","TextDecoder","_ISO_8859_15_DECODER","decode","replace","num","_BASE64_LOOKUP","start","tmp","output","_tripletToBase64","join","extraBytes","parts","len2","_base64encodeChunk","PlatformUtils","isNodeJs","Buffer","btoa","_codePointTextDecoder","_base64fromByteArray","base64","SerialBuffer","atob","toBase64","alphabet","BASE32_ALPHABET","NIMIQ","byte","symbol","shift","carry","base32","charmap","toUpperCase","split","forEach","char","hex","code","HEX_ALPHABET","trim","StringUtils","isHexBytes","match","bin","lpad","a","b","viewA","viewB","BASE64_ALPHABET","RFC4648","RFC4648_HEX","bufferOrArrayOrLength","super","_view","DataView","_readPos","_writePos","subarray","readPos","value","writePos","array","getUint8","setUint8","getUint16","setUint16","getUint32","setUint32","pow","NumberUtils","isUint64","readUint8","readUint16","readUint32","readUint64","writeUint8","writeUint16","writeUint32","writeUint64","getFloat64","setFloat64","bytes","read","toAscii","isMultibyte","fromAscii","write","view","padding","isUint8","CRC8","table","curr","_table","_createTable","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","s","z","r","compare","y","xc","yc","intCheck","isArray","obj","Object","isOdd","toExponential","str","charAt","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","isNum","test","round","search","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","p","hasOwnProperty","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","maxOrMin","lt","minimum","gt","dp","rand","Uint32Array","copy","pop","splice","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","rm","concat","multiply","base","m","temp","xlo","xhi","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","format","c0","ne","method","normalise","p1","p2","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","equals","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","val","Number","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","MerklePath","nodes","some","it","MerklePathNode","_nodes","values","leafValue","fnHash","MerkleTree","_hash","leafHash","path","_compute","hash","containsLeaf","inner","Hash","light","mid","left","right","leftLeaf","leftHash","rightLeaf","rightHash","concatTypedArrays","serialize","root","node","serializedSize","count","leftBitsSize","leftBits","unserialize","_compress","reduce","sum","o","every","_left","MnemonicUtils","entropy","CS","compute","toBinary","computeSha256","fromHex","Entropy","ArrayBuffer","bits","wordlist","chunk","index","fromBinary","mnemonic","words","word","legacy","dividerIndex","entropyBits","checksumBits","entropyBytes","_crcChecksum","_sha256Checksum","DEFAULT_WORDLIST","_normalizeEntropy","_entropyToBits","_bitsToMnemonic","_mnemonicToBits","_bitsToEntropy","password","mnemonicBuffer","saltBuffer","_salt","CryptoUtils","computePBKDF2sha512","seed","mnemonicToSeed","ExtendedPrivateKey","generateMasterKey","normalizedEntropy","isBIP39","isLegacy","MnemonicType","UNKNOWN","BIP39","LEGACY","ENGLISH_WORDLIST","freeze","isBrowser","process","require","RTCPeerConnection","webkitRTCPeerConnection","location","protocol","navigator","onLine","platform","isHex","str1","str2","padString","Policy","coins","SATOSHIS_PER_COIN","satoshis","blockHeight","startHeight","_supplyCacheInterval","startI","_supplyCacheMax","endI","supply","INITIAL_SUPPLY","_supplyCache","endHeight","_supplyAfter","initialSupply","_blockRewardAt","currentSupply","supplyAfter","remaining","TOTAL_SUPPLY","EMISSION_TAIL_START","EMISSION_TAIL_REWARD","EMISSION_SPEED","BLOCK_TIME","BLOCK_SIZE_MAX","BLOCK_TARGET_MAX","DIFFICULTY_BLOCK_WINDOW","DIFFICULTY_MAX_ADJUSTMENT_FACTOR","TRANSACTION_VALIDITY_WINDOW","M","K","DELTA","NUM_BLOCKS_VERIFICATION","NUM_SNAPSHOTS_MAX","Serializable","toHex","arg","algorithm","Algorithm","BLAKE2B","getSize","_obj","_algorithm","blake2b","computeBlake2b","argon2d","CryptoWorker","getInstanceAsync","computeArgon2d","ARGON2D","SHA256","computeSha512","SHA512","sha256","SIZE","fromBase64","size","input","NodeNative","node_blake2","stackPtr","Module","stackSave","hashSize","wasmOut","stackAlloc","wasmIn","HEAPU8","_nimiq_blake2","stackRestore","node_sha256","_nimiq_sha256","node_sha512","_nimiq_sha512","NULL","PrivateKey","privateKey","lib","publicKey","publicKeysHash","PublicKey","node_ed25519_derive_delinearized_private_key","wasmInPrivateKey","wasmInPublicKey","wasmInPublicKeysHash","_ed25519_derive_delinearized_private_key","delinearizedPrivateKey","CryptoWorkerImpl","_publicKeyDerive","publicKeys","sort","_delinearizeAndAggregatePublicKeys","Address","fromHash","PeerId","publicKeysObj","_publicKeysHash","raw","_publicKeysDelinearizeAndAggregate","node_ed25519_public_key_derive","pubKeyBuffer","HEAP8","privKeyBuffer","_ed25519_public_key_derive","fill","concatenatedPublicKeys","node_ed25519_hash_public_keys","wasmInPublicKeys","_ed25519_hash_public_keys","hashedPublicKey","node_ed25519_delinearize_public_key","_ed25519_delinearize_public_key","delinearizedPublicKey","node_ed25519_aggregate_delinearized_public_keys","_ed25519_aggregate_delinearized_public_keys","aggregatePublicKey","KeyPair","locked","lockSalt","_locked","_lockedInternally","_lockSalt","_publicKey","_internalPrivateKey","generate","derive","hexBuf","decryptedData","decryptOtpKdf","_privateKey","isLocked","_unlockedPrivateKey","unlockKey","wasLocked","unlock","encryptOtpKdf","relock","encryptedSize","ENCRYPTION_SIZE","overwrite","_otpPrivateKey","_clearUnlockedPrivateKey","otpKdf","LOCK_KDF_ROUNDS","mnemonicToExtendedPrivateKey","toMnemonic","entropyToMnemonic","chainCode","CHAIN_CODE_SIZE","_key","_chainCode","bCurve","computeHmacSha512","data","segments","isUint32","isValidPath","extendedKey","derivePath","toAddress","RandomSecret","Signature","_signatureCreate","commitment","signatures","_combinePartialSignatures","_signatureVerify","combinedCommitment","partialSignatures","combinedSignature","_aggregatePartialSignatures","sigA","sigB","_scalarsAdd","PartialSignature","node_ed25519_add_scalars","wasmOutSum","wasmInA","wasmInB","_ed25519_add_scalars","node_ed25519_sign","wasmOutSignature","signatureBuffer","wasmInMessage","wasmInPubKey","wasmInPrivKey","_ed25519_sign","signature","node_ed25519_verify","wasmInSignature","_ed25519_verify","Commitment","commitments","_commitmentsAggregate","concatenatedCommitments","node_ed25519_aggregate_commitments","wasmInCommitments","_ed25519_aggregate_commitments","aggCommitments","CommitmentPair","secret","_secret","_commitment","randomness","RANDOMNESS_SIZE","_commitmentCreate","node_ed25519_create_commitment","wasmOutCommitment","wasmOutSecret","_ed25519_create_commitment","SERIALIZED_SIZE","aggregateCommitment","_delinearizedPartialSignatureCreate","node_ed25519_delinearized_partial_sign","wasmInSecret","wasmInCommitment","_ed25519_delinearized_partial_sign","partialSignature","fromUserFriendlyAddress","CCODE","_ibanCheck","fromBase32","withSpaces","toBase32","check","HEX_SIZE","CONTRACT_CREATION","Account","balance","_type","_balance","TYPE_MAP","transaction","transactionsCache","revert","validityStartHeight","withBalance","fee","newBalance","containsTransaction","INITIAL","isInitial","Type","BASIC","VESTING","HTLC","Transaction","sender","senderType","recipient","recipientType","flags","proof","networkId","GenesisConfig","NETWORK_ID","Flag","isUint16","_format","_sender","_senderType","_recipient","_recipientType","_value","_fee","_networkId","_validityStartHeight","_flags","_data","_proof","getContractCreationAddress","FORMAT_MAP","serializedContentSize","_valid","_verify","verifyOutgoingTransaction","verifyIncomingTransaction","serializeContent","compareBlockOrder","recCompare","senderCompare","tx","feePerByte","flag","Format","EXTENDED","NONE","ALL","SignatureProof","verify","signerKey","merklePath","_merklePath","_signature","isSignedBy","merkleRoot","computeRoot","BasicTransaction","senderPubKey","singleSig","_signatureProof","that","ExtendedTransaction","dataSize","proofSize","IWorker","clazz","worker","workerScript","_workersSupported","createProxy","Worker","URL","createObjectURL","Blob","_workerImplementation","init","Pool","startWorkerForProxy","command","postMessage","status","result","areWorkersAsync","_insideWebWorker","WorkerGlobalScope","_global","global","baseClazz","impl","onmessage","stubBaseOnMessage","url","resolve","head","script","createElement","ret","setTimeout","onreadystatechange","onload","appendChild","proxyClass","_name","_messageId","_worker","_receive","_waiting","_invoke","then","cb","delete","WorkerProxy","funcName","getOwnPropertyNames","Stub","finalRes","_result","_onmessage","close","poolClass","proxyInitializer","_proxyInitializer","_poolSize","_workers","_freeWorkers","_waitingCalls","_updateToSize","poolSize","_size","catch","_step","destroy","workerPromises","createdWorkers","idx","_moduleLoadedCallbacks","WasmHelper","_importStarted","importWasmBrowser","importScriptBrowser","_importFinished","importWasmNodeJs","importScriptNodeJs","wasm","module","_adjustWasmPath","WebAssembly","xhr","XMLHttpRequest","open","responseType","wasmBinary","response","onerror","send","fs","readFileSync","u","toUint8Array","asm","_adjustScriptPath","moduleSettings","async","reject","onRuntimeInitialized","importScripts","_loadBrowserScript","__dirname","_workerAsync","startWorkerPoolForProxy","inputs","salt","iterations","block","transactionValid","timeNow","genesisHash","SHA512_BLOCK_SIZE","iKey","oKey","innerHash","derivedKeyLength","hashLength","derivedKey","xor","kdf","ENCRYPTION_INPUT_SIZE","ENCRYPTION_SALT_LENGTH","log2","ENCRYPTION_KDF_ROUNDS","ENCRYPTION_CHECKSUM_LENGTH","roundsLog","rounds","encryptedData","checksum","CONFIGS","_config","NETWORK_NAME","main","dev","bounty","_loaded","_onload"],"mappings":"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AA,QAAA,QAAA,QAAA,QAAA,QAAA,SAAA,QAAA,SAAA,QAAA,SAAA,QAAA,QAAA,WAAA,SAAA,SAAA,QAAA,UAAA,QAAA,QAAA,SAAA,QAAA,SAAA,UAAA,QAAA,OAAA,OAAA,SAAA,SAAA,SAAA,SAAA,SAAA,QAAA,MAAA,WAAA,OAAA,SAAA,QAAA,OAAA,UAAA,QAAA,QAAA,SAAA,OAAA,OAAA,OAAA,OAAA,SAAA,OAAA,MAAA,QAAA,SAAA,QAAA,SAAA,QAAA,SAAA,SAAA,UAAA,UAAA,UAAA,MAAA,SAAA,OAAA,QAAA,SAAA,QAAA,OAAA,OAAA,OAAA,SAAA,SAAA,SAAA,MAAA,UAAA,QAAA,WAAA,SAAA,SAAA,QAAA,UAAA,OAAA,UAAA,SAAA,SAAA,SAAA,UAAA,SAAA,UAAA,QAAA,QAAA,WAAA,SAAA,QAAA,UAAA,SAAA,QAAA,OAAA,QAAA,QAAA,SAAA,OAAA,SAAA,QAAA,UAAA,QAAA,QAAA,UAAA,SAAA,SAAA,UAAA,UAAA,QAAA,QAAA,QAAA,WAAA,SAAA,UAAA,OAAA,QAAA,QAAA,OAAA,UAAA,OAAA,OAAA,QAAA,QAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,OAAA,QAAA,OAAA,QAAA,QAAA,QAAA,QAAA,OAAA,QAAA,UAAA,SAAA,QAAA,QAAA,UAAA,OAAA,SAAA,OAAA,OAAA,UAAA,QAAA,SAAA,UAAA,OAAA,UAAA,QAAA,SAAA,UAAA,UAAA,UAAA,UAAA,WAAA,UAAA,WAAA,UAAA,WAAA,OAAA,OAAA,SAAA,OAAA,QAAA,OAAA,OAAA,UAAA,OAAA,SAAA,QAAA,UAAA,SAAA,SAAA,SAAA,QAAA,SAAA,QAAA,SAAA,QAAA,OAAA,QAAA,QAAA,SAAA,QAAA,QAAA,QAAA,SAAA,QAAA,OAAA,UAAA,QAAA,QAAA,SAAA,OAAA,QAAA,SAAA,QAAA,UAAA,QAAA,SAAA,UAAA,SAAA,QAAA,MAAA,UAAA,OAAA,UAAA,MAAA,WAAA,UAAA,UAAA,UAAA,QAAA,UAAA,SAAA,OAAA,QAAA,MAAA,SAAA,OAAA,QAAA,SAAA,SAAA,OAAA,WAAA,OAAA,MAAA,OAAA,SAAA,SAAA,SAAA,WAAA,SAAA,UAAA,WAAA,WAAA,OAAA,UAAA,SAAA,OAAA,SAAA,QAAA,UAAA,SAAA,SAAA,SAAA,UAAA,OAAA,SAAA,SAAA,UAAA,QAAA,SAAA,SAAA,WAAA,SAAA,SAAA,OAAA,UAAA,UAAA,SAAA,SAAA,UAAA,SAAA,SAAA,UAAA,OAAA,UAAA,QAAA,OAAA,SAAA,OAAA,SAAA,UAAA,UAAA,UAAA,SAAA,WAAA,SAAA,OAAA,WAAA,WAAA,UAAA,OAAA,UAAA,WAAA,UAAA,WAAA,SAAA,SAAA,UAAA,QAAA,SAAA,WAAA,MAAA,OAAA,UAAA,SAAA,SAAA,SAAA,QAAA,OAAA,OAAA,SAAA,OAAA,QAAA,SAAA,QAAA,UAAA,OAAA,QAAA,QAAA,QAAA,QAAA,QAAA,OAAA,QAAA,OAAA,OAAA,MAAA,OAAA,OAAA,OAAA,SAAA,OAAA,QAAA,OAAA,QAAA,UAAA,QAAA,QAAA,QAAA,OAAA,QAAA,SAAA,OAAA,OAAA,OAAA,UAAA,UAAA,OAAA,OAAA,UAAA,SAAA,MAAA,QAAA,SAAA,QAAA,QAAA,WAAA,UAAA,UAAA,WAAA,WAAA,QAAA,OAAA,SAAA,SAAA,UAAA,SAAA,UAAA,SAAA,UAAA,QAAA,SAAA,QAAA,MAAA,UAAA,UAAA,QAAA,SAAA,UAAA,SAAA,SAAA,UAAA,QAAA,SAAA,SAAA,SAAA,SAAA,SAAA,QAAA,SAAA,QAAA,WAAA,UAAA,QAAA,QAAA,MAAA,QAAA,QAAA,UAAA,QAAA,QAAA,SAAA,QAAA,UAAA,SAAA,UAAA,SAAA,WAAA,OAAA,QAAA,SAAA,QAAA,UAAA,SAAA,WAAA,SAAA,UAAA,SAAA,UAAA,WAAA,UAAA,UAAA,QAAA,QAAA,OAAA,SAAA,SAAA,SAAA,SAAA,UAAA,SAAA,UAAA,SAAA,QAAA,MAAA,UAAA,SAAA,OAAA,UAAA,OAAA,QAAA,QAAA,OAAA,QAAA,OAAA,SAAA,SAAA,MAAA,QAAA,UAAA,OAAA,UAAA,MAAA,QAAA,SAAA,UAAA,QAAA,WAAA,UAAA,WAAA,UAAA,MAAA,OAAA,OAAA,SAAA,QAAA,WAAA,QAAA,QAAA,MAAA,QAAA,UAAA,QAAA,SAAA,OAAA,OAAA,SAAA,QAAA,OAAA,OAAA,SAAA,SAAA,OAAA,OAAA,QAAA,SAAA,OAAA,MAAA,UAAA,MAAA,OAAA,QAAA,QAAA,OAAA,SAAA,OAAA,SAAA,OAAA,QAAA,QAAA,QAAA,SAAA,QAAA,QAAA,MAAA,OAAA,QAAA,MAAA,OAAA,OAAA,SAAA,OAAA,OAAA,QAAA,SAAA,SAAA,OAAA,UAAA,QAAA,UAAA,SAAA,SAAA,QAAA,MAAA,UAAA,QAAA,WAAA,QAAA,SAAA,SAAA,OAAA,QAAA,QAAA,QAAA,SAAA,QAAA,OAAA,MAAA,QAAA,UAAA,OAAA,SAAA,SAAA,OAAA,SAAA,UAAA,OAAA,MAAA,SAAA,UAAA,SAAA,SAAA,UAAA,MAAA,OAAA,OAAA,SAAA,QAAA,OAAA,UAAA,SAAA,QAAA,SAAA,UAAA,UAAA,QAAA,QAAA,OAAA,SAAA,SAAA,UAAA,OAAA,OAAA,OAAA,SAAA,QAAA,QAAA,QAAA,UAAA,QAAA,QAAA,QAAA,QAAA,OAAA,OAAA,OAAA,UAAA,OAAA,OAAA,QAAA,UAAA,SAAA,SAAA,SAAA,OAAA,OAAA,QAAA,QAAA,QAAA,QAAA,QAAA,UAAA,QAAA,QAAA,OAAA,QAAA,OAAA,UAAA,QAAA,OAAA,QAAA,QAAA,QAAA,QAAA,QAAA,SAAA,MAAA,MAAA,QAAA,OAAA,OAAA,SAAA,UAAA,OAAA,QAAA,SAAA,OAAA,QAAA,UAAA,MAAA,OAAA,OAAA,SAAA,OAAA,SAAA,QAAA,QAAA,WAAA,SAAA,QAAA,SAAA,OAAA,MAAA,OAAA,SAAA,OAAA,OAAA,OAAA,MAAA,OAAA,UAAA,QAAA,SAAA,OAAA,OAAA,UAAA,SAAA,OAAA,QAAA,OAAA,OAAA,OAAA,SAAA,QAAA,WAAA,OAAA,QAAA,OAAA,QAAA,MAAA,OAAA,QAAA,SAAA,QAAA,UAAA,SAAA,OAAA,SAAA,QAAA,OAAA,UAAA,SAAA,MAAA,OAAA,OAAA,WAAA,OAAA,SAAA,MAAA,UAAA,UAAA,QAAA,UAAA,UAAA,SAAA,SAAA,SAAA,UAAA,UAAA,OAAA,UAAA,SAAA,WAAA,QAAA,WAAA,SAAA,WAAA,SAAA,UAAA,SAAA,SAAA,UAAA,UAAA,SAAA,SAAA,SAAA,QAAA,WAAA,QAAA,UAAA,SAAA,SAAA,SAAA,UAAA,UAAA,SAAA,WAAA,OAAA,SAAA,SAAA,UAAA,OAAA,SAAA,UAAA,QAAA,OAAA,QAAA,SAAA,SAAA,MAAA,OAAA,UAAA,QAAA,QAAA,QAAA,MAAA,OAAA,OAAA,UAAA,MAAA,QAAA,QAAA,OAAA,SAAA,SAAA,OAAA,OAAA,WAAA,OAAA,OAAA,UAAA,MAAA,OAAA,MAAA,SAAA,OAAA,UAAA,OAAA,MAAA,UAAA,OAAA,SAAA,OAAA,OAAA,QAAA,QAAA,OAAA,MAAA,QAAA,QAAA,SAAA,OAAA,OAAA,OAAA,WAAA,SAAA,QAAA,QAAA,QAAA,QAAA,UAAA,OAAA,MAAA,OAAA,UAAA,QAAA,OAAA,SAAA,OAAA,QAAA,QAAA,UAAA,OAAA,MAAA,QAAA,SAAA,UAAA,QAAA,OAAA,SAAA,OAAA,UAAA,SAAA,SAAA,QAAA,OAAA,UAAA,UAAA,UAAA,OAAA,OAAA,QAAA,OAAA,OAAA,QAAA,OAAA,OAAA,SAAA,OAAA,SAAA,OAAA,SAAA,OAAA,OAAA,UAAA,QAAA,OAAA,QAAA,SAAA,OAAA,OAAA,UAAA,OAAA,SAAA,OAAA,QAAA,QAAA,UAAA,SAAA,QAAA,QAAA,SAAA,SAAA,UAAA,MAAA,QAAA,SAAA,OAAA,OAAA,OAAA,QAAA,OAAA,SAAA,MAAA,SAAA,UAAA,QAAA,UAAA,SAAA,QAAA,SAAA,QAAA,SAAA,SAAA,SAAA,WAAA,OAAA,OAAA,SAAA,QAAA,WAAA,OAAA,SAAA,SAAA,UAAA,OAAA,SAAA,OAAA,UAAA,OAAA,WAAA,QAAA,QAAA,SAAA,OAAA,SAAA,SAAA,UAAA,OAAA,QAAA,QAAA,QAAA,QAAA,OAAA,UAAA,QAAA,SAAA,SAAA,WAAA,OAAA,UAAA,QAAA,OAAA,UAAA,QAAA,SAAA,UAAA,SAAA,SAAA,OAAA,UAAA,MAAA,QAAA,UAAA,SAAA,QAAA,SAAA,MAAA,SAAA,UAAA,SAAA,UAAA,QAAA,OAAA,QAAA,OAAA,UAAA,WAAA,SAAA,SAAA,QAAA,WAAA,QAAA,OAAA,QAAA,OAAA,SAAA,OAAA,WAAA,SAAA,SAAA,WAAA,QAAA,OAAA,SAAA,SAAA,UAAA,OAAA,QAAA,OAAA,SAAA,SAAA,QAAA,SAAA,SAAA,OAAA,OAAA,OAAA,WAAA,UAAA,UAAA,SAAA,QAAA,OAAA,MAAA,UAAA,UAAA,QAAA,OAAA,OAAA,OAAA,QAAA,QAAA,QAAA,UAAA,SAAA,SAAA,QAAA,OAAA,UAAA,OAAA,UAAA,SAAA,QAAA,MAAA,UAAA,SAAA,QAAA,MAAA,MAAA,OAAA,SAAA,SAAA,UAAA,UAAA,SAAA,UAAA,QAAA,QAAA,UAAA,OAAA,MAAA,QAAA,SAAA,QAAA,MAAA,OAAA,MAAA,QAAA,UAAA,OAAA,OAAA,MAAA,QAAA,SAAA,OAAA,OAAA,QAAA,UAAA,SAAA,SAAA,SAAA,QAAA,UAAA,QAAA,WAAA,QAAA,SAAA,WAAA,SAAA,UAAA,QAAA,UAAA,QAAA,SAAA,UAAA,OAAA,OAAA,OAAA,MAAA,QAAA,SAAA,SAAA,QAAA,OAAA,SAAA,OAAA,OAAA,SAAA,OAAA,QAAA,QAAA,QAAA,UAAA,QAAA,SAAA,SAAA,OAAA,SAAA,QAAA,OAAA,QAAA,OAAA,UAAA,SAAA,UAAA,QAAA,OAAA,UAAA,QAAA,SAAA,OAAA,UAAA,UAAA,MAAA,UAAA,SAAA,SAAA,SAAA,UAAA,SAAA,SAAA,MAAA,QAAA,QAAA,SAAA,WAAA,QAAA,SAAA,UAAA,QAAA,MAAA,SAAA,OAAA,QAAA,OAAA,UAAA,OAAA,SAAA,QAAA,QAAA,QAAA,SAAA,UAAA,QAAA,OAAA,SAAA,SAAA,QAAA,OAAA,SAAA,OAAA,OAAA,QAAA,QAAA,OAAA,SAAA,OAAA,OAAA,OAAA,UAAA,UAAA,WAAA,WAAA,OAAA,SAAA,UAAA,UAAA,SAAA,QAAA,WAAA,SAAA,UAAA,SAAA,UAAA,UAAA,SAAA,UAAA,QAAA,QAAA,UAAA,QAAA,WAAA,SAAA,UAAA,QAAA,UAAA,UAAA,UAAA,SAAA,UAAA,UAAA,UAAA,QAAA,WAAA,UAAA,UAAA,QAAA,UAAA,SAAA,UAAA,OAAA,OAAA,QAAA,UAAA,QAAA,QAAA,QAAA,WAAA,SAAA,UAAA,QAAA,OAAA,MAAA,SAAA,UAAA,UAAA,UAAA,UAAA,WAAA,QAAA,OAAA,OAAA,QAAA,SAAA,UAAA,OAAA,OAAA,QAAA,QAAA,OAAA,OAAA,QAAA,QAAA,OAAA,QAAA,SAAA,QAAA,QAAA,OAAA,OAAA,SAAA,QAAA,MAAA,QAAA,QAAA,OAAA,SAAA,QAAA,UAAA,SAAA,UAAA,SAAA,SAAA,UAAA,SAAA,UAAA,SAAA,SAAA,SAAA,SAAA,UAAA,SAAA,QAAA,UAAA,SAAA,OAAA,SAAA,WAAA,SAAA,SAAA,SAAA,QAAA,OAAA,SAAA,SAAA,SAAA,UAAA,SAAA,UAAA,SAAA,WAAA,SAAA,WAAA,WAAA,SAAA,SAAA,UAAA,SAAA,UAAA,SAAA,SAAA,SAAA,SAAA,MAAA,SAAA,OAAA,OAAA,OAAA,QAAA,QAAA,QAAA,QAAA,OAAA,OAAA,SAAA,OAAA,SAAA,QAAA,QAAA,OAAA,QAAA,QAAA,SAAA,SAAA,UAAA,OAAA,SAAA,OAAA,OAAA,SAAA,QAAA,QAAA,QAAA,QAAA,SAAA,OAAA,MAAA,OAAA,MAAA,SAAA,QAAA,MAAA,SAAA,UAAA,OAAA,OAAA,QAAA,SAAA,QAAA,OAAA,SAAA,OAAA,SAAA,OAAA,UAAA,UAAA,QAAA,UAAA,OAAA,MAAA,QAAA,OAAA,QAAA,UAAA,QAAA,SAAA,SAAA,UAAA,WAAA,WAAA,QAAA,QAAA,SAAA,SAAA,QAAA,MAAA,SAAA,SAAA,OAAA,SAAA,SAAA,UAAA,WAAA,OAAA,OAAA,UAAA,SAAA,OAAA,UAAA,SAAA,QAAA,WAAA,SAAA,UAAA,UAAA,SAAA,QAAA,QAAA,SAAA,QAAA,UAAA,QAAA,OAAA,QAAA,UAAA,SAAA,QAAA,QAAA,OAAA,SAAA,QAAA,OAAA,QAAA,OAAA,QAAA,WAAA,QAAA,SAAA,QAAA,UAAA,MAAA,UAAA,OAAA,OAAA,QAAA,QAAA,OAAA,SAAA,OAAA,QAAA,SAAA,UAAA,SAAA,QAAA,OAAA,QAAA,SAAA,UAAA,MAAA,OAAA,QAAA,SAAA,MAAA,QAAA,OAAA,QAAA,QAAA,OAAA,OAAA,QAAA,UAAA,QAAA,QAAA,SAAA,OAAA,SAAA,OAAA,OAAA,QAAA,QAAA,QAAA,QAAA,QAAA,SAAA,QAAA,QAAA,OAAA,QAAA,OAAA,OAAA,SAAA,SAAA,OAAA,OAAA,OAAA,QAAA,UAAA,QAAA,WAAA,QAAA,UAAA,OAAA,OAAA,QAAA,OAAA,OAAA,QAAA,OAAA,SAAA,QAAA,QAAA,QAAA,UAAA,QAAA,QAAA,UAAA,QAAA,QAAA,QAAA,SAAA,QAAA,SAAA,QAAA,OAAA,SAAA,QAAA,QAAA,UAAA,QAAA,QAAA,OAAA,QAAA,SAAA,SAAA,MAAA,SAAA,UAAA,WAAA,SAAA,UAAA,QAAA,QAAA,SAAA,QAAA,QAAA,QAAA,QAAA,OAAA,QAAA,QAAA,OAAA,OAAA,SAAA,QAAA,QAAA,QAAA,QAAA,UAAA,QAAA,QAAA,QAAA,QAAA,WAAA,SAAA,SAAA,SAAA,WAAA,UAAA,QAAA,UAAA,QAAA,UAAA,SAAA,SAAA,UAAA,OAAA,SAAA,SAAA,QAAA,UAAA,OAAA,SAAA,MAAA,QAAA,SAAA,QAAA,SAAA,UAAA,OAAA,UAAA,QAAA,WAAA,WAAA,SAAA,UAAA,UAAA,UAAA,QAAA,OAAA,QAAA,QAAA,QAAA,QAAA,OAAA,QAAA,SAAA,QAAA,SAAA,UAAA,QAAA,SAAA,QAAA,SAAA,MAAA,OAAA,SAAA,OAAA,OAAA,OAAA,SAAA,OAAA,QAAA,SAAA,OAAA,QAAA,OAAA,OAAA,MAAA,SAAA,SAAA,OAAA,OAAA,OAAA,OAAA,QAAA,OAAA,QAAA,OAAA,SAAA,QAAA,OAAA,QAAA,OAAA,UAAA,QAAA,SAAA,QAAA,QAAA,UAAA,SAAA,OAAA,QAAA,OAAA,SAAA,OAAA,OAAA,MAAA,QAAA,SAAA,QAAA,QAAA,UAAA,QAAA,UAAA,MAAA,WAAA,SAAA,QAAA,SAAA,WAAA,OAAA,SAAA,UAAA,OAAA,QAAA,MAAA,QAAA,SAAA,QAAA,UAAA,WAAA,OAAA,QAAA,UAAA,SAAA,QAAA,OAAA,MAAA,QAAA,QAAA,UAAA,SAAA,QAAA,WAAA,OAAA,QAAA,SAAA,OAAA,QAAA,OAAA,QAAA,QAAA,QAAA,QAAA,UAAA,OAAA,OAAA,SAAA,UAAA,QAAA,OAAA,QAAA,UAAA,QAAA,QAAA,MAAA,OAAA,UAAA,SAAA,OAAA,SAAA,SAAA,OAAA,SAAA,SAAA,SAAA,QAAA,OAAA,QAAA,MAAA,OAAA,UAAA,OAAA,WAAA,SAAA,UAAA,QAAA,UAAA,QAAA,OAAA,SAAA,SAAA,UAAA,UAAA,SAAA,OAAA,WAAA,UAAA,SAAA,QAAA,UAAA,SAAA,SAAA,UAAA,SAAA,OAAA,QAAA,QAAA,QAAA,OAAA,QAAA,MAAA,OAAA,SAAA,UAAA,QAAA,UAAA,SAAA,SAAA,QAAA,QAAA,SAAA,QAAA,MAAA,SAAA,QAAA,UAAA,OAAA,QAAA,UAAA,SAAA,SAAA,UAAA,QAAA,OAAA,SAAA,UAAA,OAAA,SAAA,UAAA,SAAA,UAAA,UAAA,UAAA,QAAA,OAAA,UAAA,UAAA,SAAA,UAAA,QAAA,OAAA,QAAA,SAAA,QAAA,QAAA,QAAA,QAAA,OAAA,UAAA,SAAA,OAAA,SAAA,OAAA,QAAA,OAAA,OAAA,OAAA,SAAA,OAAA,UAAA,OAAA,UAAA,OAAA,OAAA,QAAA,QAAA,OAAA,MAAA,SAAA,SAAA,OAAA,SAAA,UAAA,MAAA,UAAA,UAAA,QAAA,UAAA,OAAA,MAAA,QAAA,OAAA,QAAA,QAAA,OAAA,QAAA,OAAA,UAAA,OAAA,QAAA,OAAA,OAAA,OAAA,MAAA,SAAA,OAAA,OAAA,OAAA,SAAA,SAAA,OAAA,SAAA,OAAA,OAAA,UAAA,OAAA,QAAA,SAAA,OAAA,OAAA,OAAA,OAAA,QAAA,QAAA,QAAA,OAAA,QAAA,UAAA,QAAA,QAAA,QAAA,OAAA,OAAA,SAAA,MAAA,QAAA,QAAA,QAAA,OAAA,OAAA,OACA/C,cAAAwB,iBAAAxB,cAAA+C,iBAKA/C,cAAA2C,aAAA,CACAC,SAAA,EACAE,OAAA,EACAD,MAAA,GAGAvR,OAAA0R,OAAAhD,eAEA1e,MAAAM,SAAAoe,eChQA,MAAAvV,cAIAhJ,mBACA,MAAA,oBAAAjB,OAMAiB,kBACA,OAAAgJ,cAAAwY,aAAA,iBAAAC,SAAA,mBAAAC,QAMA1hB,wBAEA,SADAgJ,cAAAwY,YAAAziB,OAAA4iB,mBAAA5iB,OAAA6iB,wBAAA,MAOA5hB,oBACA,OAAAgJ,cAAAwY,aAAAK,UAAA,UAAAA,SAAAC,SAMA9hB,kBACA,OAAAgJ,cAAAwY,eAAA,WAAAziB,OAAAgjB,YAAAhjB,OAAAgjB,UAAAC,OAMAhiB,mBACA,OAAAgJ,cAAAC,YAAA,OAAAmJ,KAAAqP,QAAAQ,WAGApiB,MAAAM,SAAA6I,eC5CA,MAAA2B,YAKA3K,mBAAAgQ,GACA,MAAA,kBAAAoC,KAAApC,GAOAhQ,aAAAgQ,GACA,MAAA,iBAAAoC,KAAApC,GAQAhQ,kBAAAgQ,EAAAzQ,GACA,QAAAoL,YAAAuX,MAAAlS,KACAA,EAAAzQ,OAAA,GAAA,IACA,iBAAAA,GAAAyQ,EAAAzQ,OAAA,IAAAA,IASAS,oBAAAmiB,EAAAC,GACA,IAAArf,EAAA,EACA,KAAAA,EAAAof,EAAA5iB,QACA4iB,EAAApf,KAAAqf,EAAArf,KADAA,GAGA,OAAAof,EAAAtgB,OAAA,EAAAkB,GASA/C,YAAAgQ,EAAAqS,EAAA9iB,GACA,KAAAyQ,EAAAzQ,OAAAA,GAAAyQ,EAAAqS,EAAArS,EACA,OAAAA,GAIAnQ,MAAAM,SAAAwK,aCtDA,MAAA2X,OAMAtiB,uBAAAuiB,GACA,OAAAxc,KAAAsM,MAAAkQ,EAAAD,OAAAE,mBAQAxiB,uBAAAyiB,GACA,OAAAA,EAAAH,OAAAE,kBAQAxiB,mBAAA0iB,GAEA,IAAAC,EAAA5c,KAAAC,MAAA0c,EAAAJ,OAAAM,sBAAAN,OAAAM,qBAIA,MAAAC,GAHAF,EAAA5c,KAAAQ,IAAA,EAAAR,KAAAO,IAAAqc,EAAAL,OAAAQ,mBAGAR,OAAAM,qBACAG,EAAAhd,KAAAC,MAAA0c,EAAAJ,OAAAM,sBAGA,IAAAI,EAAA,IAAAL,EAAAL,OAAAW,eAAAX,OAAAY,aAAArgB,IAAA8f,GAEA,IAAA,IAAA5f,EAAA8f,EAAA9f,EAAAggB,IAAAhgB,EAAA,CACA4f,EAAA5f,EAAAuf,OAAAM,qBAEA,MAAAO,GAAApgB,EAAA,GAAAuf,OAAAM,qBAAA,EACAI,EAAAV,OAAAc,aAAAJ,EAAAG,EAAAR,GAEAL,OAAAY,aAAAre,IAAAse,EAAA,EAAAH,GACAV,OAAAQ,gBAAAK,EAAA,EAIA,OAAAb,OAAAc,aAAAJ,EAAAN,EAAAK,EAAAT,OAAAM,sBAUA5iB,oBAAAqjB,EAAAX,EAAAC,EAAA,GACA,IAAAK,EAAAK,EACA,IAAA,IAAAtgB,EAAA4f,EAAA5f,GAAA2f,IAAA3f,EACAigB,GAAAV,OAAAgB,eAAAN,EAAAjgB,GAEA,OAAAigB,EAQAhjB,qBAAA0iB,GACA,MAAAa,EAAAjB,OAAAkB,YAAAd,EAAA,GACA,OAAAJ,OAAAgB,eAAAC,EAAAb,GASA1iB,sBAAAujB,EAAAb,GACA,GAAAA,GAAA,EAAA,OAAA,EACA,MAAAe,EAAAnB,OAAAoB,aAAAH,EACA,OAAAb,GAAAJ,OAAAqB,qBAAAF,GAAAnB,OAAAsB,qBACAtB,OAAAsB,sBAGAH,EADAA,EAAAnB,OAAAuB,gBACAvB,OAAAuB,gBASAvB,OAAAwB,WAAA,GAOAxB,OAAAyB,eAAA,IAOAzB,OAAA0B,iBAAA,IAAA5V,UAAA,GAAA5B,IAAA,KAOA8V,OAAA2B,wBAAA,IAOA3B,OAAA4B,iCAAA,EAOA5B,OAAA6B,4BAAA,IAUA7B,OAAAE,kBAAA,IAOAF,OAAAoB,aAAA,MAQApB,OAAAW,eAAA,OAOAX,OAAAuB,eAAA9d,KAAAyG,IAAA,EAAA,IAOA8V,OAAAqB,oBAAA,SAOArB,OAAAsB,qBAAA,IAUAtB,OAAA8B,EAAA,IAQA9B,OAAA+B,EAAA,IAQA/B,OAAAgC,MAAA,IAQAhC,OAAAiC,wBAAA,IAUAjC,OAAAkC,kBAAA,GAQAlC,OAAAY,aAAA,IAAA3e,IACA+d,OAAAQ,gBAAA,EACAR,OAAAM,qBAAA,IACA/iB,MAAAM,SAAAmiB,QCtOA,MAAAmC,aAKAzkB,OAAAoe,GACA,OAAAA,aAAAqG,cAAA/c,YAAA4Q,OAAAjY,KAAAod,YAAAW,EAAAX,aAOAzd,QAAAoe,GACA,OAAA1W,YAAA4H,QAAAjP,KAAAod,YAAAW,EAAAX,aAGAzd,WACA,OAAAK,KAAAoJ,WAOAzJ,UAAA8H,IAKA9H,WACA,OAAAK,KAAAoJ,WAMAzJ,WACA,OAAA0H,YAAA+B,SAAApJ,KAAAod,aAMAzd,QACA,OAAA0H,YAAAgd,MAAArkB,KAAAod,cAIA5d,MAAAM,SAAAskB,cCpDA,MAAA1H,aAAA0H,aAMAzkB,YAAA2kB,EAAAC,EAAA7H,KAAA8H,UAAAC,SACA,GAAA,OAAAH,EACAA,EAAA,IAAAje,WAAAqW,KAAAgI,QAAAH,QACA,CACA,KAAAD,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAAwd,KAAAgI,QAAAH,GAAA,MAAA,IAAAnd,MAAA,6BAEA+D,QACAnL,KAAA2kB,KAAAL,EAEAtkB,KAAA4kB,WAAAL,EAQA5kB,aAAA8F,GACA,OAAAiX,KAAAmI,QAAApf,GAOA9F,eAAA8F,GACA,OAAA,IAAAiX,KAAAA,KAAAoI,eAAArf,GAAAiX,KAAA8H,UAAAC,SAQA9kB,YAAA8F,GACA,OAAAiX,KAAAqI,QAAAtf,GAOA9F,qBAAA8F,GACA,OAAA,IAAAiX,iBAAAsI,aAAAC,oBAAAC,eAAAzf,GAAAiX,KAAA8H,UAAAW,SAOAxlB,cAAA8F,GACA,OAAA,IAAAiX,KAAAA,KAAA6B,cAAA9Y,GAAAiX,KAAA8H,UAAAY,QAOAzlB,cAAA8F,GACA,OAAA,IAAAiX,KAAAA,KAAA2I,cAAA5f,GAAAiX,KAAA8H,UAAAc,QAQA3lB,eAAA8F,EAAA8e,GAEA,OAAAA,GACA,KAAA7H,KAAA8H,UAAAC,QAAA,OAAA/H,KAAAmI,QAAApf,GACA,KAAAiX,KAAA8H,UAAAY,OAAA,OAAA1I,KAAA6I,OAAA9f,GAGA,QAAA,MAAA,IAAA2B,MAAA,2BASAzH,mBAAA8H,EAAA8c,EAAA7H,KAAA8H,UAAAC,SACA,OAAA,IAAA/H,KAAAjV,EAAAwF,KAAAyP,KAAAgI,QAAAH,IAAAA,GAOA5kB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAQA9H,SAAAmG,EAAAC,GACA,OAAA/F,KAAA2kB,KAAAnZ,SAAA1F,EAAAC,GAIAwX,qBACA,OAAAb,KAAA8I,KAAAhjB,IAAAxC,KAAA4kB,YAIAhZ,YACA,OAAA5L,KAAA2kB,KAIAJ,gBACA,OAAAvkB,KAAA4kB,WAOAjlB,OAAAoe,GACA,OAAAA,aAAArB,MAAAqB,EAAA6G,aAAA5kB,KAAA4kB,YAAAzZ,MAAA8M,OAAA8F,GAOApe,kBAAAsJ,GACA,OAAA,IAAAyT,KAAArV,YAAAoe,WAAAxc,IAOAtJ,eAAAuK,GACA,OAAA,IAAAwS,KAAArV,YAAAmX,QAAAtU,IAOAvK,kBAAAgQ,GACA,IACA,OAAA+M,KAAA8B,QAAA7O,GACA,MAAAjP,IAIA,IACA,OAAAgc,KAAA+I,WAAA9V,GACA,MAAAjP,IAIA,MAAA,IAAA0G,MAAA,uBAOAzH,cAAAoe,GACA,OAAAA,aAAArB,KAOA/c,eAAA4kB,GACA,MAAAmB,EAAAhJ,KAAA8I,KAAAhjB,IAAA+hB,GACA,GAAA,iBAAAmB,EAAA,MAAA,IAAAte,MAAA,0BACA,OAAAse,EAOA/lB,sBAAAgmB,GACA,GAAAhd,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAAqW,KAAAgI,QAAAhI,KAAA8H,UAAAC,UACAmB,WAAAC,YAAAhP,EAAA,IAAAxQ,WAAAsf,IACA,OAAA9O,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAC,EAAAvJ,KAAAgI,QAAAhI,KAAA8H,UAAAC,SACAyB,EAAAH,OAAAI,WAAAF,GACAG,EAAAL,OAAAI,WAAAR,EAAAzmB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAA8f,EAAAT,EAAAzmB,QAAAsF,IAAAmhB,GACA,MAAA9gB,EAAAkhB,OAAAO,cAAAJ,EAAAE,EAAAT,EAAAzmB,QACA,GAAA,IAAA2F,EACA,MAAAA,EAEA,MAAA0X,EAAA,IAAAlW,WAAA4f,GACA1J,EAAA/X,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAAD,IACA,OAAA1J,EACA,MAAA7b,GACAR,IAAA2D,EAAA6Y,KAAAhc,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,KASAnmB,qBAAAgmB,GACA,GAAAhd,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAAqW,KAAAgI,QAAAhI,KAAA8H,UAAAY,SACAQ,WAAAY,YAAA3P,EAAA,IAAAxQ,WAAAsf,IACA,OAAA9O,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAC,EAAAvJ,KAAAgI,QAAAhI,KAAA8H,UAAAY,QACAc,EAAAH,OAAAI,WAAAF,GACAG,EAAAL,OAAAI,WAAAR,EAAAzmB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAA8f,EAAAT,EAAAzmB,QAAAsF,IAAAmhB,GACAI,OAAAU,cAAAP,EAAAE,EAAAT,EAAAzmB,QACA,MAAAqd,EAAA,IAAAlW,WAAA4f,GACA1J,EAAA/X,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAAD,IACA,OAAA1J,EACA,MAAA7b,GACAR,IAAA2D,EAAA6Y,KAAAhc,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,KASAnmB,qBAAAgmB,GACA,GAAAhd,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAAqW,KAAAgI,QAAAhI,KAAA8H,UAAAc,SACAM,WAAAc,YAAA7P,EAAA,IAAAxQ,WAAAsf,IACA,OAAA9O,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAC,EAAAvJ,KAAAgI,QAAAhI,KAAA8H,UAAAc,QACAY,EAAAH,OAAAI,WAAAF,GACAG,EAAAL,OAAAI,WAAAR,EAAAzmB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAA8f,EAAAT,EAAAzmB,QAAAsF,IAAAmhB,GACAI,OAAAY,cAAAT,EAAAE,EAAAT,EAAAzmB,QACA,MAAAqd,EAAA,IAAAlW,WAAA4f,GACA1J,EAAA/X,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAAD,IACA,OAAA1J,EACA,MAAA7b,GACAR,IAAA2D,EAAA6Y,KAAAhc,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,MASApJ,KAAA8H,UAAA,CACAC,QAAA,EACAU,QAAA,EACAC,OAAA,EACAE,OAAA,GAKA5I,KAAA8I,KAAA,IAAAthB,IACAwY,KAAA8I,KAAAhhB,IAAAkY,KAAA8H,UAAAC,QAAA,IACA/H,KAAA8I,KAAAhhB,IAAAkY,KAAA8H,UAAAW,QAAA,IACAzI,KAAA8I,KAAAhhB,IAAAkY,KAAA8H,UAAAY,OAAA,IACA1I,KAAA8I,KAAAhhB,IAAAkY,KAAA8H,UAAAc,OAAA,IAEA5I,KAAAkK,KAAA,IAAAlK,KAAA,IAAArW,WAAA,KACA7G,MAAAM,SAAA4c,MC/SA,MAAAmK,mBAAAzC,aAKAzkB,YAAA2kB,GACAnZ,QACA,KAAAmZ,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAA2nB,WAAArB,KAAA,MAAA,IAAApe,MAAA,6BACApH,KAAA2kB,KAAAL,EAMA3kB,kBACA,MAAAmnB,EAAA,IAAAzgB,WAAAwgB,WAAArB,MACAR,aAAA+B,IAAA1hB,gBAAAyhB,GACA,OAAA,IAAAD,WAAAC,GAOAnnB,mBAAA8H,GACA,OAAA,IAAAof,WAAApf,EAAAwF,KAAA4Z,WAAArB,OAOA7lB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAIA8V,qBACA,OAAAsJ,WAAArB,KAOA7lB,UAAAmnB,GACA9mB,KAAA2kB,KAAAngB,IAAAsiB,EAAAnC,MAOAhlB,OAAAoe,GACA,OAAAA,aAAA8I,YAAA1b,MAAA8M,OAAA8F,GASApe,8BAAAmnB,EAAAE,EAAAC,GACA,GAAAH,EAAA3gB,aAAA0gB,WAAArB,MACAwB,EAAA7gB,aAAA+gB,UAAA1B,MACAyB,EAAA9gB,aAAAuW,KAAAgI,QAAAhI,KAAA8H,UAAAc,QACA,MAAAle,MAAA,sBAEA,GAAAuB,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAA6gB,UAAA1B,MACAI,WAAAuB,6CAAAtQ,EAAA,IAAAxQ,WAAA4gB,GAAA,IAAA5gB,WAAA2gB,GAAA,IAAA3gB,WAAAygB,IACA,OAAAjQ,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAE,EAAAH,OAAAI,WAAAe,UAAA1B,MACA4B,EAAArB,OAAAI,WAAAW,EAAA5nB,QACAmoB,EAAAtB,OAAAI,WAAAa,EAAA9nB,QACAooB,EAAAvB,OAAAI,WAAAc,EAAA/nB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAA8gB,EAAAN,EAAA5nB,QAAAsF,IAAAsiB,GACA,IAAAzgB,WAAA0f,OAAAM,OAAA/f,OAAA+gB,EAAAL,EAAA9nB,QAAAsF,IAAAwiB,GACA,IAAA3gB,WAAA0f,OAAAM,OAAA/f,OAAAghB,EAAAL,EAAA/nB,QAAAsF,IAAAyiB,GACAlB,OAAAwB,yCAAArB,EAAAoB,EAAAD,EAAAD,GACA,MAAAI,EAAA,IAAAnhB,WAAAwgB,WAAArB,MACAgC,EAAAhjB,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAAW,WAAArB,OACA,OAAAgC,EACA,MAAA9mB,GACAR,IAAA2D,EAAA4jB,iBAAA/mB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,MAMAe,WAAArB,KAAA,GAEAhmB,MAAAM,SAAA+mB,YCvGA,MAAAK,kBAAA9C,aAKAzkB,YAAAoe,GACA,OAAAA,EACA,IAAAmJ,UAAA,IAAA7gB,WAAA0X,EAAA4G,OADA5G,EAQApe,YAAA2kB,GACAnZ,QACA,KAAAmZ,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAAgoB,UAAA1B,KAAA,MAAA,IAAApe,MAAA,6BACApH,KAAA2kB,KAAAL,EAOA3kB,cAAAmnB,GACA,OAAA,IAAAI,UAAAA,UAAAQ,iBAAAZ,EAAAnC,OAOAhlB,WAAAgoB,IACAA,EAAAA,EAAAzkB,SACA0kB,KAAA,CAAAjd,EAAAC,IAAAD,EAAAsE,QAAArE,IACA,OAAAsc,UAAAW,mCAAAF,GAOAhoB,mBAAA8H,GACA,OAAA,IAAAyf,UAAAzf,EAAAwF,KAAAia,UAAA1B,OAOA7lB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAIA8V,qBACA,OAAA2J,UAAA1B,KAOA7lB,OAAAoe,GACA,OAAAA,aAAAmJ,WAAA/b,MAAA8M,OAAA8F,GAMApe,OACA,OAAA+c,KAAAC,MAAA3c,KAAAod,aAOAzd,QAAAoe,GACA,OAAA1W,YAAA4H,QAAAjP,KAAA2kB,KAAA5G,EAAA4G,MAMAhlB,YACA,OAAAmoB,QAAAC,SAAA/nB,KAAAuc,QAMA5c,WACA,OAAA,IAAAqoB,OAAAhoB,KAAAuc,OAAA/Q,SAAA,EAAA,KAOA7L,0CAAAgoB,GACA,MAAAM,EAAAN,EAAA7gB,IAAAL,GAAAA,EAAA2W,aACA6J,EAAAC,UAAAgB,gBAAAD,GACAE,EAAAjB,UAAAkB,mCAAAH,EAAAhB,GACA,OAAA,IAAAC,UAAAiB,GAOAxoB,wBAAAmnB,GACA,GAAAA,EAAA3gB,aAAA0gB,WAAArB,KACA,MAAApe,MAAA,sBAEA,GAAAuB,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAA6gB,UAAA1B,MACAI,WAAAyC,+BAAAxR,EAAA,IAAAxQ,WAAAygB,IACA,OAAAjQ,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAE,EAAAH,OAAAI,WAAAe,UAAA1B,MACA8C,EAAA,IAAAjiB,WAAA0f,OAAAwC,MAAAjiB,OAAA4f,EAAAW,WAAArB,MACA8C,EAAA9jB,IAAAsiB,GACA,MAAAV,EAAAL,OAAAI,WAAAW,EAAA5nB,QACAspB,EAAA,IAAAniB,WAAA0f,OAAAwC,MAAAjiB,OAAA8f,EAAAS,WAAArB,MACAgD,EAAAhkB,IAAAsiB,GAEAf,OAAA0C,2BAAAvC,EAAAE,GACAoC,EAAAE,KAAA,GACA,MAAA1B,EAAA,IAAA3gB,WAAA6gB,UAAA1B,MACAwB,EAAAxiB,IAAA8jB,GACA,OAAAtB,EACA,MAAAtmB,GACAR,IAAA2D,EAAAqjB,UAAAxmB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,KASAnmB,uBAAAgoB,GACA,GAAAA,EAAAhM,KAAAqL,GAAAA,EAAA7gB,aAAA+gB,UAAA1B,MACA,MAAApe,MAAA,sBAEA,MAAAuhB,EAAA,IAAAtiB,WAAAshB,EAAAzoB,OAAAgoB,UAAA1B,MACA,IAAA,IAAA9iB,EAAA,EAAAA,EAAAilB,EAAAzoB,SAAAwD,EACAimB,EAAAnkB,IAAAmjB,EAAAjlB,GAAAA,EAAAwkB,UAAA1B,MAEA,GAAA7c,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAAqW,KAAAgI,QAAAhI,KAAA8H,UAAAc,SACAM,WAAAgD,8BAAA/R,EAAA8R,EAAAhB,EAAAzoB,QACA,OAAA2X,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAC,EAAAvJ,KAAAgI,QAAAhI,KAAA8H,UAAAc,QACAY,EAAAH,OAAAI,WAAAF,GACA4C,EAAA9C,OAAAI,WAAAwC,EAAAzpB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAAuiB,EAAAF,EAAAzpB,QAAAsF,IAAAmkB,GACA5C,OAAA+C,0BAAA5C,EAAA2C,EAAAlB,EAAAzoB,QACA,MAAA6pB,EAAA,IAAA1iB,WAAA4f,GACA8C,EAAAvkB,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAAD,IACA,OAAA8C,EACA,MAAAroB,GACAR,IAAA2D,EAAAqjB,UAAAxmB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,KAUAnmB,6BAAAqnB,EAAAC,GACA,GAAAD,EAAA7gB,aAAA+gB,UAAA1B,MACAyB,EAAA9gB,aAAAuW,KAAAgI,QAAAhI,KAAA8H,UAAAc,QACA,MAAAle,MAAA,sBAEA,GAAAuB,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAA6gB,UAAA1B,MACAI,WAAAoD,oCAAAnS,EAAA,IAAAxQ,WAAA4gB,GAAA,IAAA5gB,WAAA2gB,IACA,OAAAnQ,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAE,EAAAH,OAAAI,WAAAe,UAAA1B,MACA6B,EAAAtB,OAAAI,WAAAa,EAAA9nB,QACAooB,EAAAvB,OAAAI,WAAAc,EAAA/nB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAA+gB,EAAAL,EAAA9nB,QAAAsF,IAAAwiB,GACA,IAAA3gB,WAAA0f,OAAAM,OAAA/f,OAAAghB,EAAAL,EAAA/nB,QAAAsF,IAAAyiB,GACAlB,OAAAkD,gCAAA/C,EAAAoB,EAAAD,GACA,MAAA6B,EAAA,IAAA7iB,WAAA6gB,UAAA1B,MACA0D,EAAA1kB,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAAgB,UAAA1B,OACA,OAAA0D,EACA,MAAAxoB,GACAR,IAAA2D,EAAAqjB,UAAAxmB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,KAUAnmB,0CAAAgoB,EAAAV,GACA,GAAAU,EAAAhM,KAAAqL,GAAAA,EAAA7gB,aAAA+gB,UAAA1B,OACAyB,EAAA9gB,aAAAuW,KAAAgI,QAAAhI,KAAA8H,UAAAc,QACA,MAAAle,MAAA,sBAEA,MAAAuhB,EAAA,IAAAtiB,WAAAshB,EAAAzoB,OAAAgoB,UAAA1B,MACA,IAAA,IAAA9iB,EAAA,EAAAA,EAAAilB,EAAAzoB,SAAAwD,EACAimB,EAAAnkB,IAAAmjB,EAAAjlB,GAAAA,EAAAwkB,UAAA1B,MAEA,GAAA7c,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAA6gB,UAAA1B,MACAI,WAAAuD,gDAAAtS,EAAA,IAAAxQ,WAAA4gB,GAAA0B,EAAAhB,EAAAzoB,QACA,OAAA2X,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAE,EAAAH,OAAAI,WAAAe,UAAA1B,MACAqD,EAAA9C,OAAAI,WAAAwC,EAAAzpB,QACAooB,EAAAvB,OAAAI,WAAAc,EAAA/nB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAAuiB,EAAAF,EAAAzpB,QAAAsF,IAAAmkB,GACA,IAAAtiB,WAAA0f,OAAAM,OAAA/f,OAAAghB,EAAAL,EAAA/nB,QAAAsF,IAAAyiB,GACAlB,OAAAqD,4CAAAlD,EAAAoB,EAAAuB,EAAAlB,EAAAzoB,QACA,MAAAmqB,EAAA,IAAAhjB,WAAA6gB,UAAA1B,MACA6D,EAAA7kB,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAAgB,UAAA1B,OACA,OAAA6D,EACA,MAAA3oB,GACAR,IAAA2D,EAAAqjB,UAAAxmB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,MAMAoB,UAAA1B,KAAA,GAEAhmB,MAAAM,SAAAonB,WCvQA,MAAAoC,gBAAAlF,aAQAzkB,YAAAmnB,EAAAE,EAAAuC,GAAA,EAAAC,EAAA,MACA,KAAA1C,aAAAtX,QAAA,MAAA,IAAApI,MAAA,2BACA,KAAA4f,aAAAxX,QAAA,MAAA,IAAApI,MAAA,2BACA+D,QAGAnL,KAAAypB,QAAAF,EAEAvpB,KAAA0pB,kBAAAH,EAEAvpB,KAAA2pB,UAAAH,EAEAxpB,KAAA4pB,WAAA5C,EAEAhnB,KAAA6pB,oBAAA,IAAAhD,WAAAC,EAAA1J,aAMAzd,kBACA,MAAAmnB,EAAAD,WAAAiD,WACA,OAAA,IAAAR,QAAAxC,EAAAI,UAAA6C,OAAAjD,IAOAnnB,cAAAmnB,GACA,OAAA,IAAAwC,QAAAxC,EAAAI,UAAA6C,OAAAjD,IAOAnnB,eAAAqqB,GACA,OAAAV,QAAA3L,YAAAtW,YAAAmX,QAAAwL,IASArqB,2BAAA8H,EAAA7C,GACA,MAAAqlB,QAAA7J,YAAA8J,cAAAziB,EAAA7C,GACA,OAAA0kB,QAAAS,OAAA,IAAAlD,WAAAoD,IAOAtqB,mBAAA8H,GACA,MAAAqf,EAAAD,WAAAlJ,YAAAlW,GACAuf,EAAAE,UAAAvJ,YAAAlW,GACA,IAAA8hB,GAAA,EACAC,EAAA,KACA,GAAA/hB,EAAAgE,QAAAhE,EAAAtB,WAAA,CAEA,GAAA,IADAsB,EAAA6E,YACA,CACAid,GAAA,EACAC,EAAA/hB,EAAAwF,KAAA,KAGA,OAAA,IAAAqc,QAAAxC,EAAAE,EAAAuC,EAAAC,GAOA7pB,UAAA8H,GACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,gBACAvd,KAAAmqB,YAAA/M,UAAA3V,GACAzH,KAAAgnB,UAAA5J,UAAA3V,GACA,GAAAzH,KAAAypB,QAAA,CACAhiB,EAAAiF,WAAA,GACAjF,EAAA4F,MAAArN,KAAA2pB,gBAEAliB,EAAAiF,WAAA,GAEA,OAAAjF,EAOAqf,iBACA,GAAA9mB,KAAAoqB,SAAA,MAAA,IAAAhjB,MAAA,oBACA,OAAApH,KAAAmqB,YAUAA,kBACA,OAAAnqB,KAAAqqB,qBAAArqB,KAAA6pB,oBAIA7C,gBACA,OAAAhnB,KAAA4pB,aAAA5pB,KAAA4pB,WAAA,IAAA1C,UAAAlnB,KAAA2kB,KAAAqC,YAIAzJ,qBACA,OAAAvd,KAAAmqB,YAAA5M,eAAAvd,KAAAgnB,UAAAzJ,gBAAAvd,KAAAypB,QAAAzpB,KAAA2pB,UAAAxjB,WAAA,EAAA,GAQAxG,sBAAAiF,EAAA0lB,GACA,MAAAC,EAAAvqB,KAAAypB,QACA,GAAAzpB,KAAAypB,QACA,UACAzpB,KAAAwqB,OAAAF,GAAA1lB,GACA,MAAAlE,GACA,MAAA,IAAA0G,MAAA,6CAIA,MAAAK,EAAA2Y,YAAAqK,cAAAzqB,KAAAmqB,YAAA/M,YAAAxY,GAEA2lB,GAAAvqB,KAAA0qB,SAEA,OAAAjjB,EAIAkjB,oBACA,OAAAvK,YAAAwK,gBAOAjrB,WAAAiF,EAAA4kB,GACA,GAAAxpB,KAAAypB,QAAA,MAAA,IAAAriB,MAAA,0BAEAoiB,IAAAxpB,KAAA2pB,UAAAH,GACA,IAAAxpB,KAAA2pB,WAAA,IAAA3pB,KAAA2pB,UAAAzqB,OAAA,CACAc,KAAA2pB,UAAA,IAAAtjB,WAAA,IACA2e,aAAA+B,IAAA1hB,gBAAArF,KAAA2pB,WAGA3pB,KAAA6pB,oBAAAgB,gBAAA7qB,KAAA8qB,eAAAlmB,IACA5E,KAAA+qB,2BACA/qB,KAAAypB,SAAA,EACAzpB,KAAA0pB,mBAAA,EAMA/pB,aAAAiF,GACA,IAAA5E,KAAAypB,QAAA,MAAA,IAAAriB,MAAA,sBAEA,MAAA0f,QAAA9mB,KAAA8qB,eAAAlmB,GAEA,IADAsiB,UAAA6C,OAAAjD,GACA7O,OAAAjY,KAAAgnB,WAKA,MAAA,IAAA5f,MAAA,eAHApH,KAAAqqB,oBAAAvD,EACA9mB,KAAAypB,SAAA,EASA9pB,SACA,GAAAK,KAAAypB,QAAA,MAAA,IAAAriB,MAAA,0BACA,IAAApH,KAAA0pB,kBAAA,MAAA,IAAAtiB,MAAA,4BACApH,KAAA+qB,2BACA/qB,KAAAypB,SAAA,EAGA9pB,2BAEA,GAAAK,KAAA0pB,oBAAA1pB,KAAAypB,QAAA,CAGAzpB,KAAAqqB,oBAAAQ,UAAAhE,WAAAlJ,YAAA,IAAAzU,aAAAlJ,KAAAqqB,oBAAA9M,kBAEAvd,KAAAqqB,oBAAA,MAQA1qB,qBAAAiF,GACA,OAAA,IAAAiiB,iBAAAzG,YAAA4K,OAAAhrB,KAAAmqB,YAAA/M,YAAAxY,EAAA5E,KAAA2pB,UAAAL,QAAA2B,kBAGAb,eACA,OAAApqB,KAAAypB,QAOA9pB,OAAAoe,GACA,OAAAA,aAAAuL,SAAAne,MAAA8M,OAAA8F,IAGAuL,QAAA2B,gBAAA,IAEAzrB,MAAAM,SAAAwpB,SCxOA,MAAA7K,gBAAA2F,aAKAzkB,YAAA2kB,GACAnZ,QACA,KAAAmZ,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAAuf,QAAA+G,KAAA,MAAA,IAAApe,MAAA,6BACApH,KAAA2kB,KAAAL,EAMA3kB,kBACA,MAAAwe,EAAA,IAAA9X,WAAAoY,QAAA+G,MACAR,aAAA+B,IAAA1hB,gBAAA8Y,GACA,OAAA,IAAAM,QAAAN,GAQAxe,qBAAAqgB,EAAApB,GACA,OAAAV,cAAAgN,6BAAAlrB,KAAAmrB,WAAAvM,GAAAoB,GAOArgB,WAAAif,GACA,OAAAV,cAAAkN,kBAAAprB,KAAA4e,GAOAjf,mBAAA8H,GACA,OAAA,IAAAgX,QAAAhX,EAAAwF,KAAAwR,QAAA+G,OAOA7lB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAIA8V,qBACA,OAAAkB,QAAA+G,KAOA7lB,UAAAwe,GACAne,KAAA2kB,KAAAngB,IAAA2Z,EAAAwG,MAOAhlB,OAAAoe,GACA,OAAAA,aAAAU,SAAAtT,MAAA8M,OAAA8F,IAIAU,QAAA+G,KAAA,GAEAhmB,MAAAM,SAAA2e,SChFA,MAAA+B,2BAAA4D,aAMAzkB,YAAAiF,EAAAymB,GACAlgB,QACA,KAAAvG,aAAAiiB,YAAA,MAAA,IAAAzf,MAAA,mCACA,KAAAikB,aAAAhlB,YAAA,MAAA,IAAAe,MAAA,yCACA,GAAAikB,EAAAnsB,SAAAshB,mBAAA8K,gBAAA,MAAA,IAAAlkB,MAAA,gDACApH,KAAAurB,KAAA3mB,EACA5E,KAAAwrB,WAAAH,EAOA1rB,yBAAA2gB,GACA,MAAAmL,EAAApkB,YAAA+F,UAAA,gBACAmP,EAAA6D,YAAAsL,kBAAAD,EAAAnL,GACA,OAAA,IAAAE,mBAAA,IAAAqG,WAAAtK,EAAArZ,MAAA,EAAA,KAAAqZ,EAAArZ,MAAA,KAOAvD,OAAAmf,GAEAA,EAAA,aAAAA,GAAA,YAEA,MAAA6M,EAAA,IAAAziB,aAAA,EAAA2d,WAAArB,KAAA,GACAmG,EAAAjf,WAAA,GACA1M,KAAAurB,KAAAnO,UAAAuO,GACAA,EAAA/e,YAAAkS,GAEA,MAAAvC,EAAA6D,YAAAsL,kBAAA1rB,KAAAwrB,WAAAG,GACA,OAAA,IAAAnL,mBAAA,IAAAqG,WAAAtK,EAAArZ,MAAA,EAAA,KAAAqZ,EAAArZ,MAAA,KAOAvD,mBAAA0c,GACA,GAAA,OAAAA,EAAA7R,MAAA,mBAAA,OAAA,EAGA,MAAAohB,EAAAvP,EAAAtS,MAAA,KACA,IAAA,IAAArH,EAAA,EAAAA,EAAAkpB,EAAA1sB,OAAAwD,IACA,IAAA0J,YAAAyf,SAAApoB,SAAAmoB,EAAAlpB,KAAA,OAAA,EAGA,OAAA,EAOA/C,WAAA0c,GACA,IAAAmE,mBAAAsL,YAAAzP,GAAA,MAAA,IAAAjV,MAAA,gBAEA,IAAA2kB,EAAA/rB,KACA,MAAA4rB,EAAAvP,EAAAtS,MAAA,KACA,IAAA,IAAArH,EAAA,EAAAA,EAAAkpB,EAAA1sB,OAAAwD,IAAA,CACA,MAAAoc,EAAArb,SAAAmoB,EAAAlpB,IACAqpB,EAAAA,EAAAhC,OAAAjL,GAEA,OAAAiN,EAQApsB,0BAAA0c,EAAAiE,GAEA,OADAE,mBAAAC,kBAAAH,GACA0L,WAAA3P,GAOA1c,mBAAA8H,GACA,MAAAqf,EAAAD,WAAAlJ,YAAAlW,GACA4jB,EAAA5jB,EAAAwF,KAAAuT,mBAAA8K,iBACA,OAAA,IAAA9K,mBAAAsG,EAAAuE,GAOA1rB,UAAA8H,GACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,gBACAvd,KAAAurB,KAAAnO,UAAA3V,GACAA,EAAA4F,MAAArN,KAAAwrB,YACA,OAAA/jB,EAIA8V,qBACA,OAAAvd,KAAAurB,KAAAhO,eAAAiD,mBAAA8K,gBAOA3rB,OAAAoe,GACA,OAAAA,aAAAyC,oBAAArV,MAAA8M,OAAA8F,GAMA+I,iBACA,OAAA9mB,KAAAurB,KAMA5rB,YACA,OAAAunB,UAAA6C,OAAA/pB,KAAAurB,MAAAU,aAIAzL,mBAAA8K,gBAAA,GAEA9rB,MAAAM,SAAA0gB,oBCvIA,MAAA0L,qBAAA9H,aAKAzkB,YAAA2kB,GACAnZ,QACA,KAAAmZ,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAAgtB,aAAA1G,KAAA,MAAA,IAAApe,MAAA,6BACApH,KAAA2kB,KAAAL,EAOA3kB,mBAAA8H,GACA,OAAA,IAAAykB,aAAAzkB,EAAAwF,KAAAif,aAAA1G,OAOA7lB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAIA8V,qBACA,OAAA2O,aAAA1G,KAOA7lB,OAAAoe,GACA,OAAAA,aAAAmO,cAAA/gB,MAAA8M,OAAA8F,IAIAmO,aAAA1G,KAAA,GAEAhmB,MAAAM,SAAAosB,cC9CA,MAAAC,kBAAA/H,aAKAzkB,YAAAoe,GACA,IAAAA,EAAA,OAAAA,EAEA,MAAAxO,EAAA,IAAAlJ,WAAA0X,EAAA4G,MACA,OAAA,IAAAwH,UAAA5c,GAOA5P,YAAA2kB,GACAnZ,QACA,KAAAmZ,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAAitB,UAAA3G,KAAA,MAAA,IAAApe,MAAA,6BACApH,KAAA2kB,KAAAL,EASA3kB,cAAAmnB,EAAAE,EAAA2E,GACA,OAAA,IAAAQ,UAAAA,UAAAC,iBAAAtF,EAAAnC,KAAAqC,EAAArC,KAAAgH,IAQAhsB,6BAAA0sB,EAAAC,GACA,MAAAnE,EAAAgE,UAAAI,0BAAAF,EAAAjP,YAAAkP,EAAAxlB,IAAAgI,GAAAA,EAAAsO,cACA,OAAA,IAAA+O,UAAAhE,GAOAxoB,mBAAA8H,GACA,OAAA,IAAA0kB,UAAA1kB,EAAAwF,KAAAkf,UAAA3G,OAOA7lB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAIA8V,qBACA,OAAA4O,UAAA3G,KAQA7lB,OAAAqnB,EAAA2E,GACA,OAAAQ,UAAAK,iBAAAxF,EAAArC,KAAAgH,EAAA3rB,KAAA2kB,MAOAhlB,OAAAoe,GACA,OAAAA,aAAAoO,WAAAhhB,MAAA8M,OAAA8F,GAQApe,iCAAA8sB,EAAAC,GACA,MAAAC,EAAAR,UAAAS,4BAAAF,GACA,OAAArlB,YAAA8V,kBAAAsP,EAAAE,GAOAhtB,mCAAA+sB,GACA,OAAAA,EAAA7O,OAAA,CAAAgP,EAAAC,IAAAX,UAAAY,YAAAF,EAAAC,IAQAntB,mBAAAgL,EAAAC,GACA,GAAAD,EAAAxE,aAAA6mB,iBAAAxH,MAAA5a,EAAAzE,aAAA6mB,iBAAAxH,KACA,MAAApe,MAAA,sBAEA,GAAAuB,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAA2mB,iBAAAxH,MACAI,WAAAqH,yBAAApW,EAAA,IAAAxQ,WAAAsE,GAAA,IAAAtE,WAAAuE,IACA,OAAAiM,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAkH,EAAAnH,OAAAI,WAAA6G,iBAAAxH,MACA2H,EAAApH,OAAAI,WAAAxb,EAAAzL,QACAkuB,EAAArH,OAAAI,WAAAvb,EAAA1L,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAA6mB,EAAAxiB,EAAAzL,QAAAsF,IAAAmG,GACA,IAAAtE,WAAA0f,OAAAM,OAAA/f,OAAA8mB,EAAAxiB,EAAA1L,QAAAsF,IAAAoG,GACAmb,OAAAsH,qBAAAH,EAAAC,EAAAC,GACA,MAAAtP,EAAA,IAAAzX,WAAA2mB,iBAAAxH,MACA1H,EAAAtZ,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4mB,EAAAF,iBAAAxH,OACA,OAAA1H,EACA,MAAApd,GACAR,IAAA2D,EAAAsoB,UAAAzrB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,KAWAnmB,wBAAAmnB,EAAAE,EAAAlkB,GACA,GAAAkkB,EAAA7gB,aAAA+gB,UAAA1B,MACAsB,EAAA3gB,aAAA0gB,WAAArB,KACA,MAAApe,MAAA,sBAEA,GAAAuB,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAA8lB,UAAA3G,MACAI,WAAA0H,kBAAAzW,EAAA,IAAAxQ,WAAAvD,GAAA,IAAAuD,WAAA2gB,GAAA,IAAA3gB,WAAAygB,IACA,OAAAjQ,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAuH,EAAAxH,OAAAI,WAAAgG,UAAA3G,MACAgI,EAAA,IAAAnnB,WAAA0f,OAAAwC,MAAAjiB,OAAAinB,EAAApB,UAAA3G,MACAiI,EAAA1H,OAAAI,WAAArjB,EAAA5D,QACA,IAAAmH,WAAA0f,OAAAwC,MAAAjiB,OAAAmnB,EAAA3qB,EAAA5D,QAAAsF,IAAA1B,GACA,MAAA4qB,EAAA3H,OAAAI,WAAAa,EAAA9nB,QACA,IAAAmH,WAAA0f,OAAAwC,MAAAjiB,OAAAonB,EAAA1G,EAAA9nB,QAAAsF,IAAAwiB,GACA,MAAA2G,EAAA5H,OAAAI,WAAAW,EAAA5nB,QACAspB,EAAA,IAAAniB,WAAA0f,OAAAwC,MAAAjiB,OAAAqnB,EAAA7G,EAAA5nB,QACAspB,EAAAhkB,IAAAsiB,GAEAf,OAAA6H,cAAAL,EAAAE,EAAA3qB,EAAAqD,WAAAunB,EAAAC,GACAnF,EAAAE,KAAA,GAEA,MAAAmF,EAAA,IAAAxnB,WAAA8lB,UAAA3G,MACAqI,EAAArpB,IAAAgpB,GACA,OAAAK,EACA,MAAAntB,GACAR,IAAA2D,EAAAsoB,UAAAzrB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,KAWAnmB,wBAAAqnB,EAAAlkB,EAAA+qB,GACA,GAAAllB,cAAAC,WACA,QAAAgd,WAAAkI,oBAAA,IAAAznB,WAAAwnB,GAAA,IAAAxnB,WAAAvD,GAAA,IAAAuD,WAAA2gB,IACA,CACA,IAAAlB,EACA,IACAA,EAAAC,OAAAC,YACA,MAAA0H,EAAA3H,OAAAI,WAAAa,EAAA9nB,QACA,IAAAmH,WAAA0f,OAAAwC,MAAAjiB,OAAAonB,EAAA1G,EAAA9nB,QAAAsF,IAAAwiB,GACA,MAAAyG,EAAA1H,OAAAI,WAAArjB,EAAA5D,QACA,IAAAmH,WAAA0f,OAAAwC,MAAAjiB,OAAAmnB,EAAA3qB,EAAA5D,QAAAsF,IAAA1B,GACA,MAAAirB,EAAAhI,OAAAI,WAAA0H,EAAA3uB,QACA,IAAAmH,WAAA0f,OAAAwC,MAAAjiB,OAAAynB,EAAAF,EAAA3uB,QAAAsF,IAAAqpB,GAEA,QAAA9H,OAAAiI,gBAAAD,EAAAN,EAAA3qB,EAAAqD,WAAAunB,GACA,MAAAhtB,GACAR,IAAA2D,EAAAsoB,UAAAzrB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,MAMAqG,UAAA3G,KAAA,GAEAhmB,MAAAM,SAAAqsB,WCrNA,MAAA8B,mBAAA7J,aAKAzkB,YAAAoe,GACA,OAAAA,EACA,IAAAkQ,WAAA,IAAA5nB,WAAA0X,EAAA4G,OADA5G,EAQApe,WAAAuuB,GACA,OAAA,IAAAD,WAAAA,WAAAE,sBAAAD,EAAApnB,IAAAxG,GAAAA,EAAAqkB,QAOAhlB,YAAA2kB,GACAnZ,QACA,KAAAmZ,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAA+uB,WAAAzI,KAAA,MAAA,IAAApe,MAAA,6BACApH,KAAA2kB,KAAAL,EAOA3kB,mBAAA8H,GACA,OAAA,IAAAwmB,WAAAxmB,EAAAwF,KAAAghB,WAAAzI,OAOA7lB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAIA8V,qBACA,OAAA0Q,WAAAzI,KAOA7lB,OAAAoe,GACA,OAAAA,aAAAkQ,YAAA9iB,MAAA8M,OAAA8F,GAOApe,6BAAAuuB,GACA,GAAAA,EAAAvS,KAAA0Q,GAAAA,EAAAlmB,aAAA+gB,UAAA1B,MACA,MAAApe,MAAA,sBAEA,MAAAgnB,EAAA,IAAA/nB,WAAA6nB,EAAAhvB,OAAAgoB,UAAA1B,MACA,IAAA,IAAA9iB,EAAA,EAAAA,EAAAwrB,EAAAhvB,SAAAwD,EACA0rB,EAAA5pB,IAAA0pB,EAAAxrB,GAAAA,EAAAwkB,UAAA1B,MAEA,GAAA7c,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAA6gB,UAAA1B,MACAI,WAAAyI,mCAAAxX,EAAAuX,EAAAF,EAAAhvB,QACA,OAAA2X,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAE,EAAAH,OAAAI,WAAAe,UAAA1B,MACA8I,EAAAvI,OAAAI,WAAAiI,EAAAlvB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAAgoB,EAAAF,EAAAlvB,QAAAsF,IAAA4pB,GACArI,OAAAwI,+BAAArI,EAAAoI,EAAAJ,EAAAhvB,QACA,MAAAsvB,EAAA,IAAAnoB,WAAA6gB,UAAA1B,MACAgJ,EAAAhqB,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAAgB,UAAA1B,OACA,OAAAgJ,EACA,MAAA9tB,GACAR,IAAA2D,EAAA4jB,iBAAA/mB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,MAMAmI,WAAAzI,KAAA,GAEAhmB,MAAAM,SAAAmuB,YCnGA,MAAAQ,uBAAArK,aAMAzkB,YAAA+uB,EAAArC,GACAlhB,QACA,KAAAujB,aAAAxC,cAAA,MAAA,IAAA9kB,MAAA,2BACA,KAAAilB,aAAA4B,YAAA,MAAA,IAAA7mB,MAAA,2BACApH,KAAA2uB,QAAAD,EACA1uB,KAAA4uB,YAAAvC,EAMA1sB,kBACA,MAAAkvB,EAAA,IAAAxoB,WAAAooB,eAAAK,iBACA9J,aAAA+B,IAAA1hB,gBAAAwpB,GACA,MAAA1G,EAAAsG,eAAAM,kBAAAF,GACA,OAAA,IAAAJ,eAAA,IAAAvC,aAAA/D,EAAAuG,QAAA,IAAAT,WAAA9F,EAAAkE,aAOA1sB,mBAAA8H,GACA,MAAAinB,EAAAxC,aAAAvO,YAAAlW,GACA4kB,EAAA4B,WAAAtQ,YAAAlW,GACA,OAAA,IAAAgnB,eAAAC,EAAArC,GAOA1sB,eAAAqqB,GACA,OAAAhqB,KAAA2d,YAAAtW,YAAAmX,QAAAwL,IAOArqB,UAAA8H,GACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,gBACAvd,KAAA0uB,OAAAtR,UAAA3V,GACAzH,KAAAqsB,WAAAjP,UAAA3V,GACA,OAAAA,EAIAinB,aACA,OAAA1uB,KAAA2uB,QAIAtC,iBACA,OAAArsB,KAAA4uB,YAIArR,qBACA,OAAAvd,KAAA0uB,OAAAnR,eAAAvd,KAAAqsB,WAAA9O,eAOA5d,OAAAoe,GACA,OAAAA,aAAA0Q,gBAAAtjB,MAAA8M,OAAA8F,GAOApe,yBAAAkvB,GACA,GAAAlmB,cAAAC,WAAA,CACA,MAAAyjB,EAAA,IAAAhmB,WAAA6gB,UAAA1B,MACAkJ,EAAA,IAAAroB,WAAAwgB,WAAArB,MACAI,WAAAoJ,+BAAAN,EAAArC,EAAAwC,GACA,MAAA,CAAAxC,WAAAA,EAAAqC,OAAAA,GACA,CACA,IAAA5I,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAiJ,EAAAlJ,OAAAI,WAAAe,UAAA1B,MACA0J,EAAAnJ,OAAAI,WAAAU,WAAArB,MACAY,EAAAL,OAAAI,WAAA0I,EAAA3vB,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAA8f,EAAAyI,EAAA3vB,QAAAsF,IAAAqqB,GACA,MAAAhqB,EAAAkhB,OAAAoJ,2BAAAD,EAAAD,EAAA7I,GACA,GAAA,IAAAvhB,EACA,MAAA,IAAAuC,oCAAAvC,KAEA,MAAAwnB,EAAA,IAAAhmB,WAAA6gB,UAAA1B,MACAkJ,EAAA,IAAAroB,WAAAwgB,WAAArB,MACA6G,EAAA7nB,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA2oB,EAAA/H,UAAA1B,OACAkJ,EAAAlqB,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4oB,EAAArI,WAAArB,OACA,MAAA,CAAA6G,WAAAA,EAAAqC,OAAAA,GACA,MAAAhuB,GACAR,IAAA2D,EAAA4qB,eAAA/tB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,MAMA2I,eAAAW,gBAAAlD,aAAA1G,KAAA2G,UAAA3G,KACAiJ,eAAAK,gBAAA,GAEAtvB,MAAAM,SAAA2uB,gBCpHA,MAAAzB,yBAAA5I,aAKAzkB,YAAA2kB,GACAnZ,QACA,KAAAmZ,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAA8tB,iBAAAxH,KAAA,MAAA,IAAApe,MAAA,6BACApH,KAAA2kB,KAAAL,EAYA3kB,cAAAmnB,EAAAE,EAAAW,EAAA+G,EAAAW,EAAA1D,GACA,MAAAxD,EAAA6E,iBAAAsC,oCAAA3H,EAAA7gB,IAAAiX,GAAAA,EAAA4G,MAAAmC,EAAAnC,KACAqC,EAAArC,KAAA+J,EAAA/J,KAAA0K,EAAA1K,KAAAgH,GACA,OAAA,IAAAqB,iBAAA7E,GAOAxoB,mBAAA8H,GACA,OAAA,IAAAulB,iBAAAvlB,EAAAwF,KAAA+f,iBAAAxH,OAOA7lB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAIA8V,qBACA,OAAAyP,iBAAAxH,KAOA7lB,OAAAoe,GACA,OAAAA,aAAAiP,kBAAA7hB,MAAA8M,OAAA8F,GAYApe,2CAAAgoB,EAAAb,EAAAE,EAAA0H,EAAAW,EAAAvsB,GACA,GAAA6kB,EAAAhM,KAAAqL,GAAAA,EAAA7gB,aAAA+gB,UAAA1B,OACAsB,EAAA3gB,aAAA0gB,WAAArB,MACAwB,EAAA7gB,aAAA+gB,UAAA1B,MACAkJ,EAAAvoB,aAAA+lB,aAAA1G,MACA6J,EAAAlpB,aAAA8nB,WAAAzI,KACA,MAAApe,MAAA,sBAEA,MAAAuhB,EAAA,IAAAtiB,WAAAshB,EAAAzoB,OAAAgoB,UAAA1B,MACA,IAAA,IAAA9iB,EAAA,EAAAA,EAAAilB,EAAAzoB,SAAAwD,EACAimB,EAAAnkB,IAAAmjB,EAAAjlB,GAAAA,EAAAwkB,UAAA1B,MAEA,GAAA7c,cAAAC,WAAA,CACA,MAAAiO,EAAA,IAAAxQ,WAAA2mB,iBAAAxH,MACAI,WAAA2J,uCAAA1Y,EAAA,IAAAxQ,WAAAvD,GAAA,IAAAuD,WAAAgpB,GAAA,IAAAhpB,WAAAqoB,GAAA,IAAAroB,WAAAsiB,GAAAhB,EAAAzoB,OAAA,IAAAmH,WAAA2gB,GAAA,IAAA3gB,WAAAygB,IACA,OAAAjQ,EACA,CACA,IAAAiP,EACA,IACAA,EAAAC,OAAAC,YACA,MAAAE,EAAAH,OAAAI,WAAA6G,iBAAAxH,MACAqD,EAAA9C,OAAAI,WAAAwC,EAAAzpB,QACAkoB,EAAArB,OAAAI,WAAAW,EAAA5nB,QACAmoB,EAAAtB,OAAAI,WAAAa,EAAA9nB,QACAswB,EAAAzJ,OAAAI,WAAAuI,EAAAxvB,QACAuwB,EAAA1J,OAAAI,WAAAkJ,EAAAnwB,QACAuuB,EAAA1H,OAAAI,WAAArjB,EAAA5D,QACA,IAAAmH,WAAA0f,OAAAM,OAAA/f,OAAAuiB,EAAAF,EAAAzpB,QAAAsF,IAAAmkB,GACA,IAAAtiB,WAAA0f,OAAAM,OAAA/f,OAAA8gB,EAAAN,EAAA5nB,QAAAsF,IAAAsiB,GACA,IAAAzgB,WAAA0f,OAAAM,OAAA/f,OAAA+gB,EAAAL,EAAA9nB,QAAAsF,IAAAwiB,GACA,IAAA3gB,WAAA0f,OAAAM,OAAA/f,OAAAkpB,EAAAd,EAAAxvB,QAAAsF,IAAAkqB,GACA,IAAAroB,WAAA0f,OAAAM,OAAA/f,OAAAmpB,EAAAJ,EAAAnwB,QAAAsF,IAAA6qB,GACA,IAAAhpB,WAAA0f,OAAAM,OAAA/f,OAAAmnB,EAAA3qB,EAAA5D,QAAAsF,IAAA1B,GACAijB,OAAA2J,mCAAAxJ,EAAAuH,EAAA3qB,EAAA5D,OAAAuwB,EAAAD,EAAA3G,EAAAlB,EAAAzoB,OAAAmoB,EAAAD,GACA,MAAAuI,EAAA,IAAAtpB,WAAA2mB,iBAAAxH,MACAmK,EAAAnrB,IAAA,IAAA6B,WAAA0f,OAAAM,OAAA/f,OAAA4f,EAAA8G,iBAAAxH,OACA,OAAAmK,EACA,MAAAjvB,GACAR,IAAA2D,EAAA4jB,iBAAA/mB,GACA,MAAAA,EACA,QACAolB,IAAA1iB,WAAA2iB,OAAAQ,aAAAT,MAMAkH,iBAAAxH,KAAA,GACAhmB,MAAAM,SAAAktB,kBCnHA,MAAAlF,gBAAA1D,aAKAzkB,YAAAoe,GACA,IAAAA,EAAA,OAAAA,EACA,MAAAxO,EAAA,IAAAlJ,WAAA0X,EAAA4G,MACA,OAAA,IAAAmD,QAAAvY,GAOA5P,gBAAA4c,GACA,OAAA,IAAAuL,QAAAvL,EAAA/Q,SAAA,EAAAsc,QAAAsH,kBAGAzvB,YAAA2kB,GACAnZ,QACA,KAAAmZ,aAAAje,YAAA,MAAA,IAAAe,MAAA,2BACA,GAAAkd,EAAAplB,SAAA4oB,QAAAsH,gBAAA,MAAA,IAAAhoB,MAAA,6BACApH,KAAA2kB,KAAAL,EAQA3kB,mBAAA8H,GACA,OAAA,IAAAqgB,QAAArgB,EAAAwF,KAAA6a,QAAAsH,kBAQAzvB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACAlQ,MAAArN,KAAA2kB,MACA,OAAAld,EAGA9H,SAAAmG,EAAAC,GACA,OAAA/F,KAAA2kB,KAAAnZ,SAAA1F,EAAAC,GAMAwX,qBACA,OAAAuK,QAAAsH,gBAOAzvB,OAAAoe,GACA,OAAAA,aAAA+J,SACA3c,MAAA8M,OAAA8F,GAGApe,kBAAAgQ,GACA,IACA,OAAAmY,QAAA8H,wBAAAjgB,GACA,MAAAjP,IAIA,IACA,OAAAonB,QAAAtJ,QAAA7O,GACA,MAAAjP,IAIA,IACA,OAAAonB,QAAArC,WAAA9V,GACA,MAAAjP,IAIA,MAAA,IAAA0G,MAAA,0BAOAzH,kBAAAsJ,GACA,OAAA,IAAA6e,QAAAzgB,YAAAoe,WAAAxc,IAOAtJ,eAAAuK,GACA,OAAA,IAAA4d,QAAAzgB,YAAAmX,QAAAtU,IAOAvK,+BAAAgQ,GAEA,IADAA,EAAAA,EAAA5H,QAAA,KAAA,KACAvG,OAAA,EAAA,GAAAsI,gBAAAge,QAAA+H,MACA,MAAA,IAAAzoB,MAAA,uCAEA,GAAA,KAAAuI,EAAAzQ,OACA,MAAA,IAAAkI,MAAA,yDAEA,GAAA,IAAA0gB,QAAAgI,WAAAngB,EAAAnO,OAAA,GAAAmO,EAAAnO,OAAA,EAAA,IACA,MAAA,IAAA4F,MAAA,qCAEA,OAAA,IAAA0gB,QAAAzgB,YAAA0oB,WAAApgB,EAAAnO,OAAA,KAGA7B,kBAAAgQ,GACA,MAAA3H,EAAA2H,EAAA5F,MAAA,IAAAjD,IAAAxG,IACA,MAAA6J,EAAA7J,EAAAwJ,cAAApC,WAAA,GACA,OAAAyC,GAAA,IAAAA,GAAA,GAAA7J,GAAA6J,EAAA,IAAAxH,aACA2F,KAAA,IACA,IAAAH,EAAA,GAEA,IAAA,IAAAzF,EAAA,EAAAA,EAAAgD,KAAAwI,KAAAlG,EAAA9I,OAAA,GAAAwD,IACAyF,GAAA1E,SAAA0E,EAAAH,EAAAxG,OAAA,EAAAkB,EAAA,IAAA,IAAAC,WAGA,OAAAc,SAAA0E,GAOAxI,sBAAAqwB,GAAA,GACA,MAAApmB,EAAAvC,YAAA4oB,SAAAjwB,KAAAod,aAEA8S,GAAA,MAAA,GAAApI,QAAAgI,WAAAlmB,EAAAke,QAAA+H,MAAA,QAAA3sB,OAAA,GACA,IAAA2B,EAAAijB,QAAA+H,MAAAK,EAAAtmB,EACAomB,IAAAnrB,EAAAA,EAAAkD,QAAA,QAAA,OAAAsC,QACA,OAAAxF,GAGAijB,QAAA+H,MAAA,KACA/H,QAAAsH,gBAAA,GACAtH,QAAAqI,SAAA,GACArI,QAAAlB,KAAA,IAAAkB,QAAA,IAAAzhB,WAAAyhB,QAAAsH,kBACAtH,QAAAsI,kBAAA,IAAAtI,QAAA,IAAAzhB,WAAAyhB,QAAAsH,kBACA5vB,MAAAM,SAAAgoB,SCvJA,MAAAuI,QAKA1wB,YAAAyE,EAAAksB,GACA,IAAAlkB,YAAAoB,QAAApJ,GAAA,MAAA,IAAAgD,MAAA,kBACA,IAAAgF,YAAAC,SAAAikB,GAAA,MAAA,IAAAlpB,MAAA,qBAGApH,KAAAuwB,MAAAnsB,EAEApE,KAAAwwB,SAAAF,EAQA3wB,mBAAA8H,GACA,MAAArD,EAAAqD,EAAA6E,YACA7E,EAAAgE,UAEA,IAAA4kB,QAAAI,SAAAnsB,IAAAF,GACA,MAAA,IAAAgD,MAAA,wBAGA,OAAAipB,QAAAI,SAAAjuB,IAAA4B,GAAAuZ,YAAAlW,GAQA9H,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACA7Q,WAAA1M,KAAAuwB,OACA9oB,EAAAoF,YAAA7M,KAAAwwB,UACA,OAAA/oB,EAMA8V,qBACA,OAAA,EASA5d,OAAAoe,GACA,OAAA1W,YAAA4Q,OAAAjY,KAAAod,YAAAW,EAAAX,aAGAzd,WACA,sBAAAK,KAAAuwB,kBAAAvwB,KAAAwwB,SAAA7tB,aAMA2tB,cACA,OAAAtwB,KAAAwwB,SAIApsB,WACA,OAAApE,KAAAuwB,MAOA5wB,YAAA2wB,GAAA,MAAA,IAAAlpB,MAAA,wBASAzH,wBAAA+wB,EAAArO,EAAAsO,EAAAC,GAAA,GACA,GAAAA,EAaA,CACA,GAAAvO,EAAAqO,EAAAG,qBACAxO,GAAAqO,EAAAG,oBAAA5O,OAAA6B,4BACA,MAAA,IAAA1c,MAAA,mBAEA,OAAApH,KAAA8wB,YAAA9wB,KAAAwwB,SAAAE,EAAAhlB,MAAAglB,EAAAK,KAlBA,CACA,MAAAC,EAAAhxB,KAAAwwB,SAAAE,EAAAhlB,MAAAglB,EAAAK,IACA,GAAAC,EAAA,EACA,MAAA,IAAA5pB,MAAA,kBAEA,GAAAib,EAAAqO,EAAAG,qBACAxO,GAAAqO,EAAAG,oBAAA5O,OAAA6B,4BACA,MAAA,IAAA1c,MAAA,mBAEA,GAAAupB,EAAAM,oBAAAP,GACA,MAAA,IAAAtpB,MAAA,6BAEA,OAAApH,KAAA8wB,YAAAE,IAgBArxB,wBAAA+wB,EAAArO,EAAAuO,GAAA,GACA,GAAAA,EAEA,CACA,MAAAI,EAAAhxB,KAAAwwB,SAAAE,EAAAhlB,MACA,GAAAslB,EAAA,EACA,MAAA,IAAA5pB,MAAA,kBAEA,OAAApH,KAAA8wB,YAAAE,GANA,OAAAhxB,KAAA8wB,YAAA9wB,KAAAwwB,SAAAE,EAAAhlB,OAgBA/L,oBAAA+wB,EAAArO,EAAAuO,GAAA,GACA,MAAA,IAAAxpB,MAAA,uBAMAzH,YACA,OAAAK,OAAAqwB,QAAAa,QAMAvxB,eACA,OAAA,IAAAK,KAAAwwB,WAAAxwB,KAAAmxB,aASAd,QAAAe,KAAA,CAKAC,MAAA,EAKAC,QAAA,EAKAC,KAAA,GAKAlB,QAAAI,SAAA,IAAAvsB,IAEA1E,MAAAM,SAAAuwB,SCtLA,MAAAmB,YAeA7xB,YAAAuW,EAAAub,EAAAC,EAAAC,EAAAC,EAAAlmB,EAAAqlB,EAAAF,EAAAgB,EAAAlG,EAAAmG,EAAAC,EAAAC,cAAAC,YACA,KAAAR,aAAA3J,SAAA,MAAA,IAAA1gB,MAAA,oBACA,IAAAgF,YAAAoB,QAAAkkB,GAAA,MAAA,IAAAtqB,MAAA,yBACA,KAAAuqB,aAAA7J,SAAA,MAAA,IAAA1gB,MAAA,uBACA,IAAAgF,YAAAoB,QAAAokB,GAAA,MAAA,IAAAxqB,MAAA,4BACA,IAAAgF,YAAAC,SAAAX,IAAA,IAAAA,EAAA,MAAA,IAAAtE,MAAA,mBACA,IAAAgF,YAAAC,SAAA0kB,GAAA,MAAA,IAAA3pB,MAAA,iBACA,IAAAgF,YAAAyf,SAAAgF,GAAA,MAAA,IAAAzpB,MAAA,iCACA,IAAAgF,YAAAoB,QAAAqkB,KAAAA,GAAAL,YAAAU,KAAA,KAAA,EAAA,MAAA,IAAA9qB,MAAA,mBACA,KAAAukB,aAAAtlB,YAAA+F,YAAA+lB,SAAAxG,EAAAxlB,aAAA,MAAA,IAAAiB,MAAA,kBACA,GAAA0qB,MAAAA,aAAAzrB,cAAA+F,YAAA+lB,SAAAL,EAAA3rB,aAAA,MAAA,IAAAiB,MAAA,mBACA,IAAAgF,YAAAoB,QAAAukB,GAAA,MAAA,IAAA3qB,MAAA,uBAGApH,KAAAoyB,QAAAlc,EAEAlW,KAAAqyB,QAAAZ,EAEAzxB,KAAAsyB,YAAAZ,EAEA1xB,KAAAuyB,WAAAZ,EAEA3xB,KAAAwyB,eAAAZ,EAEA5xB,KAAAyyB,OAAA/mB,EAEA1L,KAAA0yB,KAAA3B,EAEA/wB,KAAA2yB,WAAAZ,EAEA/xB,KAAA4yB,qBAAA/B,EAEA7wB,KAAA6yB,OAAAhB,EAEA7xB,KAAA8yB,MAAAnH,EAEA3rB,KAAA+yB,OAAAjB,EAEA9xB,KAAAuyB,aAAAzK,QAAAsI,oBAAApwB,KAAAuyB,WAAAvyB,KAAAgzB,8BAOArzB,mBAAA8H,GACA,MAAAyO,EAAAzO,EAAA6E,YACA7E,EAAAgE,UAEA,IAAA+lB,YAAAyB,WAAA3uB,IAAA4R,GAAA,MAAA,IAAA9O,MAAA,4BACA,OAAAoqB,YAAAyB,WAAAzwB,IAAA0T,GAAAyH,YAAAlW,GAOA9H,iBAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAkzB,wBACAvmB,YAAA3M,KAAA8yB,MAAA3sB,YACAsB,EAAA4F,MAAArN,KAAA8yB,OACA9yB,KAAAqyB,QAAAjV,UAAA3V,GACAA,EAAAiF,WAAA1M,KAAAsyB,aACAtyB,KAAAuyB,WAAAnV,UAAA3V,GACAA,EAAAiF,WAAA1M,KAAAwyB,gBACA/qB,EAAAoF,YAAA7M,KAAAyyB,QACAhrB,EAAAoF,YAAA7M,KAAA0yB,MACAjrB,EAAAmF,YAAA5M,KAAA4yB,sBACAnrB,EAAAiF,WAAA1M,KAAA2yB,YACAlrB,EAAAiF,WAAA1M,KAAA6yB,QACA,OAAAprB,EAIAyrB,4BACA,OAAA,EACAlzB,KAAA8yB,MAAA3sB,WACAnG,KAAAqyB,QAAA9U,eACA,EACAvd,KAAAuyB,WAAAhV,eACA,EACA,EACA,EACA,EACA,EACA,EAOA5d,OAAAoyB,GACA/xB,KAAAmzB,SAAA/vB,YACApD,KAAAmzB,OAAAnzB,KAAAozB,QAAArB,IAEA,OAAA/xB,KAAAmzB,OAQAxzB,QAAAoyB,EAAAC,cAAAC,YACA,GAAAjyB,KAAA2yB,aAAAZ,EAAA,CACA7xB,IAAA2D,EAAA2tB,YAAA,2CAAAxxB,MACA,OAAA,EAGA,GAAAA,KAAAuyB,WAAAta,OAAAjY,KAAAqyB,SAAA,CACAnyB,IAAA2D,EAAA2tB,YAAA,sCAAAxxB,MACA,OAAA,EAEA,IAAAqwB,QAAAI,SAAAnsB,IAAAtE,KAAAsyB,eAAAjC,QAAAI,SAAAnsB,IAAAtE,KAAAwyB,gBAAA,CACAtyB,IAAA2D,EAAA2tB,YAAA,uBAAAxxB,MACA,OAAA,EAEA,IAAAqwB,QAAAI,SAAAjuB,IAAAxC,KAAAsyB,aAAAe,0BAAArzB,MAAA,CACAE,IAAA2D,EAAA2tB,YAAA,qBAAAxxB,MACA,OAAA,EAEA,IAAAqwB,QAAAI,SAAAjuB,IAAAxC,KAAAwyB,gBAAAc,0BAAAtzB,MAAA,CACAE,IAAA2D,EAAA2tB,YAAA,wBAAAxxB,MACA,OAAA,EAEA,OAAA,EAIAud,qBACA,MAAA,IAAAnW,MAAA,gDAOAzH,UAAA8H,GACA,MAAA,IAAAL,MAAA,gDAMAzH,OAEAK,KAAAmc,MAAAnc,KAAAmc,OAAAO,KAAAC,MAAA3c,KAAAuzB,oBACA,OAAAvzB,KAAAmc,MAOAxc,QAAAoe,GACA,OAAA/d,KAAA+wB,IAAA/wB,KAAAud,eAAAQ,EAAAgT,IAAAhT,EAAAR,gBAAA,EACAvd,KAAA+wB,IAAA/wB,KAAAud,eAAAQ,EAAAgT,IAAAhT,EAAAR,eAAA,EACAvd,KAAAud,eAAAQ,EAAAR,gBAAA,EACAvd,KAAAud,eAAAQ,EAAAR,eAAA,EACAvd,KAAA+wB,IAAAhT,EAAAgT,KAAA,EACA/wB,KAAA+wB,IAAAhT,EAAAgT,IAAA,EACA/wB,KAAA0L,MAAAqS,EAAArS,OAAA,EACA1L,KAAA0L,MAAAqS,EAAArS,MAAA,EACA1L,KAAAwzB,kBAAAzV,GAOApe,kBAAAoe,GAEA,MAAA0V,EAAAzzB,KAAAuyB,WAAAtjB,QAAA8O,EAAAwU,YACA,GAAA,IAAAkB,EAAA,OAAAA,EACA,GAAAzzB,KAAA4yB,qBAAA7U,EAAA6U,qBAAA,OAAA,EACA,GAAA5yB,KAAA4yB,qBAAA7U,EAAA6U,qBAAA,OAAA,EACA,GAAA5yB,KAAA0yB,KAAA3U,EAAA2U,KAAA,OAAA,EACA,GAAA1yB,KAAA0yB,KAAA3U,EAAA2U,KAAA,OAAA,EACA,GAAA1yB,KAAAyyB,OAAA1U,EAAA0U,OAAA,OAAA,EACA,GAAAzyB,KAAAyyB,OAAA1U,EAAA0U,OAAA,OAAA,EACA,MAAAiB,EAAA1zB,KAAAqyB,QAAApjB,QAAA8O,EAAAsU,SACA,OAAA,IAAAqB,EAAAA,EACA1zB,KAAAwyB,eAAAzU,EAAAyU,gBAAA,EACAxyB,KAAAwyB,eAAAzU,EAAAyU,eAAA,EACAxyB,KAAAsyB,YAAAvU,EAAAuU,aAAA,EACAtyB,KAAAsyB,YAAAvU,EAAAuU,YAAA,EACAtyB,KAAA6yB,OAAA9U,EAAA8U,QAAA,EACA7yB,KAAA6yB,OAAA9U,EAAA8U,OAAA,EACAxrB,YAAA4H,QAAAjP,KAAA8yB,MAAA/U,EAAA+U,OAOAnzB,OAAAoe,GAGA,OAAAA,aAAAyT,aACAxxB,KAAAqyB,QAAApa,OAAA8F,EAAAsU,UACAryB,KAAAsyB,cAAAvU,EAAAuU,aACAtyB,KAAAuyB,WAAAta,OAAA8F,EAAAwU,aACAvyB,KAAAwyB,iBAAAzU,EAAAyU,gBACAxyB,KAAAyyB,SAAA1U,EAAA0U,QACAzyB,KAAA0yB,OAAA3U,EAAA2U,MACA1yB,KAAA4yB,uBAAA7U,EAAA6U,sBACA5yB,KAAA2yB,aAAA5U,EAAA4U,YACA3yB,KAAA6yB,SAAA9U,EAAA8U,QACAxrB,YAAA4Q,OAAAjY,KAAA8yB,MAAA/U,EAAA+U,OAMAnzB,WACA,MAAA,yBACAK,KAAAqyB,QAAAjpB,4BACApJ,KAAAuyB,WAAAnpB,wBACApJ,KAAAyyB,kBACAzyB,KAAA0yB,gCACA1yB,KAAA4yB,sCACA5yB,KAAA2yB,aACA,IAMAhzB,6BACA,MAAAg0B,EAAAnC,YAAA7T,YAAA3d,KAAAod,aACAuW,EAAApB,WAAAzK,QAAAlB,KACA+M,EAAAxX,MAAA,KACA,OAAA2L,QAAAC,SAAA4L,EAAApX,QAIAkV,aACA,OAAAzxB,KAAAqyB,QAIAX,iBACA,OAAA1xB,KAAAsyB,YAIAX,gBACA,OAAA3xB,KAAAuyB,WAIAX,oBACA,OAAA5xB,KAAAwyB,eAIA9mB,YACA,OAAA1L,KAAAyyB,OAIA1B,UACA,OAAA/wB,KAAA0yB,KAIAkB,iBACA,OAAA5zB,KAAA0yB,KAAA1yB,KAAAud,eAIAwU,gBACA,OAAA/xB,KAAA2yB,WAIA9B,0BACA,OAAA7wB,KAAA4yB,qBAIAf,YACA,OAAA7xB,KAAA6yB,OAOAlzB,QAAAk0B,GACA,OAAA7zB,KAAA6yB,OAAAgB,GAAA,EAIAlI,WACA,OAAA3rB,KAAA8yB,MAIAhB,YACA,OAAA9xB,KAAA+yB,OAKAjB,UAAAA,GACA9xB,KAAA+yB,OAAAjB,GAQAN,YAAAsC,OAAA,CACAzC,MAAA,EACA0C,SAAA,GAKAvC,YAAAU,KAAA,CACA8B,KAAA,EACA5D,kBAAA,EACA6D,IAAA,GAGAzC,YAAAyB,WAAA,IAAA/uB,IAEA1E,MAAAM,SAAA0xB,aC5VA,MAAA0C,eAKAv0B,yBAAA+wB,GACA,IACA,MAAApqB,EAAA,IAAA4C,aAAAwnB,EAAAoB,OACAA,EAAAoC,eAAAvW,YAAArX,GAGA,GAAAA,EAAAmF,UAAAnF,EAAAH,WAAA,CACAjG,IAAA2D,EAAAqwB,eAAA,qCACA,OAAA,EAGA,OAAApC,EAAAqC,OAAAzD,EAAAe,OAAAf,EAAA6C,oBACA,MAAA7yB,GACAR,IAAA2D,EAAAqwB,gDAAAxzB,EAAAoC,SAAApC,IAAAA,GACA,OAAA,GASAf,iBAAAqnB,EAAA6G,GACA,OAAA,IAAAqG,eAAAlN,EAAA,IAAAvL,WAAA,IAAAoS,GASAluB,gBAAAy0B,EAAAzM,EAAAkG,GACA,MAAAwG,EAAA5Y,WAAA4C,QAAAsJ,EAAAyM,GACA,OAAA,IAAAF,eAAAE,EAAAC,EAAAxG,GAQAluB,YAAAqnB,EAAAqN,EAAAxG,GACA,KAAA7G,aAAAE,WAAA,MAAA,IAAA9f,MAAA,wBACA,KAAAitB,aAAA5Y,YAAA,MAAA,IAAArU,MAAA,wBACA,GAAAymB,KAAAA,aAAA1B,WAAA,MAAA,IAAA/kB,MAAA,uBAMApH,KAAA4pB,WAAA5C,EAKAhnB,KAAAs0B,YAAAD,EAKAr0B,KAAAu0B,WAAA1G,EAOAluB,mBAAA8H,GACA,MAAAuf,EAAAE,UAAAvJ,YAAAlW,GACA4sB,EAAA5Y,WAAAkC,YAAAlW,GACAomB,EAAA1B,UAAAxO,YAAAlW,GACA,OAAA,IAAAysB,eAAAlN,EAAAqN,EAAAxG,GAOAluB,UAAA8H,GACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,gBACAvd,KAAA4pB,WAAAxM,UAAA3V,GACAzH,KAAAs0B,YAAAlX,UAAA3V,GAKAzH,KAAAu0B,YACAv0B,KAAAu0B,WAAAnX,UAAA3V,GAGA,OAAAA,EAIA8V,qBACA,OAAAvd,KAAA4pB,WAAArM,eACAvd,KAAAs0B,YAAA/W,gBACAvd,KAAAu0B,WAAAv0B,KAAAu0B,WAAAhX,eAAA,GAOA5d,OAAAoe,GACA,OAAAA,aAAAmW,gBACAl0B,KAAA4pB,WAAA3R,OAAA8F,EAAA6L,aACA5pB,KAAAs0B,YAAArc,OAAA8F,EAAAuW,eACAt0B,KAAAu0B,WAAAv0B,KAAAu0B,WAAAtc,OAAA8F,EAAAwW,YAAAv0B,KAAAu0B,aAAAxW,EAAAwW,YAQA50B,OAAA8xB,EAAA9F,GACA,GAAA,OAAA8F,IAAAzxB,KAAAw0B,WAAA/C,GAAA,CACAvxB,IAAA2D,EAAAqwB,eAAA,iEACA,OAAA,EAGA,IAAAl0B,KAAAu0B,WAAA,CACAr0B,IAAA2D,EAAAqwB,eAAA,iDACA,OAAA,EAGA,IAAAl0B,KAAAu0B,WAAAJ,OAAAn0B,KAAA4pB,WAAA+B,GAAA,CACAzrB,IAAA2D,EAAAqwB,eAAA,iDACA,OAAA,EAGA,OAAA,EAOAv0B,WAAA8xB,GACA,MAAAgD,EAAAz0B,KAAAs0B,YAAAI,YAAA10B,KAAA4pB,YAEA,OADA9B,QAAAC,SAAA0M,GACAxc,OAAAwZ,GAIAzK,gBACA,OAAAhnB,KAAA4pB,WAIAyK,iBACA,OAAAr0B,KAAAs0B,YAIAzG,gBACA,OAAA7tB,KAAAu0B,WAIA1G,cAAAA,GACA7tB,KAAAu0B,WAAA1G,GAIAruB,MAAAM,SAAAo0B,gBC7KA,MAAAS,yBAAAnD,YAUA7xB,YAAAi1B,EAAAjD,EAAAjmB,EAAAqlB,EAAAF,EAAAhD,EAAAkE,GACA,KAAA6C,aAAA1N,WAAA,MAAA,IAAA9f,MAAA,0BAEA,GAAAymB,IAAAzqB,aAAAyqB,aAAA1B,WAAA,MAAA,IAAA/kB,MAAA,uBAEA,MAAA0qB,EAAAoC,eAAAW,UAAAD,EAAA/G,GACA1iB,MAAAqmB,YAAAsC,OAAAzC,MAAAuD,EAAA3I,YAAAoE,QAAAe,KAAAC,MAAAM,EAAAtB,QAAAe,KAAAC,MAAA3lB,EAAAqlB,EAAAF,EAAAW,YAAAU,KAAA8B,KAAA,IAAA3tB,WAAA,GAAAyrB,EAAA1U,YAAA2U,GAMA/xB,KAAA80B,gBAAAhD,EAOAnyB,mBAAA8H,GACA,MAAArD,EAAAqD,EAAA6E,YACApF,OAAA6tB,KAAA3wB,IAAAotB,YAAAsC,OAAAzC,OAEA,MAAAuD,EAAA1N,UAAAvJ,YAAAlW,GACAkqB,EAAA7J,QAAAnK,YAAAlW,GACAiE,EAAAjE,EAAAgF,aACAskB,EAAAtpB,EAAAgF,aACAokB,EAAAppB,EAAA+E,aACAulB,EAAAtqB,EAAA6E,YACAuhB,EAAA1B,UAAAxO,YAAAlW,GACA,OAAA,IAAAktB,iBAAAC,EAAAjD,EAAAjmB,EAAAqlB,EAAAF,EAAAhD,EAAAkE,GAOApyB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACA7Q,WAAA8kB,YAAAsC,OAAAzC,OACArxB,KAAA40B,aAAAxX,UAAA3V,GACAzH,KAAAuyB,WAAAnV,UAAA3V,GACAA,EAAAoF,YAAA7M,KAAAyyB,QACAhrB,EAAAoF,YAAA7M,KAAA0yB,MACAjrB,EAAAmF,YAAA5M,KAAA4yB,sBACAnrB,EAAAiF,WAAA1M,KAAA2yB,YACA3yB,KAAA6tB,UAAAzQ,UAAA3V,GACA,OAAAA,EAIA8V,qBACA,OAAA,EACAvd,KAAA40B,aAAArX,eACAvd,KAAAuyB,WAAAhV,eACA,EACA,EACA,EACA,EACAvd,KAAA6tB,UAAAtQ,eAMAqX,mBACA,OAAA50B,KAAA80B,gBAAA9N,UAMA6G,gBACA,OAAA7tB,KAAA80B,gBAAAjH,UAMAA,cAAAA,GACA7tB,KAAA80B,gBAAAjH,UAAAA,EACA7tB,KAAA+yB,OAAA/yB,KAAA80B,gBAAA1X,aAGAoU,YAAAyB,WAAAzuB,IAAAgtB,YAAAsC,OAAAzC,MAAAsD,kBACAn1B,MAAAM,SAAA60B,kBC/FA,MAAAK,4BAAAxD,YAeA7xB,YAAA8xB,EAAAC,EAAAC,EAAAC,EAAAlmB,EAAAqlB,EAAAF,EAAAgB,EAAAlG,EAAAmG,EAAA,IAAAzrB,WAAA,GAAA0rB,GACA5mB,MAAAqmB,YAAAsC,OAAAC,SAAAtC,EAAAC,EAAAC,EAAAC,EAAAlmB,EAAAqlB,EAAAF,EAAAgB,EAAAlG,EAAAmG,EAAAC,GAOApyB,mBAAA8H,GACA,MAAArD,EAAAqD,EAAA6E,YACApF,OAAA6tB,KAAA3wB,IAAAotB,YAAAsC,OAAAC,UAEA,MAAAkB,EAAAxtB,EAAA8E,aACAof,EAAAlkB,EAAAwF,KAAAgoB,GACAxD,EAAA3J,QAAAnK,YAAAlW,GACAiqB,EAAAjqB,EAAA6E,YACAqlB,EAAA7J,QAAAnK,YAAAlW,GACAmqB,EAAAnqB,EAAA6E,YACAZ,EAAAjE,EAAAgF,aACAskB,EAAAtpB,EAAAgF,aACAokB,EAAAppB,EAAA+E,aACAulB,EAAAtqB,EAAA6E,YACAulB,EAAApqB,EAAA6E,YACA4oB,EAAAztB,EAAA8E,aACAulB,EAAArqB,EAAAwF,KAAAioB,GACA,OAAA,IAAAF,oBAAAvD,EAAAC,EAAAC,EAAAC,EAAAlmB,EAAAqlB,EAAAF,EAAAgB,EAAAlG,EAAAmG,EAAAC,GAOApyB,UAAA8H,IACAA,EAAAA,GAAA,IAAAyB,aAAAlJ,KAAAud,iBACA7Q,WAAA8kB,YAAAsC,OAAAC,UACA/zB,KAAAuzB,iBAAA9rB,GACAA,EAAAkF,YAAA3M,KAAA+yB,OAAA5sB,YACAsB,EAAA4F,MAAArN,KAAA+yB,QACA,OAAAtrB,EAIA8V,qBACA,OAAA,EACAvd,KAAAkzB,sBACA,EACAlzB,KAAA+yB,OAAA5sB,YAIAqrB,YAAAyB,WAAAzuB,IAAAgtB,YAAAsC,OAAAC,SAAAiB,qBACAx1B,MAAAM,SAAAk1B,qBC/DA,MAAAG,QACAx1B,yBAAAy1B,EAAAv1B,EAAAw1B,GACA,OAAA,IAAAF,QAAAx2B,MAAAy2B,GAAA,CAAAC,EAAAx1B,GAGAF,iCAAAy1B,EAAAv1B,EAAAy1B,GACA,GAAAH,QAAAI,kBAGA,CACAD,IACAA,KAAA72B,MAAAU,kBAEA,OAAAg2B,QAAAK,YAAAJ,EAAAv1B,EAAA,IAAA41B,OAAA/2B,OAAAg3B,IAAAC,gBAAA,IAAAC,KAAA,qBAAAn3B,MAAAU,2BAAAm2B,EAAAvtB,QAAA,KAAA,oBANAotB,QAAAU,sBAAAT,EAAAv1B,MAAAi2B,KAAAj2B,GACA,OAAAs1B,QAAAU,sBAAAT,EAAAv1B,MASAF,qCAAAy1B,EAAAv1B,EAAA6lB,EAAA4P,GACA,OAAA,IAAAH,QAAAY,KAAAX,GAAA,CAAAv1B,GAAAs1B,QAAAa,oBAAAZ,EAAAv1B,EAAAy1B,GAAAz1B,EAAA6lB,GAAAxd,QAGAvI,+BAAAkD,GACA,IACA,GAAA,SAAAA,EAAA8oB,KAAAsK,QACA,GAAAd,QAAAU,sBAAAhzB,EAAA8oB,KAAA1qB,KAAA,IAAA,CACA,MAAA4D,QAAAswB,QAAAU,sBAAAhzB,EAAA8oB,KAAA1qB,KAAA,IAAA60B,KAAAjzB,EAAA8oB,KAAA1qB,KAAA,IACAvB,KAAAw2B,YAAA,CAAAC,OAAA,KAAAC,OAAAvxB,EAAAJ,GAAA5B,EAAA8oB,KAAAlnB,UAEA/E,KAAAw2B,YAAA,CAAAC,OAAA,QAAAC,OAAA,kBAAA3xB,GAAA5B,EAAA8oB,KAAAlnB,UAGA/E,KAAAw2B,YAAA,CAAAC,OAAA,QAAAC,OAAA,8BAAA3xB,GAAA5B,EAAA8oB,KAAAlnB,KAEA,MAAA/D,GACAhB,KAAAw2B,YAAA,CAAAC,OAAA,QAAAC,OAAA11B,EAAA+D,GAAA5B,EAAA8oB,KAAAlnB,MAIA8wB,+BACA,MAAA,oBAAAE,OAGAY,6BACA,OAAAlB,QAAAI,kBAGAe,8BACA,MAAA,oBAAAC,mBAAA72B,gBAAA62B,kBAGAC,qBACA,MAAA,oBAAAC,OAAAA,OAAA,oBAAA/3B,OAAAA,OAAA,oBAAAgB,KAAAA,KAAA,KAGAC,2BAAA+2B,EAAAC,GACAxB,QAAAmB,mBAEA52B,KAAAk3B,UAAAzB,QAAA0B,mBAEA1B,QAAAU,sBAAAV,QAAAU,uBAAA,GACAV,QAAAU,sBAAAa,EAAA72B,MAAA82B,EAGAh3B,0BAAAm3B,EAAAC,GAEA,MAAAC,EAAAl4B,SAAAG,qBAAA,QAAA,GACAg4B,EAAAn4B,SAAAo4B,cAAA,UACAD,EAAA7yB,KAAA,kBACA6yB,EAAA73B,IAAA03B,EAKA,MAAAK,EAAA,IAAAz4B,OAAA04B,WAAAL,EAAA,KACAE,EAAAI,mBAAAF,EACAF,EAAAK,OAAAH,EAGAH,EAAAO,YAAAN,GAGAt3B,aAAAy1B,GACA,MAAAoC,EAAA,cAAApC,EAKAz1B,YAAA01B,EAAAx1B,GACAsL,QACAnL,KAAAy3B,MAAA53B,EACAG,KAAA03B,WAAA,EACA13B,KAAA23B,QAAAtC,EACAr1B,KAAA23B,QAAAf,UAAA52B,KAAA43B,SAAAh0B,KAAA5D,MAEAA,KAAA63B,SAAA,IAAA3zB,IACA,OAAAlE,KAAA83B,QAAA,OAAA,CAAA1C,EAAAv1B,KAAAA,IAAAk4B,KAAA,IAAA/3B,MAGAL,SAAAkD,GACA,MAAAm1B,EAAAh4B,KAAA63B,SAAAr1B,IAAAK,EAAA8oB,KAAAlnB,IACA,GAAAuzB,EAEA,CACAh4B,KAAA63B,SAAAI,UAAAp1B,EAAA8oB,KAAAlnB,IACA,OAAA5B,EAAA8oB,KAAAwK,OACA6B,EAAAjB,QAAAl0B,EAAA8oB,KAAAyK,QACA,UAAAvzB,EAAA8oB,KAAAwK,QACA6B,EAAAv2B,MAAAoB,EAAA8oB,KAAAyK,aANAl2B,IAAA2D,EAAAq0B,YAAA,gBAAAr1B,GAiBAlD,QAAAs2B,EAAAh1B,EAAA,IACA,OAAA,IAAA6D,QAAA,CAAAiyB,EAAAt1B,KACA,MAAA8N,EAAA,CAAA0mB,QAAAA,EAAAh1B,KAAAA,EAAAwD,GAAAzE,KAAA03B,cACA13B,KAAA63B,SAAArzB,IAAA+K,EAAA9K,GAAA,CAAAsyB,QAAAA,EAAAt1B,MAAAA,IACAzB,KAAA23B,QAAAzB,YAAA3mB,KAIA5P,UACA,OAAAK,KAAA83B,QAAA,aAGA,IAAA,MAAAK,KAAA3oB,OAAA4oB,oBAAAhD,EAAAnyB,WACA,mBAAAmyB,EAAAnyB,UAAAk1B,IAAA,gBAAAA,IACAX,EAAAv0B,UAAAk1B,GAAA,YAAAl3B,GACA,OAAAjB,KAAA83B,QAAAK,EAAAl3B,KAIA,OAAAu2B,EAQA73B,YAAAy1B,GACA,MAAAiD,EAAA,cAAAjD,EACAz1B,cACAwL,QAGAxL,QAAAkD,EAAAszB,EAAAC,GACA12B,KAAAw2B,YAAA,CAAAC,OAAAA,EAAAC,OAAAA,EAAA3xB,GAAA5B,EAAA8oB,KAAAlnB,KAGA9E,WAAAkD,GACA,IACA,MAAAgC,EAAA7E,KAAA83B,QAAAj1B,EAAA8oB,KAAAsK,QAAApzB,EAAA8oB,KAAA1qB,MACA4D,aAAAC,QACAD,EAAAkzB,KAAAO,IAAAt4B,KAAAu4B,QAAA11B,EAAA,KAAAy1B,KAEAt4B,KAAAu4B,QAAA11B,EAAA,KAAAgC,GAEA,MAAAnE,GACAV,KAAAu4B,QAAA11B,EAAA,QAAAnC,EAAAoC,SAAApC,IAIAf,KAAAE,GACAG,KAAAy3B,MAAA53B,EACA,GAAAs1B,QAAAmB,iBAAA,CACA52B,KAAAG,KAAAA,EACAH,KAAAk3B,UAAA,CAAA/zB,GAAA7C,KAAAw4B,WAAA31B,KAIAlD,QAAAs2B,EAAAh1B,GACA,OAAAjB,KAAAi2B,GAAAt0B,MAAA3B,KAAAiB,GAGAtB,UACAw1B,QAAAmB,kBACA52B,KAAA+4B,UAIA,IAAA,MAAAN,KAAA3oB,OAAA4oB,oBAAAhD,EAAAnyB,WACA,mBAAAmyB,EAAAnyB,UAAAk1B,IAAA,gBAAAA,IACAE,EAAAp1B,UAAAk1B,GAAA,WACA,yCAAAA,MAIA,OAAAE,EAGA14B,YAAAy1B,GACA,MAAAsD,EAAA,cAAAtD,EAOAz1B,YAAAg5B,EAAA94B,EAAA,OAAA6lB,EAAA,GACAva,QAEAnL,KAAA44B,kBAAAD,EAEA34B,KAAAy3B,MAAA53B,EAEAG,KAAA64B,UAAAnT,EAEA1lB,KAAA84B,SAAA,GAEA94B,KAAA+4B,aAAA,GAEA/4B,KAAAg5B,cAAA,GAGAr5B,oBACAK,KAAAi5B,gBAEA,OAAAj5B,KAGAk5B,eACA,OAAAl5B,KAAA64B,UAGAK,aAAAC,GACAn5B,KAAA64B,UAAAM,EACAn5B,KAAAi5B,gBAAAG,SAAAl5B,IAAA2D,EAAAhD,IAAAs0B,UAGAx1B,UACAK,KAAA64B,UAAA,EACA,OAAA74B,KAAAi5B,gBAQAt5B,QAAAE,EAAAoB,GACA,OAAAk0B,QAAAI,kBACA,IAAAzwB,QAAA,CAAAiyB,EAAAt1B,KACAzB,KAAAg5B,cAAAz0B,KAAA,CAAA1E,KAAAA,EAAAoB,KAAAA,EAAA81B,QAAAA,EAAAt1B,MAAAA,IACA,MAAA4zB,EAAAr1B,KAAA+4B,aAAArvB,QACA2rB,GACAr1B,KAAAq5B,MAAAhE,GAAA+D,SAAAl5B,IAAA2D,EAAAhD,IAAAs0B,YAIAn1B,KAAA84B,SAAA,GAAAj5B,GAAA8B,MAAA3B,KAAA84B,SAAA,GAAA73B,GASAtB,YAAA01B,GACA,IAAAlyB,EAAAnD,KAAAg5B,cAAAtvB,QACA,KAAAvG,GAAA,CACA,IAEAA,EAAA4zB,cAAA1B,EAAAlyB,EAAAtD,MAAA8B,MAAA0zB,EAAAlyB,EAAAlC,OACA,MAAAP,GACAyC,EAAA1B,MAAAf,GAEA,IAAA,IAAAV,KAAA84B,SAAAz5B,QAAAg2B,GAAA,CACAA,EAAAiE,UACA,OAEAn2B,EAAAnD,KAAAg5B,cAAAtvB,QAEA1J,KAAA+4B,aAAAx0B,KAAA8wB,GAGA11B,sBACA,GAAA,oBAAA81B,QAAAz1B,KAAA64B,UAAA,EAAA,CACA34B,IAAAyD,EAAAwxB,QAAA,0DACAn1B,KAAA64B,UAAA,EAGA,MAAAU,EAAA,GACA,KAAAv5B,KAAA84B,SAAA55B,OAAAq6B,EAAAr6B,OAAAc,KAAA64B,WACAU,EAAAh1B,KAAAvE,KAAA44B,qBAAA54B,KAAAy3B,SAAAz3B,KAAA84B,SAAA55B,OAAAq6B,EAAAr6B,WAEA,MAAAs6B,QAAA10B,QAAAC,IAAAw0B,GACA,IAAA,MAAAlE,KAAAmE,EAAA,CACAx5B,KAAA84B,SAAAv0B,KAAA8wB,GACAr1B,KAAAq5B,MAAAhE,GAAA+D,SAAAl5B,IAAA2D,EAAAhD,IAAAs0B,UAGA,KAAAn1B,KAAA84B,SAAA55B,OAAAc,KAAA64B,WAAA,CACA,MAAAxD,EAAAr1B,KAAA+4B,aAAArvB,SAAA1J,KAAA84B,SAAAjlB,MACA4lB,EAAAz5B,KAAA84B,SAAAz5B,QAAAg2B,GACA,GAAAoE,GAAA,EAAA,CAEAz5B,KAAA84B,SAAAhlB,OAAA2lB,EAAA,GACApE,EAAAiE,WAGA,OAAAt5B,OAGA,IAAA,MAAAm4B,KAAA3oB,OAAA4oB,oBAAAhD,EAAAnyB,WACA,mBAAAmyB,EAAAnyB,UAAAk1B,IAAA,gBAAAA,IACAO,EAAAz1B,UAAAk1B,GAAA,YAAAl3B,GACA,OAAAjB,KAAA83B,QAAAK,EAAAl3B,KAIA,OAAAy3B,GAIAvD,QAAAuE,uBAAA,GACAvE,QAAAU,sBAAA,GACAr2B,MAAAM,SAAAq1B,SCjUA,MAAAwE,WAEAh6B,+BACA,IAAAgJ,cAAAC,WACA,GAAA+wB,WAAAC,eACA15B,IAAAQ,EAAAi5B,WAAA,qCADA,CAIAA,WAAAC,gBAAA,QACAD,WAAAE,kBAAA,0BACAF,WAAAG,oBAAA,wBAEAH,WAAAG,oBAAA,gBAEAH,WAAAI,iBAAA,GAGAp6B,wBACAgJ,cAAAC,aACA+wB,WAAAK,iBAAA,oBACAL,WAAAM,mBAAA,kBAEAN,WAAAM,mBAAA,iBASAt6B,yBAAAu6B,EAAAC,EAAA,UACAD,EAAAP,WAAAS,gBAAAF,GACA,IAAAP,WAAAnD,QAAA6D,YAAA,CACAn6B,IAAA2D,EAAA81B,WAAA,yCACA,OAAA70B,QAAAiyB,SAAA,GAGA,OAAA,IAAAjyB,QAAAiyB,IACA,IACA,MAAAuD,EAAA,IAAAC,eACAD,EAAAE,KAAA,MAAAN,GAAA,GACAI,EAAAG,aAAA,cACAH,EAAAhD,OAAA,WACAqC,WAAAnD,QAAA2D,GAAAR,WAAAnD,QAAA2D,IAAA,GACAR,WAAAnD,QAAA2D,GAAAO,WAAAJ,EAAAK,SACA5D,GAAA,IAEAuD,EAAAM,QAAA,WACA16B,IAAA2D,EAAA81B,kDAAAO,KACAnD,GAAA,IAEAuD,EAAAO,KAAA,MACA,MAAAn6B,GACAR,IAAA2D,EAAA81B,kDAAAO,KACAnD,GAAA,MAKAp3B,wBAAAu6B,EAAAC,EAAA,UACAD,EAAAP,WAAAS,gBAAAF,GACA,IAAAP,WAAAnD,QAAA6D,YAAA,CACAn6B,IAAA2D,EAAA81B,WAAA,yCACA,OAAA,EAGA,MAOAmB,EAAAzZ,QAAA,MACA,IACA,MAAAsK,EAAAmP,EAAAC,aAAAb,GACAP,WAAAnD,QAAA2D,GAAAR,WAAAnD,QAAA2D,IAAA,GACAR,WAAAnD,QAAA2D,GAAAO,WAXA,SAAAjzB,GACA,MAAAuzB,EAAA,IAAA30B,WAAAoB,EAAAvI,QACA,IAAA,IAAAwD,EAAA,EAAAA,EAAA+E,EAAAvI,SAAAwD,EACAs4B,EAAAt4B,GAAA+E,EAAA/E,GAEA,OAAAs4B,EAMAC,CAAAtP,GACA,OAAA,EACA,MAAAjrB,GACAR,IAAA2D,EAAA81B,kDAAAO,MAAAx5B,KACA,OAAA,GAIAf,2BAAAs3B,EAAAkD,EAAA,UACA,GAAAA,GAAAR,WAAAnD,QAAA2D,IAAAR,WAAAnD,QAAA2D,GAAAe,IAAA,OAAA,EACAjE,EAAA0C,WAAAwB,kBAAAlE,GAEA,MAAAmE,EAAAzB,WAAAnD,QAAA2D,IAAA,GACA,OAAA,IAAAr1B,QAAAu2B,MAAAtE,EAAAuE,KACAnB,IACAiB,EAAAG,qBAAA,KAAAxE,GAAA,KAEA,GAAA,mBAAAyE,cAAA,OACA,IAAA12B,QAAAiyB,IACA4C,WAAAD,uBAAAS,GAAApD,EACAyE,cAAAvE,KAEA0C,WAAAnD,QAAA2D,GAAAR,WAAAnD,QAAA2D,GAAAiB,GACAjB,GAAApD,GAAA,QACA,GAAA,iBAAAr4B,OAAA,OACA,IAAAoG,QAAAiyB,IACA4C,WAAAD,uBAAAS,GAAApD,EACA4C,WAAA8B,mBAAAxE,KAEA0C,WAAAnD,QAAA2D,GAAAR,WAAAnD,QAAA2D,GAAAiB,GACAjB,GAAApD,GAAA,QACA,GAAA,mBAAA1V,QAAA,CACAsY,WAAAnD,QAAA2D,GAAA9Y,QAAA4V,EAAA5V,CAAA+Z,GACAjB,GAAApD,GAAA,QAEAuE,EAAA,6BAKA37B,0BAAAs3B,EAAAkD,EAAA,UACA,GAAAA,GAAAR,WAAAnD,QAAA2D,IAAAR,WAAAnD,QAAA2D,GAAAe,IAAA,OAAA,EACAjE,EAAA0C,WAAAwB,kBAAAlE,GAEA,MAAAmE,EAAAzB,WAAAnD,QAAA2D,IAAA,GAEA,GAAA,mBAAA9Y,QAAA,CACAsY,WAAAnD,QAAA2D,GAAA9Y,QAAA4V,EAAA5V,CAAA+Z,GACA,IAAAjB,EAAA,OAAA,EAEA,OAAA,EAGAx6B,wBAAAw6B,EAAA,UACA,GAAA,mBAAAR,WAAAD,uBAAAS,GAAA,CACAR,WAAAD,uBAAAS,KACAR,WAAAD,uBAAAS,GAAA,MAIAx6B,0BAAAm3B,GACA,MAAAE,EAAAl4B,SAAAG,qBAAA,QAAA,GACAg4B,EAAAn4B,SAAAo4B,cAAA,UACAD,EAAA7yB,KAAA,kBACA6yB,EAAA73B,IAAA03B,EACAE,EAAAO,YAAAN,GAGAt3B,uBAAAu6B,GACA,oBAAAz7B,OAAAA,MAAAU,QAAA+6B,KAAAz7B,MAAAU,QAAA+6B,KACA,iBAAAwB,YAAA,IAAAxB,EAAA76B,QAAA,OAAA66B,KAAAwB,aAAAxB,KACA,OAAAA,EAGAv6B,yBAAAs3B,GACA,oBAAAx4B,OAAAA,MAAAU,QAAA83B,KAAAx4B,MAAAU,QAAA83B,KACA,iBAAAyE,YAAA,IAAAzE,EAAA53B,QAAA,OAAA43B,KAAAyE,aAAAzE,KACA,OAAAA,EAGAT,qBACA,MAAA,oBAAAC,OAAAA,OAAA,oBAAA/3B,OAAAA,OAAA,oBAAAgB,KAAAA,KAAA,MAGAi6B,WAAAD,uBAAA,GAEAl6B,MAAAM,SAAA65B,YCtKA,MAAA3U,aACA+B,iBAAA,OAAA3hB,UAAAjD,SAKAxC,gCACAqlB,aAAA2W,eACA3W,aAAA2W,mBAAAxG,QAAAyG,wBAAA5W,aAAA,SAAA,IAEA,OAAAA,aAAA2W,aAMAh8B,qBAAAgmB,IAMAhmB,0BAAAk8B,IAQAl8B,UAAAiF,EAAAk3B,EAAAC,IAUAp8B,kBAAAq8B,EAAAC,EAAAC,EAAAC,EAAApK,KAGA/M,aAAA2W,aAAA,KAEAn8B,MAAAM,SAAAklB,cChDA,MAAA5E,YAMAzgB,yBAAAiF,EAAA+mB,GACA/mB,EAAA1F,OAAAkhB,YAAAgc,oBACAx3B,EAAA,IAAAsE,aAAAwT,KAAA2I,cAAAzgB,KAGA,MAAAy3B,EAAA,IAAAnzB,aAAAkX,YAAAgc,mBACAE,EAAA,IAAApzB,aAAAkX,YAAAgc,mBACA,IAAA,IAAA15B,EAAA,EAAAA,EAAA0d,YAAAgc,oBAAA15B,EAAA,CACA,MAAA8G,EAAA5E,EAAAlC,IAAA,EACA25B,EAAA35B,GAAA,GAAA8G,EACA8yB,EAAA55B,GAAA,GAAA8G,EAGA,MAAA+yB,EAAA7f,KAAA2I,cAAAhe,YAAA8V,kBAAAkf,EAAA1Q,IACA,OAAAjP,KAAA2I,cAAAhe,YAAA8V,kBAAAmf,EAAAC,IAUA58B,2BAAAqgB,EAAA8b,EAAAC,EAAAS,GAEA,MAAAC,EAAA/f,KAAA8I,KAAAhjB,IAAAka,KAAA8H,UAAAc,QAEA,GAAAkX,GAAA92B,KAAAyG,IAAA,EAAA,IAAA,GAAAswB,EACA,MAAA,IAAAr1B,MAAA,wBAGA,MAAA3E,EAAAiD,KAAAwI,KAAAsuB,EAAAC,GACAztB,EAAAwtB,GAAA/5B,EAAA,GAAAg6B,EAEAC,EAAA,IAAAxzB,aAAAszB,GACA,IAAA,IAAA95B,EAAA,EAAAA,GAAAD,EAAAC,IAAA,CACA,IAAAs4B,EAAA,IAAA9xB,aAAA4yB,EAAA58B,OAAA,GACA87B,EAAA3tB,MAAAyuB,GACAd,EAAApuB,YAAAlK,GAGA,MAAAoB,EADAk3B,EAAA5a,YAAAsL,kBAAA1L,EAAAgb,GAEA,IAAA,IAAA/zB,EAAA,EAAAA,EAAA80B,EAAA90B,IAAA,CACA+zB,EAAA5a,YAAAsL,kBAAA1L,EAAAgb,GACA,IAAA,IAAAv0B,EAAA,EAAAA,EAAA3C,EAAA5E,OAAAuH,IACA3C,EAAA2C,IAAAu0B,EAAAv0B,GAIA/D,EAAAD,EACAi6B,EAAArvB,MAAAvJ,GAEA44B,EAAArvB,MAAAvJ,EAAAZ,MAAA,EAAA8L,IAGA,OAAA0tB,EAUA/8B,oBAAAmD,EAAA8B,EAAAk3B,EAAAC,GACA,OAAA10B,YAAAs1B,IAAA75B,cAAAkiB,aAAAC,oBAAA2X,IAAAh4B,EAAAk3B,EAAAC,IAQAp8B,2BAAAgsB,EAAA/mB,GACA,GAAA+mB,EAAAzsB,SAAAkhB,YAAAyc,sBAAA,MAAA,IAAAz1B,MAAA,oCAEA,MAAA00B,EAAA,IAAAz1B,WAAA+Z,YAAA0c,wBACA9X,aAAA+B,IAAA1hB,gBAAAy2B,GAEA,MAAAr0B,EAAA,IAAAyB,aAAAkX,YAAAwK,iBACAnjB,EAAAiF,WAAA,GACAjF,EAAAiF,WAAAhH,KAAAq3B,KAAA3c,YAAA4c,wBACAv1B,EAAA4F,YAAA+S,YAAA4K,OAAAW,EAAA/mB,EAAAk3B,EAAA1b,YAAA4c,wBACAv1B,EAAA4F,MAAAyuB,GACAr0B,EAAA4F,MAAAqP,KAAAoI,eAAA6G,GAAAngB,SAAA,EAAA4U,YAAA6c,6BACA,OAAAx1B,EAQA9H,2BAAAgsB,EAAA/mB,GACA,MAAAR,EAAAunB,EAAArf,YACA,GAAA,IAAAlI,GAAA,IAAAA,EAAA,MAAA,IAAAgD,MAAA,oBACA,MAAA81B,EAAAvR,EAAArf,YACA,GAAA4wB,EAAA,GAAA,MAAA,IAAA91B,MAAA,wBACA,MAAA+1B,EAAAz3B,KAAAyG,IAAA,EAAA+wB,GACAE,EAAAzR,EAAA1e,KAAAmT,YAAAyc,uBACAf,EAAAnQ,EAAA1e,KAAAmT,YAAA0c,wBACA5M,EAAAvE,EAAA1e,KAAAmT,YAAA6c,4BAEAhT,QAAA7J,YAAA4K,OAAAoS,EAAAx4B,EAAAk3B,EAAAqB,GAGA,IAAAE,EACA,OAAAj5B,GACA,KAAA,EAAA,CACA,MAAA0iB,EAAA,IAAAD,WAAAoD,GAEAoT,EADAnW,UAAA6C,OAAAjD,GACAvK,OACA,MAEA,KAAA,EACA8gB,EAAA3gB,KAAAoI,eAAAmF,GAKA,IAAA5iB,YAAA4Q,OAAAolB,EAAA7xB,SAAA,EAAA4U,YAAA6c,4BAAA/M,GACA,MAAA,IAAA9oB,MAAA,eAGA,OAAA6iB,GAGA7J,YAAAgc,kBAAA,IACAhc,YAAAyc,sBAAA,GACAzc,YAAA4c,sBAAA,IACA5c,YAAA6c,2BAAA,EACA7c,YAAA0c,uBAAA,GACA1c,YAAAwK,gBAAA,EAAAxK,YAAAyc,sBAAAzc,YAAA0c,uBAAA1c,YAAA6c,2BAEAz9B,MAAAM,SAAAsgB,aC9IA,MAAA4R,cACAryB,cACAqyB,cAAA8D,KAAA9D,cAAAsL,QAAA,MAGA39B,cACAqyB,cAAA8D,KAAA9D,cAAAsL,QAAA,MAGA39B,aACAqyB,cAAA8D,KAAA9D,cAAAsL,QAAA,KAGA39B,gBACAqyB,cAAA8D,KAAA9D,cAAAsL,QAAA,QAMA39B,YAAAiT,GACA,GAAAof,cAAAuL,QAAA,MAAA,IAAAn2B,MAAA,qCACA,IAAAwL,EAAAqf,WAAA,MAAA,IAAA7qB,MAAA,gCACA,IAAAwL,EAAA4qB,aAAA,MAAA,IAAAp2B,MAAA,kCAEA4qB,cAAAuL,QAAA3qB,EAMAqf,wBACA,IAAAD,cAAAuL,QAAA,MAAA,IAAAn2B,MAAA,iCACA,OAAA4qB,cAAAuL,QAAAtL,WAMAuL,0BACA,IAAAxL,cAAAuL,QAAA,MAAA,IAAAn2B,MAAA,iCACA,OAAA4qB,cAAAuL,QAAAC,cAGAh+B,MAAAM,SAAAkyB,eAEAA,cAAAsL,QAAA,CACAG,KAAA,CACAxL,WAAA,GACAuL,aAAA,QAGAzrB,KAAA,CACAkgB,WAAA,EACAuL,aAAA,QAGAE,IAAA,CACAzL,WAAA,EACAuL,aAAA,OAGAG,OAAA,CACA1L,WAAA,EACAuL,aAAA,WChEA5+B,EAAAg/B,SAAA,EACA,mBAAAh/B,EAAAi/B,SAAAj/B,EAAAi/B,UzCGA,CyCDAp/B","file":"web-offline.js","sourcesContent":["if (typeof Nimiq === 'undefined') {\n    var Nimiq = typeof window !== 'undefined' ? window : {};\n}\nvar Proxy; // ensure Proxy exists\n(function (exports) {\n    exports = typeof exports !== 'undefined' ? exports : {};\n    Nimiq = exports;\n    if (!Nimiq._currentScript) {\n        Nimiq._currentScript = document.currentScript;\n    }\n    if (!Nimiq._currentScript) {\n        // Heuristic\n        const scripts = document.getElementsByTagName('script');\n        Nimiq._currentScript = scripts[scripts.length - 1];\n    }\n    if (!Nimiq._path) {\n        if (Nimiq._currentScript && Nimiq._currentScript.src.indexOf('/') !== -1) {\n            Nimiq._path = Nimiq._currentScript.src.substring(0, Nimiq._currentScript.src.lastIndexOf('/') + 1);\n        } else {\n            // Fallback\n            Nimiq._path = './';\n        }\n    }\n","class Class {\n    static get scope() {\n        if (typeof exports !== 'undefined') return exports;\n        if (typeof self !== 'undefined') return self;\n        return window;\n    }\n\n    static register(cls) {\n        if (typeof exports !== 'undefined') exports[cls.name] = cls;\n    }\n}\nClass.register(Class);\n","class LogNative {\n    constructor() {\n        this._global_level = Log.INFO;\n        this._tag_levels = {};\n        try {\n            if (window.localStorage) {\n                try {\n                    let c = window.localStorage.getItem('log_tag_levels');\n                    if (c && typeof c === 'string') c = JSON.parse(c);\n                    if (c && typeof c === 'object') this._tag_levels = c;\n                } catch (e) {\n                    console.warn('Failed to load log configuration from local storage.');\n                }\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n\n    isLoggable(tag, level) {\n        if (tag && this._tag_levels[tag]) {\n            return this._tag_levels[tag] <= level;\n        }\n        if (this._tag_levels['*']) {\n            return this._tag_levels['*'] <= level;\n        }\n        return this._global_level <= level;\n    }\n\n    setLoggable(tag, level) {\n        if (tag && tag.name) tag = tag.name;\n        this._tag_levels[tag] = level;\n        if (window.localStorage) {\n            window.localStorage.setItem('log_tag_levels', JSON.stringify(this._tag_levels));\n        }\n    }\n\n    msg(level, tag, args) {\n        if (tag && tag.name) tag = tag.name;\n        if (!this.isLoggable(tag, level)) return;\n        if (tag) args.unshift(tag + ':');\n        args.unshift(`[${Log.Level.toStringTag(level)} ${new Date().toTimeString().substr(0, 8)}]`);\n        if (console.error && level >= Log.ERROR) {\n            console.error.apply(console, args);\n        } else if (console.warn && level >= Log.WARNING) {\n            console.warn.apply(console, args);\n        } else if (console.info && level >= Log.INFO) {\n            console.info.apply(console, args);\n        } else if (console.debug && level >= Log.DEBUG) {\n            console.debug.apply(console, args);\n        } else if (console.trace && level <= Log.TRACE) {\n            console.trace.apply(console, args);\n        } else {\n            console.log.apply(console, args);\n        }\n    }\n}\nClass.register(LogNative);\n","class Log {\n    /**\n     * @returns {Log}\n     */\n    static get instance() {\n        if (!Log._instance) {\n            Log._instance = new Log(new LogNative());\n        }\n        return Log._instance;\n    }\n\n    /**\n     * @param {LogNative} native\n     */\n    constructor(native) {\n        /** @type {LogNative} */\n        this._native = native;\n    }\n\n    /**\n     * @param {string} tag\n     * @param {Log.Level} level\n     */\n    setLoggable(tag, level) {\n        this._native.setLoggable(tag, Log.Level.get(level));\n    }\n\n    /** @type {Log.Level} */\n    get level() {\n        return this._native._global_level;\n    }\n\n    /** @type {Log.Level} */\n    set level(l) {\n        this._native._global_level = Log.Level.get(l);\n    }\n\n    /**\n     * @param {Log.Level} level\n     * @param {string|{name:string}} tag\n     * @param {Array} args\n     */\n    msg(level, tag, args) {\n        if (this._native.isLoggable(tag, level)) {\n            for (let i = 0; i < args.length; ++i) {\n                if (typeof args[i] === 'function') {\n                    args[i] = args[i]();\n                }\n                if (typeof args[i] === 'object') {\n                    if (typeof args[i].toString === 'function') {\n                        args[i] = args[i].toString();\n                    } else if (args[i].constructor && args[i].constructor.name) {\n                        args[i] = `{Object: ${args[i].constructor.name}}`;\n                    } else {\n                        args[i] = '{Object}';\n                    }\n                }\n            }\n            this._native.msg(level, tag, args);\n        }\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static d(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.DEBUG, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static e(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.ERROR, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static i(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.INFO, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static v(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.VERBOSE, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static w(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.WARNING, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static t(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.TRACE, tag, args);\n    }\n}\n\n/**\n * @enum {number|string}\n */\nLog.Level = {\n    TRACE: 1,\n    VERBOSE: 2,\n    DEBUG: 3,\n    INFO: 4,\n    WARNING: 5,\n    ERROR: 6,\n    ASSERT: 7,\n\n    /**\n     * @param {Log.Level} level\n     * @returns {string}\n     */\n    toStringTag: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'T';\n            case Log.Level.VERBOSE:\n                return 'V';\n            case Log.Level.DEBUG:\n                return 'D';\n            case Log.Level.INFO:\n                return 'I';\n            case Log.Level.WARNING:\n                return 'W';\n            case Log.Level.ERROR:\n                return 'E';\n            case Log.Level.ASSERT:\n                return 'A';\n            default:\n                return '*';\n        }\n    },\n\n    toString: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'trace';\n            case Log.Level.VERBOSE:\n                return 'verbose';\n            case Log.Level.DEBUG:\n                return 'debug';\n            case Log.Level.INFO:\n                return 'info';\n            case Log.Level.WARNING:\n                return 'warn';\n            case Log.Level.ERROR:\n                return 'error';\n            case Log.Level.ASSERT:\n                return 'assert';\n            default:\n                return 'unknown';\n        }\n    },\n\n    /**\n     * @param {string|number|Log.Level} v\n     * @returns {Log.Level}\n     */\n    get: function (v) {\n        if (typeof v === 'number') return /** @type {Log.Level} */ v;\n        if (!isNaN(parseInt(v))) return /** @type {Log.Level} */ parseInt(v);\n        switch (v.toLowerCase()) {\n            case 't':\n            case 'trace':\n                return Log.Level.TRACE;\n            case 'v':\n            case 'verbose':\n                return Log.Level.VERBOSE;\n            case 'd':\n            case 'debug':\n                return Log.Level.DEBUG;\n            case 'i':\n            case 'info':\n                return Log.Level.INFO;\n            case 'w':\n            case 'warn':\n            case 'warning':\n                return Log.Level.WARNING;\n            case 'e':\n            case 'error':\n            case 'exception':\n                return Log.Level.ERROR;\n            case 'a':\n            case 'assert':\n            case 'assertion':\n                return Log.Level.ASSERT;\n        }\n        return /** @type {Log.Level} */ 0;\n    }\n};\nLog.TRACE = Log.Level.TRACE;\nLog.VERBOSE = Log.Level.VERBOSE;\nLog.DEBUG = Log.Level.DEBUG;\nLog.INFO = Log.Level.INFO;\nLog.WARNING = Log.Level.WARNING;\nLog.ERROR = Log.Level.ERROR;\nLog.ASSERT = Log.Level.ASSERT;\nLog._instance = null;\n\nLog.d.tag = (tag) => Log.d.bind(null, tag);\nLog.e.tag = (tag) => Log.e.bind(null, tag);\nLog.i.tag = (tag) => Log.i.bind(null, tag);\nLog.v.tag = (tag) => Log.v.bind(null, tag);\nLog.w.tag = (tag) => Log.w.bind(null, tag);\nLog.t.tag = (tag) => Log.t.bind(null, tag);\n\nClass.register(Log);\n","class Observable {\n    /**\n     * @returns {string}\n     * @constant\n     */\n    static get WILDCARD() {\n        return '*';\n    }\n\n    constructor() {\n        /** @type {Map.<string, Array.<Function>>} */\n        this._listeners = new Map();\n    }\n\n    _offAll() {\n        this._listeners.clear();\n    }\n\n    /**\n     * @param {string} type\n     * @param {Function} callback\n     * @return {number}\n     */\n    on(type, callback) {\n        if (!this._listeners.has(type)) {\n            this._listeners.set(type, [callback]);\n            return 0;\n        } else {\n            return this._listeners.get(type).push(callback) - 1;\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {number} id\n     */\n    off(type, id) {\n        if (!this._listeners.has(type) || !this._listeners.get(type)[id]) return;\n        delete this._listeners.get(type)[id];\n    }\n\n    /**\n     * @param {string} type\n     * @param {...*} args\n     * @returns {Promise|null}\n     */\n    fire(type, ...args) {\n        const promises = [];\n        // Notify listeners for this event type.\n        if (this._listeners.has(type)) {\n            const listeners = this._listeners.get(type);\n            for (const key in listeners) {\n                // Skip non-numeric properties.\n                if (isNaN(key)) continue;\n\n                const listener = listeners[key];\n                const res = listener.apply(null, args);\n                if (res instanceof Promise) promises.push(res);\n            }\n        }\n\n        // Notify wildcard listeners. Pass event type as first argument\n        if (this._listeners.has(Observable.WILDCARD)) {\n            const listeners = this._listeners.get(Observable.WILDCARD);\n            for (const key in listeners) {\n                // Skip non-numeric properties.\n                if (isNaN(key)) continue;\n\n                const listener = listeners[key];\n                const res = listener.apply(null, arguments);\n                if (res instanceof Promise) promises.push(res);\n            }\n        }\n\n        if (promises.length > 0) return Promise.all(promises);\n        return null;\n    }\n\n    /**\n     * @param {Observable} observable\n     * @param {...string} types\n     */\n    bubble(observable, ...types) {\n        for (const type of types) {\n            let callback;\n            if (type === Observable.WILDCARD) {\n                callback = function() {\n                    this.fire.apply(this, arguments);\n                };\n            } else {\n                callback = function() {\n                    this.fire.apply(this, [type, ...arguments]);\n                };\n            }\n            observable.on(type, callback.bind(this));\n        }\n    }\n}\nClass.register(Observable);\n","class CryptoLib {\n    /**\n     * @return {SubtleCrypto|*}\n     */\n    static get instance() {\n        if (!CryptoLib._instance) {\n            const instance = {};\n            instance.getRandomValues = (window.crypto || window.msCrypto).getRandomValues.bind(window.crypto);\n\n            CryptoLib._instance = instance;\n        }\n        return CryptoLib._instance;\n    }\n}\nCryptoLib._instance = null;\nClass.register(CryptoLib);\n","class ArrayUtils {\n    /**\n     * @template T\n     * @param {Array.<T>} arr\n     * @return {T}\n     */\n    static randomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * @param {Uint8Array} uintarr\n     * @param {number} begin\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    static subarray(uintarr, begin, end) {\n        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n\n    /**\n     * @param {Array} list\n     * @param {number} k\n     * @yields {Array}\n     */\n    static *k_combinations(list, k) {\n        const n = list.length;\n        // Shortcut:\n        if (k > n) {\n            return;\n        }\n        const indices = Array.from(new Array(k), (x,i) => i);\n        yield indices.map(i => list[i]);\n        const reverseRange = Array.from(new Array(k), (x,i) => k-i-1);\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n            let i = k-1, found = false;\n            for (i of reverseRange) {\n                if (indices[i] !== i + n - k) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return;\n            }\n            indices[i] += 1;\n            for (const j of Array.from(new Array(k-i-1), (x,k) => i+k+1)) {\n                indices[j] = indices[j-1] + 1;\n            }\n            yield indices.map(i => list[i]);\n        }\n    }\n}\nClass.register(ArrayUtils);\n","class Assert {\n    /**\n     * @param {boolean} condition\n     * @param {string} [message]\n     * @returns {void}\n     */\n    static that(condition, message = 'Assertion failed') {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nClass.register(Assert);\n","class BufferUtils {\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toAscii(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} string\n     * @return {Uint8Array}\n     */\n    static fromAscii(string) {\n        const buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static _codePointTextDecoder(u8) {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not supprot iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } finally {\n                BufferUtils._ISO_8859_15_DECODER = null;\n            }\n        }\n        return BufferUtils._ISO_8859_15_DECODER.decode(u8)\n            .replace('€', '¤').replace('Š', '¦').replace('š', '¨').replace('Ž', '´')\n            .replace('ž', '¸').replace('Œ', '¼').replace('œ', '½').replace('Ÿ', '¾');\n    }\n\n    static _tripletToBase64(num) {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8, start, end) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64(buffer) {\n        if (PlatformUtils.isNodeJs()) {\n            return Buffer.from(buffer).toString('base64');\n        } else if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(new Uint8Array(buffer)));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64Url(buffer) {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '.');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64Url(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64.replace(/_/g, '/').replace(/-/g, '+').replace(/\\./g, '=')), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @param {string} [alphabet] Alphabet to use\n     * @return {string}\n     */\n    static toBase32(buf, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        let shift = 3, carry = 0, byte, symbol, i, res = '';\n\n        for (i = 0; i < buf.length; i++) {\n            byte = buf[i];\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n\n    /**\n     * @param {string} base32\n     * @param {string} [alphabet] Alphabet to use\n     * @return {Uint8Array}\n     */\n    static fromBase32(base32, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        const charmap = [];\n        alphabet.toUpperCase().split('').forEach((c, i) => {\n            if (!(c in charmap)) charmap[c] = i;\n        });\n\n        let symbol, shift = 8, carry = 0, buf = [];\n        base32.toUpperCase().split('').forEach((char) => {\n            // ignore padding\n            if (alphabet.length === 33 && char === alphabet[32]) return;\n\n            symbol = charmap[char] & 0xff;\n\n            shift -= 5;\n            if (shift > 0) {\n                carry |= symbol << shift;\n            } else if (shift < 0) {\n                buf.push(carry | (symbol >> -shift));\n                shift += 8;\n                carry = (symbol << shift) & 0xff;\n            } else {\n                buf.push(carry | symbol);\n                shift = 8;\n                carry = 0;\n            }\n        });\n\n        if (shift !== 8 && carry !== 0) {\n            buf.push(carry);\n        }\n\n        return new Uint8Array(buf);\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toHex(buffer) {\n        let hex = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            hex += BufferUtils.HEX_ALPHABET[code >>> 4];\n            hex += BufferUtils.HEX_ALPHABET[code & 0x0F];\n        }\n        return hex;\n    }\n\n    /**\n     * @param {string} hex\n     * @return {SerialBuffer}\n     */\n    static fromHex(hex) {\n        hex = hex.trim();\n        if (!StringUtils.isHexBytes(hex)) return null;\n        return new SerialBuffer(Uint8Array.from(hex.match(/.{2}/g) || [], byte => parseInt(byte, 16)));\n    }\n\n    /**\n     * @param {*} bytes\n     * @return {string}\n     */\n    static toBinary(buffer) {\n        let bin = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            bin += StringUtils.lpad(code.toString(2), '0', 8);\n        }\n        return bin;\n    }\n\n    /**\n     * @template T\n     * @param {T} a\n     * @param {*} b\n     * @return {T}\n     */\n    static concatTypedArrays(a, b) {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        if (a.length !== b.length) return false;\n        const viewA = new Uint8Array(a);\n        const viewB = new Uint8Array(b);\n        for (let i = 0; i < a.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {number} -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a, b) {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @return {Uint8Array}\n     */\n    static xor(a, b) {\n        const res = new Uint8Array(a.byteLength);\n        for (let i = 0; i < a.byteLength; ++i) {\n            res[i] = a[i] ^ b[i];\n        }\n        return res;\n    }\n}\nBufferUtils.BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nBufferUtils.BASE32_ALPHABET = {\n    RFC4648: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    RFC4648_HEX: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    NIMIQ: '0123456789ABCDEFGHJKLMNPQRSTUVXY'\n};\nBufferUtils.HEX_ALPHABET = '0123456789abcdef';\nBufferUtils._BASE64_LOOKUP = [];\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\n\nClass.register(BufferUtils);\n","class SerialBuffer extends Uint8Array {\n    /**\n     * @param {*} bufferOrArrayOrLength\n     */\n    constructor(bufferOrArrayOrLength) {\n        super(bufferOrArrayOrLength);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} start\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    subarray(start, end) {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    /** @type {number} */\n    get readPos() {\n        return this._readPos;\n    }\n\n    /** @type {number} */\n    set readPos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid readPos ${value}`;\n        this._readPos = value;\n    }\n\n    /** @type {number} */\n    get writePos() {\n        return this._writePos;\n    }\n\n    /** @type {number} */\n    set writePos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid writePos ${value}`;\n        this._writePos = value;\n    }\n\n    /**\n     * Resets the read and write position of the buffer to zero.\n     * @returns {void}\n     */\n    reset() {\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} length\n     * @return {Uint8Array}\n     */\n    read(length) {\n        const value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return new Uint8Array(value);\n    }\n\n    /**\n     * @param {*} array\n     */\n    write(array) {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint8() {\n        return this._view.getUint8(this._readPos++);\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint8(value) {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint16() {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint16(value) {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint32() {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint32(value) {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint64() {\n        const value = this._view.getUint32(this._readPos) * Math.pow(2, 32) + this._view.getUint32(this._readPos + 4);\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint64(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._view.setUint32(this._writePos, Math.floor(value / Math.pow(2, 32)));\n        this._view.setUint32(this._writePos + 4, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @return {number}\n     */\n    readVarUint() {\n        const value = this.readUint8();\n        if (value < 0xFD) {\n            return value;\n        } else if (value === 0xFD) {\n            return this.readUint16();\n        } else if (value === 0xFE) {\n            return this.readUint32();\n        } else /*if (value === 0xFF)*/ {\n            return this.readUint64();\n        }\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeVarUint(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            this.writeUint8(value);\n        } else if (value <= 0xFFFF) {\n            this.writeUint8(0xFD);\n            this.writeUint16(value);\n        } else if (value <= 0xFFFFFFFF) {\n            this.writeUint8(0xFE);\n            this.writeUint32(value);\n        } else {\n            this.writeUint8(0xFF);\n            this.writeUint64(value);\n        }\n    }\n\n    /**\n     * @param {number} value\n     * @returns {number}\n     */\n    static varUintSize(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            return 1;\n        } else if (value <= 0xFFFF) {\n            return 3;\n        } else if (value <= 0xFFFFFFFF) {\n            return 5;\n        } else {\n            return 9;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    readFloat64() {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeFloat64(value) {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readString(length) {\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writeString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length !== length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readPaddedString(length) {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] !== 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writePaddedString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    /**\n     * @return {string}\n     */\n    readVarLengthString() {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw 'Malformed length';\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     */\n    writeVarLengthString(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {number}\n     */\n    static varLengthStringSize(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        return /*length*/ 1 + value.length;\n    }\n}\nClass.register(SerialBuffer);\n","class CRC8 {\n    // Adapted from https://github.com/mode80/crc8js\n    static _createTable() {\n        // Create a lookup table byte array\n        const table = []; // 256 max len byte array\n\n        for (let i = 0; i < 256; ++i) {\n            let curr = i;\n            for (let j = 0; j < 8; ++j) {\n                if ((curr & 0x80) !== 0) {\n                    curr = ((curr << 1) ^ 0x97) % 256; // Polynomial C2 by Baicheva98\n                } else {\n                    curr = (curr << 1) % 256;\n                }\n            }\n            table[i] = curr;\n        }\n        return table;\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @return {number}\n     */\n    static compute(buf) {\n        if (!CRC8._table) CRC8._table = CRC8._createTable();\n        // Calculate the 8-bit checksum given an array of byte-sized numbers\n        let c = 0;\n        for (let i = 0; i < buf.length; i++) {\n            c = CRC8._table[(c ^ buf[i]) % 256];\n        }\n        return c;\n    }\n}\nCRC8._table = null;\nClass.register(CRC8);\n",";(function (globalObject) {\n    'use strict';\n\n    /*\n     *      bignumber.js v7.0.1\n     *      A JavaScript library for arbitrary-precision arithmetic.\n     *      https://github.com/MikeMcl/bignumber.js\n     *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n     *      MIT Licensed.\n     *\n     *      BigNumber.prototype methods     |  BigNumber methods\n     *                                      |\n     *      absoluteValue            abs    |  clone\n     *      comparedTo                      |  config               set\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\n     *      dividedBy                div    |      ROUNDING_MODE\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\n     *      exponentiatedBy          pow    |      RANGE\n     *      integerValue                    |      CRYPTO\n     *      isEqualTo                eq     |      MODULO_MODE\n     *      isFinite                        |      POW_PRECISION\n     *      isGreaterThan            gt     |      FORMAT\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\n     *      isInteger                       |  isBigNumber\n     *      isLessThan               lt     |  maximum              max\n     *      isLessThanOrEqualTo      lte    |  minimum              min\n     *      isNaN                           |  random\n     *      isNegative                      |\n     *      isPositive                      |\n     *      isZero                          |\n     *      minus                           |\n     *      modulo                   mod    |\n     *      multipliedBy             times  |\n     *      negated                         |\n     *      plus                            |\n     *      precision                sd     |\n     *      shiftedBy                       |\n     *      squareRoot               sqrt   |\n     *      toExponential                   |\n     *      toFixed                         |\n     *      toFormat                        |\n     *      toFraction                      |\n     *      toJSON                          |\n     *      toNumber                        |\n     *      toPrecision                     |\n     *      toString                        |\n     *      valueOf                         |\n     *\n     */\n\n\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        // EDITABLE\n        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n        // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function clone(configObject) {\n        var div, convertBase, parseNumeric,\n            P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n            ONE = new BigNumber(1),\n\n\n            //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n            // The default values below must be integers within the inclusive ranges stated.\n            // The values can also be changed at run-time using BigNumber.set.\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            // The rounding mode used when rounding to the above decimal places, and when using\n            // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n            // UP         0 Away from zero.\n            // DOWN       1 Towards zero.\n            // CEIL       2 Towards +Infinity.\n            // FLOOR      3 Towards -Infinity.\n            // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n            // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n            // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n            // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n            // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            // The modulo mode used when calculating the modulus: a mod n.\n            // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n            // The remainder (r) is calculated as: r = a - n * q.\n            //\n            // UP        0 The remainder is positive if the dividend is negative, else is negative.\n            // DOWN      1 The remainder has the same sign as the dividend.\n            //             This modulo mode is commonly known as 'truncated division' and is\n            //             equivalent to (a % n) in JavaScript.\n            // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n            // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n            // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n            //             The remainder is always positive.\n            //\n            // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n            // modes are commonly used for the modulus operation.\n            // Although the other rounding modes can also be used, they may not give useful results.\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the exponentiatedBy operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 0,                    // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            },\n\n            // The alphabet used for base conversion.\n            // It must be at least 2 characters long, with no '.' or repeated character.\n            // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n            ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n\n        //------------------------------------------------------------------------------------------\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\n         */\n        function BigNumber(n, b) {\n            var alphabet, c, e, i, isNum, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if (!(x instanceof BigNumber)) {\n\n                // Don't throw on constructor call without new (#81).\n                // '[BigNumber Error] Constructor call without new: {n}'\n                //throw Error(bignumberError + ' Constructor call without new: ' + n);\n                return new BigNumber(n, b);\n            }\n\n            if (b == null) {\n\n                // Duplicate.\n                if (n instanceof BigNumber) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = (n = n.c) ? n.slice() : n;\n                    return;\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum && n * 0 == 0) {\n\n                    // Use `1 / n` to handle minus zero also.\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n                    // Faster path for integers.\n                    if (n === ~~n) {\n                        for (e = 0, i = n; i >= 10; i /= 10, e++);\n                        x.e = e;\n                        x.c = [n];\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\n                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n                }\n\n            } else {\n\n                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n                intCheck(b, 2, ALPHABET.length, 'Base');\n                str = n + '';\n\n                // Allow exponential notation to be used with base 10 argument, while\n                // also rounding to DECIMAL_PLACES as with other bases.\n                if (b == 10) {\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum) {\n\n                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                    if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                    if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n                        throw Error\n                        (tooManyDigits + n);\n                    }\n\n                    // Prevent later check for length on converted number.\n                    isNum = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n\n                    // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                    if (b > 10 && b < 37) str = str.toLowerCase();\n                }\n\n                alphabet = ALPHABET.slice(0, b);\n                e = i = 0;\n\n                // Check that str is a valid base b number.\n                // Don't use RegExp so alphabet can contain special characters.\n                for (len = str.length; i < len; i++) {\n                    if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n                        if (c == '.') {\n\n                            // If '.' is not the first character and it has not be found before.\n                            if (i > e) {\n                                e = len;\n                                continue;\n                            }\n                        }\n\n                        return parseNumeric(x, n + '', isNum, b);\n                    }\n                }\n\n                str = convertBase(str, b, 10, x.s);\n            }\n\n            // Decimal point?\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for (i = 0; str.charCodeAt(i) === 48; i++);\n\n            // Determine trailing zeros.\n            for (len = str.length; str.charCodeAt(--len) === 48;);\n\n            str = str.slice(i, ++len);\n\n            if (str) {\n                len -= i;\n\n                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                if (isNum && BigNumber.DEBUG &&\n                    len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n                    throw Error\n                    (tooManyDigits + (x.s * n));\n                }\n\n                e = e - i - 1;\n\n                // Overflow?\n                if (e > MAX_EXP) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                    // Underflow?\n                } else if (e < MIN_EXP) {\n\n                    // Zero.\n                    x.c = [x.e = 0];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = (e + 1) % LOG_BASE;\n                    if (e < 0) i += LOG_BASE;\n\n                    if (i < len) {\n                        if (i) x.c.push(+str.slice(0, i));\n\n                        for (len -= LOG_BASE; i < len;) {\n                            x.c.push(+str.slice(i, i += LOG_BASE));\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for (; i--; str += '0');\n                    x.c.push(+str);\n                }\n            } else {\n\n                // Zero.\n                x.c = [x.e = 0];\n            }\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.clone = clone;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object with the following optional properties (if the value of a property is\n         * a number, it must be an integer within the inclusive range stated):\n         *\n         *   DECIMAL_PLACES   {number}           0 to MAX\n         *   ROUNDING_MODE    {number}           0 to 8\n         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\n         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\n         *   CRYPTO           {boolean}          true or false\n         *   MODULO_MODE      {number}           0 to 9\n         *   POW_PRECISION       {number}           0 to MAX\n         *   ALPHABET         {string}           A string of two or more unique characters, and not\n         *                                       containing '.'. The empty string, null or undefined\n         *                                       resets the alphabet to its default value.\n         *   FORMAT           {object}           An object with some of the following properties:\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined, except for ALPHABET.\n         *\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = BigNumber.set = function (obj) {\n            var p, v;\n\n            if (obj != null) {\n\n                if (typeof obj == 'object') {\n\n                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        DECIMAL_PLACES = v;\n                    }\n\n                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 8, p);\n                        ROUNDING_MODE = v;\n                    }\n\n                    // EXPONENTIAL_AT {number|number[]}\n                    // Integer, -MAX to MAX inclusive or\n                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, 0, p);\n                            intCheck(v[1], 0, MAX, p);\n                            TO_EXP_NEG = v[0];\n                            TO_EXP_POS = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n                        }\n                    }\n\n                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n                    if (obj.hasOwnProperty(p = 'RANGE')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, -1, p);\n                            intCheck(v[1], 1, MAX, p);\n                            MIN_EXP = v[0];\n                            MAX_EXP = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            if (v) {\n                                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                            } else {\n                                throw Error\n                                (bignumberError + p + ' cannot be zero: ' + v);\n                            }\n                        }\n                    }\n\n                    // CRYPTO {boolean} true or false.\n                    // '[BigNumber Error] CRYPTO not true or false: {v}'\n                    // '[BigNumber Error] crypto unavailable'\n                    if (obj.hasOwnProperty(p = 'CRYPTO')) {\n                        v = obj[p];\n                        if (v === !!v) {\n                            if (v) {\n                                if (typeof crypto != 'undefined' && crypto &&\n                                    (crypto.getRandomValues || crypto.randomBytes)) {\n                                    CRYPTO = v;\n                                } else {\n                                    CRYPTO = !v;\n                                    throw Error\n                                    (bignumberError + 'crypto unavailable');\n                                }\n                            } else {\n                                CRYPTO = v;\n                            }\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' not true or false: ' + v);\n                        }\n                    }\n\n                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 9, p);\n                        MODULO_MODE = v;\n                    }\n\n                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        POW_PRECISION = v;\n                    }\n\n                    // FORMAT {object}\n                    // '[BigNumber Error] FORMAT not an object: {v}'\n                    if (obj.hasOwnProperty(p = 'FORMAT')) {\n                        v = obj[p];\n                        if (typeof v == 'object') FORMAT = v;\n                        else throw Error\n                        (bignumberError + p + ' not an object: ' + v);\n                    }\n\n                    // ALPHABET {string}\n                    // '[BigNumber Error] ALPHABET invalid: {v}'\n                    if (obj.hasOwnProperty(p = 'ALPHABET')) {\n                        v = obj[p];\n\n                        // Disallow if only one character, or contains '.' or a repeated character.\n                        if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\n                            ALPHABET = v;\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' invalid: ' + v);\n                        }\n                    }\n\n                } else {\n\n                    // '[BigNumber Error] Object expected: {v}'\n                    throw Error\n                    (bignumberError + 'Object expected: ' + obj);\n                }\n            }\n\n            return {\n                DECIMAL_PLACES: DECIMAL_PLACES,\n                ROUNDING_MODE: ROUNDING_MODE,\n                EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n                RANGE: [MIN_EXP, MAX_EXP],\n                CRYPTO: CRYPTO,\n                MODULO_MODE: MODULO_MODE,\n                POW_PRECISION: POW_PRECISION,\n                FORMAT: FORMAT,\n                ALPHABET: ALPHABET\n            };\n        };\n\n\n        /*\n         * Return true if v is a BigNumber instance, otherwise return false.\n         *\n         * v {any}\n         */\n        BigNumber.isBigNumber = function (v) {\n            return v instanceof BigNumber || v && v._isBigNumber === true || false;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.maximum = BigNumber.max = function () {\n            return maxOrMin(arguments, P.lt);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.minimum = BigNumber.min = function () {\n            return maxOrMin(arguments, P.gt);\n        };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\n         * '[BigNumber Error] crypto unavailable'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n                ? function () { return mathfloor(Math.random() * pow2_53); }\n                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                    (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                if (dp == null) dp = DECIMAL_PLACES;\n                else intCheck(dp, 0, MAX);\n\n                k = mathceil(dp / LOG_BASE);\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if (crypto.getRandomValues) {\n\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n                        for (; i < k;) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if (v >= 9e15) {\n                                b = crypto.getRandomValues(new Uint32Array(2));\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                        // Node.js supporting crypto.randomBytes.\n                    } else if (crypto.randomBytes) {\n\n                        // buffer\n                        a = crypto.randomBytes(k *= 7);\n\n                        for (; i < k;) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\n                                (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\n                                (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                            if (v >= 9e15) {\n                                crypto.randomBytes(7).copy(a, i);\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else {\n                        CRYPTO = false;\n                        throw Error\n                        (bignumberError + 'crypto unavailable');\n                    }\n                }\n\n                // Use Math.random.\n                if (!CRYPTO) {\n\n                    for (; i < k;) {\n                        v = random53bitInt();\n                        if (v < 9e15) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if (k && dp) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor(k / v) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for (; c[i] === 0; c.pop(), i--);\n\n                // Zero?\n                if (i < 0) {\n                    c = [e = 0];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Called by BigNumber and BigNumber.prototype.toString.\n        convertBase = (function () {\n            var decimal = '0123456789';\n\n            /*\n             * Convert string of baseIn to an array of numbers of baseOut.\n             * Eg. toBaseOut('255', 10, 16) returns [15, 15].\n             * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\n             */\n            function toBaseOut(str, baseIn, baseOut, alphabet) {\n                var j,\n                    arr = [0],\n                    arrL,\n                    i = 0,\n                    len = str.length;\n\n                for (; i < len;) {\n                    for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n                    arr[0] += alphabet.indexOf(str.charAt(i++));\n\n                    for (j = 0; j < arr.length; j++) {\n\n                        if (arr[j] > baseOut - 1) {\n                            if (arr[j + 1] == null) arr[j + 1] = 0;\n                            arr[j + 1] += arr[j] / baseOut | 0;\n                            arr[j] %= baseOut;\n                        }\n                    }\n                }\n\n                return arr.reverse();\n            }\n\n            // Convert a numeric string of baseIn to a numeric string of baseOut.\n            // If the caller is toString, we are converting from base 10 to baseOut.\n            // If the caller is BigNumber, we are converting from baseIn to base 10.\n            return function (str, baseIn, baseOut, sign, callerIsToString) {\n                var alphabet, d, e, k, r, x, xc, y,\n                    i = str.indexOf('.'),\n                    dp = DECIMAL_PLACES,\n                    rm = ROUNDING_MODE;\n\n                // Non-integer.\n                if (i >= 0) {\n                    k = POW_PRECISION;\n\n                    // Unlimited precision.\n                    POW_PRECISION = 0;\n                    str = str.replace('.', '');\n                    y = new BigNumber(baseIn);\n                    x = y.pow(str.length - i);\n                    POW_PRECISION = k;\n\n                    // Convert str as if an integer, then restore the fraction part by dividing the\n                    // result by its base raised to a power.\n\n                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\n                        10, baseOut, decimal);\n                    y.e = y.c.length;\n                }\n\n                // Convert the number as integer.\n\n                xc = toBaseOut(str, baseIn, baseOut, callerIsToString\n                    ? (alphabet = ALPHABET, decimal)\n                    : (alphabet = decimal, ALPHABET));\n\n                // xc now represents str as an integer and converted to baseOut. e is the exponent.\n                e = k = xc.length;\n\n                // Remove trailing zeros.\n                for (; xc[--k] == 0; xc.pop());\n\n                // Zero?\n                if (!xc[0]) return alphabet.charAt(0);\n\n                // Does str represent an integer? If so, no need for the division.\n                if (i < 0) {\n                    --e;\n                } else {\n                    x.c = xc;\n                    x.e = e;\n\n                    // The sign is needed for correct rounding.\n                    x.s = sign;\n                    x = div(x, y, dp, rm, baseOut);\n                    xc = x.c;\n                    r = x.r;\n                    e = x.e;\n                }\n\n                // xc now represents str converted to baseOut.\n\n                // THe index of the rounding digit.\n                d = e + dp + 1;\n\n                // The rounding digit: the digit to the right of the digit that may be rounded up.\n                i = xc[d];\n\n                // Look at the rounding digits and mode to determine whether to round up.\n\n                k = baseOut / 2;\n                r = r || d < 0 || xc[d + 1] != null;\n\n                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                    : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                    rm == (x.s < 0 ? 8 : 7));\n\n                // If the index of the rounding digit is not greater than zero, or xc represents\n                // zero, then the result of the base conversion is zero or, if rounding up, a value\n                // such as 0.00001.\n                if (d < 1 || !xc[0]) {\n\n                    // 1^-dp or 0\n                    str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\n                        : alphabet.charAt(0);\n                } else {\n\n                    // Truncate xc to the required number of decimal places.\n                    xc.length = d;\n\n                    // Round up?\n                    if (r) {\n\n                        // Rounding up may mean the previous digit has to be rounded up and so on.\n                        for (--baseOut; ++xc[--d] > baseOut;) {\n                            xc[d] = 0;\n\n                            if (!d) {\n                                ++e;\n                                xc = [1].concat(xc);\n                            }\n                        }\n                    }\n\n                    // Determine trailing zeros.\n                    for (k = xc.length; !xc[--k];);\n\n                    // E.g. [4, 11, 15] becomes 4bf.\n                    for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n                    // Add leading zeros, decimal point and trailing zeros as required.\n                    str = toFixedPoint(str, e, alphabet.charAt(0));\n                }\n\n                // The caller will add the sign.\n                return str;\n            };\n        })();\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply(x, k, base) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for (x = x.slice(); i--;) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x = [carry].concat(x);\n\n                return x;\n            }\n\n            function compare(a, b, aL, bL) {\n                var i, cmp;\n\n                if (aL != bL) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for (i = cmp = 0; i < aL; i++) {\n\n                        if (a[i] != b[i]) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n\n                return cmp;\n            }\n\n            function subtract(a, b, aL, base) {\n                var i = 0;\n\n                // Subtract b from a.\n                for (; aL--;) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for (; !a[0] && a.length > 1; a.splice(0, 1));\n            }\n\n            // x: dividend, y: divisor.\n            return function (x, y, dp, rm, base) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if (!xc || !xc[0] || !yc || !yc[0]) {\n\n                    return new BigNumber(\n\n                        // Return NaN if either NaN, or both Infinity or 0.\n                        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n                            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if (!base) {\n                    base = BASE;\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n                if (yc[i] > (xc[i] || 0)) e--;\n\n                if (s < 0) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor(base / (yc[0] + 1));\n\n                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n                    if (n > 1) {\n                        yc = multiply(yc, n, base);\n                        xc = multiply(xc, n, base);\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice(0, yL);\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for (; remL < yL; rem[remL++] = 0);\n                    yz = yc.slice();\n                    yz = [0].concat(yz);\n                    yc0 = yc[0];\n                    if (yc[1] >= base / 2) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare(yc, rem, yL, remL);\n\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor(rem0 / yc0);\n\n                            //  Algorithm:\n                            //  product = divisor multiplied by trial digit (n).\n                            //  Compare product and remainder.\n                            //  If product is greater than remainder:\n                            //    Subtract divisor from product, decrement trial digit.\n                            //  Subtract product from remainder.\n                            //  If product was less than remainder at the last compare:\n                            //    Compare new remainder and divisor.\n                            //    If remainder is greater than divisor:\n                            //      Subtract divisor from remainder, increment trial digit.\n\n                            if (n > 1) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply(yc, n, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder then trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while (compare(prod, rem, prodL, remL) == 1) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if (n == 0) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if (prodL < remL) prod = [0].concat(prod);\n\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            remL = rem.length;\n\n                            // If product was < remainder.\n                            if (cmp == -1) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while (compare(yc, rem, yL, remL) < 1) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if (cmp === 0) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if (rem[0]) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [xc[xi]];\n                            remL = 1;\n                        }\n                    } while ((xi++ < xL || rem[0] != null) && s--);\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if (!qc[0]) qc.splice(0, 1);\n                }\n\n                if (base == BASE) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n                    // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n: a BigNumber.\n         * i: the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm: the rounding mode.\n         * id: 1 (toExponential) or 2 (toPrecision).\n         */\n        function format(n, i, rm, id) {\n            var c0, e, ne, len, str;\n\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n\n            if (!n.c) return n.toString();\n\n            c0 = n.c[0];\n            ne = n.e;\n\n            if (i == null) {\n                str = coeffToString(n.c);\n                str = id == 1 || id == 2 && ne <= TO_EXP_NEG\n                    ? toExponential(str, ne)\n                    : toFixedPoint(str, ne, '0');\n            } else {\n                n = round(new BigNumber(n), i, rm);\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString(n.c);\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n                    // Append zeros?\n                    for (; len < i; str += '0', len++);\n                    str = toExponential(str, e);\n\n                    // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint(str, e, '0');\n\n                    // Append zeros?\n                    if (e + 1 > len) {\n                        if (--i > 0) for (str += '.'; i--; str += '0');\n                    } else {\n                        i += e - len;\n                        if (i > 0) {\n                            if (e + 1 == len) str += '.';\n                            for (; i--; str += '0');\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin(args, method) {\n            var m, n,\n                i = 0;\n\n            if (isArray(args[0])) args = args[0];\n            m = new BigNumber(args[0]);\n\n            for (; ++i < args.length;) {\n                n = new BigNumber(args[i]);\n\n                // If any number is NaN, return NaN.\n                if (!n.s) {\n                    m = n;\n                    break;\n                } else if (method.call(m, n)) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise(n, c, e) {\n            var i = 1,\n                j = c.length;\n\n            // Remove trailing zeros.\n            for (; !c[--j]; c.pop());\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for (j = c[0]; j >= 10; j /= 10, i++);\n\n            // Overflow?\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n                // Underflow?\n            } else if (e < MIN_EXP) {\n\n                // Zero.\n                n.c = [n.e = 0];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function (x, str, isNum, b) {\n                var base,\n                    s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n                // No exception on ±Infinity or NaN.\n                if (isInfinityOrNaN.test(s)) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                    x.c = x.e = null;\n                } else {\n                    if (!isNum) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace(basePrefix, function (m, p1, p2) {\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n                        }\n\n                        if (str != s) return new BigNumber(s, base);\n                    }\n\n                    // '[BigNumber Error] Not a number: {n}'\n                    // '[BigNumber Error] Not a base {b} number: {n}'\n                    if (BigNumber.DEBUG) {\n                        throw Error\n                        (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n                    }\n\n                    // NaN\n                    x.c = x.e = x.s = null;\n                }\n            }\n        })();\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round(x, sd, rm, r) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if (i < 0) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ni = 0];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[d - j - 1] % 10 | 0;\n                    } else {\n                        ni = mathceil((i + 1) / LOG_BASE);\n\n                        if (ni >= xc.length) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for (; xc.length <= ni; xc.push(0));\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for (d = 1; k >= 10; k /= 10, d++);\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                        // Are there any non-zero digits after the rounding digit?\n                        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n                        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n                    r = rm < 4\n                        ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                        : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\n                        rm == (x.s < 0 ? 8 : 7));\n\n                    if (sd < 1 || !xc[0]) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if (i == 0) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[LOG_BASE - i];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for (; ;) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if (ni == 0) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                                j = xc[0] += k;\n                                for (k = 1; j >= 10; j /= 10, k++);\n\n                                // if i != k the length has increased.\n                                if (i != k) {\n                                    x.e++;\n                                    if (xc[0] == BASE) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if (xc[ni] != BASE) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for (i = xc.length; xc[--i] === 0; xc.pop());\n                }\n\n                // Overflow? Infinity.\n                if (x.e > MAX_EXP) {\n                    x.c = x.e = null;\n\n                    // Underflow? Zero.\n                } else if (x.e < MIN_EXP) {\n                    x.c = [x.e = 0];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if (x.s < 0) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return\n         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         *   0 if they have the same value,\n         *   or null if the value of either is NaN.\n         */\n        P.comparedTo = function (y, b) {\n            return compare(this, new BigNumber(y, b));\n        };\n\n\n        /*\n         * If dp is undefined or null or true or false, return the number of decimal places of the\n         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         *\n         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.decimalPlaces = P.dp = function (dp, rm) {\n            var c, n, v,\n                x = this;\n\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), dp + x.e + 1, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n            if (n < 0) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function (y, b) {\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.idiv = function (y, b) {\n            return div(this, new BigNumber(y, b), 0, 1);\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\n         *\n         * If m is present, return the result modulo m.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * The modular power operation works efficiently when x, n, and m are integers, otherwise it\n         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\n         *\n         * n {number|string|BigNumber} The exponent. An integer.\n         * [m] {number|string|BigNumber} The modulus.\n         *\n         * '[BigNumber Error] Exponent not an integer: {n}'\n         */\n        P.exponentiatedBy = P.pow = function (n, m) {\n            var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\n                x = this;\n\n            n = new BigNumber(n);\n\n            // Allow NaN and ±Infinity, but not other non-integers.\n            if (n.c && !n.isInteger()) {\n                throw Error\n                (bignumberError + 'Exponent not an integer: ' + n);\n            }\n\n            if (m != null) m = new BigNumber(m);\n\n            // Exponent of MAX_SAFE_INTEGER is 15.\n            nIsBig = n.e > 14;\n\n            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n                // The sign of the result of pow when x is negative depends on the evenness of n.\n                // If +n overflows to ±Infinity, the evenness of n would be not be known.\n                y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\n                return m ? y.mod(m) : y;\n            }\n\n            nIsNeg = n.s < 0;\n\n            if (m) {\n\n                // x % m returns NaN if abs(m) is zero, or m is NaN.\n                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n                isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n                if (isModExp) x = x.mod(m);\n\n                // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n                // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n                // [1, 240000000]\n                ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n                // [80000000000000]  [99999750000000]\n                : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n                // If x is negative and n is odd, k = -0, else k = 0.\n                k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n                // If x >= 1, k = ±Infinity.\n                if (x.e > -1) k = 1 / k;\n\n                // If n is negative return ±0, else return ±Infinity.\n                return new BigNumber(nIsNeg ? 1 / k : k);\n\n            } else if (POW_PRECISION) {\n\n                // Truncating each coefficient array to a length of k after each multiplication\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\n                // i.e. there will be a minimum of 28 guard digits retained.\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\n            }\n\n            if (nIsBig) {\n                half = new BigNumber(0.5);\n                nIsOdd = isOdd(n);\n            } else {\n                nIsOdd = n % 2;\n            }\n\n            if (nIsNeg) n.s = 1;\n\n            y = new BigNumber(ONE);\n\n            // Performs 54 loop iterations for n of 9007199254740991.\n            for (; ;) {\n\n                if (nIsOdd) {\n                    y = y.times(x);\n                    if (!y.c) break;\n\n                    if (k) {\n                        if (y.c.length > k) y.c.length = k;\n                    } else if (isModExp) {\n                        y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n                    }\n                }\n\n                if (nIsBig) {\n                    n = n.times(half);\n                    round(n, n.e + 1, 1);\n                    if (!n.c[0]) break;\n                    nIsBig = n.e > 14;\n                    nIsOdd = isOdd(n);\n                } else {\n                    n = mathfloor(n / 2);\n                    if (!n) break;\n                    nIsOdd = n % 2;\n                }\n\n                x = x.times(x);\n\n                if (k) {\n                    if (x.c && x.c.length > k) x.c.length = k;\n                } else if (isModExp) {\n                    x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n                }\n            }\n\n            if (isModExp) return y;\n            if (nIsNeg) y = ONE.div(y);\n\n            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\n         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\n         */\n        P.integerValue = function (rm) {\n            var n = new BigNumber(this);\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n            return round(n, n.e + 1, rm);\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isEqualTo = P.eq = P.equals = function (y, b) {\n            return compare(this, new BigNumber(y, b)) === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise return false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isGreaterThan = P.gt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = function () {\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isLessThan = P.lt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isLessThanOrEqualTo = P.lte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise return false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise return false.\n         */\n        P.isNegative = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is positive, otherwise return false.\n         */\n        P.isPositive = function () {\n            return this.s > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = function (y, b) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Either Infinity?\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n                // Either zero?\n                if (!xc[0] || !yc[0]) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                        ROUNDING_MODE == 3 ? -0 : 0);\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if (a = xe - ye) {\n\n                if (xLTy = a < 0) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for (b = a; b--; t.push(0));\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n                for (a = b = 0; b < j; b++) {\n\n                    if (xc[b] != yc[b]) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = (j = yc.length) - (i = xc.length);\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if (b > 0) for (; b--; xc[i++] = 0);\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for (; j > a;) {\n\n                if (xc[--j] < yc[j]) {\n                    for (i = j; i && !xc[--i]; xc[i] = b);\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n            // Zero?\n            if (!xc[0]) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [y.e = 0];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function (y, b) {\n            var q, s,\n                x = this;\n\n            y = new BigNumber(y, b);\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if (!x.c || !y.s || y.c && !y.c[0]) {\n                return new BigNumber(NaN);\n\n                // Return x if y is Infinity or x is zero.\n            } else if (!y.c || x.c && !x.c[0]) {\n                return new BigNumber(x);\n            }\n\n            if (MODULO_MODE == 9) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div(x, y, 0, 3);\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div(x, y, 0, MODULO_MODE);\n            }\n\n            y = x.minus(q.times(y));\n\n            // To match JavaScript %, ensure sign of zero is sign of dividend.\n            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n            return y;\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\n         * of BigNumber(y, b).\n         */\n        P.multipliedBy = P.times = function (y, b) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = (y = new BigNumber(y, b)).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if (!xc || !yc || !xc[0] || !yc[0]) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if (!xc || !yc) {\n                        y.c = y.e = null;\n\n                        // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for (i = ycL; --i >= 0;) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for (k = xcL, j = i + k; j > i;) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.splice(0, 1);\n            }\n\n            return normalise(y, zc, e);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = function (y, b) {\n            var t,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Return ±Infinity if either ±Infinity.\n                if (!xc || !yc) return new BigNumber(a / 0);\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if (a = xe - ye) {\n                if (a > 0) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for (; a--; t.push(0));\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for (a = 0; b;) {\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n            }\n\n            if (a) {\n                xc = [a].concat(xc);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         * If sd is undefined or null or true or false, return the number of significant digits of\n         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         * If sd is true include integer-part trailing zeros in the count.\n         *\n         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\n         *                     boolean: whether to count integer-part trailing zeros: true or false.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.precision = P.sd = function (sd, rm) {\n            var c, n, v,\n                x = this;\n\n            if (sd != null && sd !== !!sd) {\n                intCheck(sd, 1, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), sd, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if (v = c[v]) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for (; v % 10 == 0; v /= 10, n--);\n\n                // Add the number of digits of the first element.\n                for (v = c[0]; v >= 10; v /= 10, n++);\n            }\n\n            if (sd && x.e + 1 > n) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\n         */\n        P.shiftedBy = function (k) {\n            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n            return this.times('1e' + k);\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt(N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt(I) =  I\n         *  sqrt(0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if (s !== 1 || !c || !c[0]) {\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n            }\n\n            // Initial estimate.\n            s = Math.sqrt(+x);\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if (s == 0 || s == 1 / 0) {\n                n = coeffToString(c);\n                if ((n.length + e) % 2 == 0) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n                if (s == 1 / 0) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber(s + '');\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if (r.c[0]) {\n                e = r.e;\n                s = e + dp;\n                if (s < 3) s = 0;\n\n                // Newton-Raphson iteration.\n                for (; ;) {\n                    t = r;\n                    r = half.times(t.plus(div(x, t, dp, 1)));\n\n                    if (coeffToString(t.c  ).slice(0, s) === (n =\n                        coeffToString(r.c)).slice(0, s)) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if (r.e < e) --s;\n                        n = n.slice(s - 3, s + 1);\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if (n == '9999' || !rep && n == '4999') {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if (!rep) {\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                                if (t.times(t).eq(x)) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                                // Truncate to the first rounding digit.\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toExponential = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp++;\n            }\n            return format(this, dp, rm, 1);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFixed = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp = dp + this.e + 1;\n            }\n            return format(this, dp, rm);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.set).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFormat = function (dp, rm) {\n            var str = this.toFixed(dp, rm);\n\n            if (this.c) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if (g1 > 0 && len > 0) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr(0, i);\n\n                    for (; i < len; i += g1) {\n                        intPart += groupSeparator + intDigits.substr(i, g1);\n                    }\n\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                    ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\n                    ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\n                        '$&' + FORMAT.fractionGroupSeparator)\n                    : fractionPart)\n                    : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\n         *\n         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\n                x = this,\n                xc = x.c;\n\n            if (md != null) {\n                n = new BigNumber(md);\n\n                // Throw if md is less than one or is not an integer, unless it is Infinity.\n                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n                    throw Error\n                    (bignumberError + 'Argument ' +\n                        (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\n                }\n            }\n\n            if (!xc) return x.toString();\n\n            d = new BigNumber(ONE);\n            n1 = d0 = new BigNumber(ONE);\n            d1 = n0 = new BigNumber(ONE);\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n            md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for (; ;)  {\n                q = div(n, d, 0, 1);\n                d2 = d0.plus(q.times(d1));\n                if (d2.comparedTo(md) == 1) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus(q.times(d2 = n1));\n                n0 = d2;\n                d = n.minus(q.times(d2 = d));\n                n = d2;\n            }\n\n            d2 = div(md.minus(d0), d1, 0, 1);\n            n0 = n0.plus(d2.times(n1));\n            d0 = d0.plus(d2.times(d1));\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\n                div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\n                ? [n1.toString(), d1.toString()]\n                : [n0.toString(), d0.toString()];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            return +this;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.toPrecision = function (sd, rm) {\n            if (sd != null) intCheck(sd, 1, MAX);\n            return format(this, sd, rm, 2);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to ALPHABET.length inclusive.\n         *\n         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if (e === null) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if (s < 0) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString(n.c);\n\n                if (b == null) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                        ? toExponential(str, e)\n                        : toFixedPoint(str, e, '0');\n                } else {\n                    intCheck(b, 2, ALPHABET.length, 'Base');\n                    str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n                }\n\n                if (s < 0 && n.c[0]) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return as toString, but do not accept a base argument, and include the minus sign for\n         * negative zero.\n         */\n        P.valueOf = P.toJSON = function () {\n            var str,\n                n = this,\n                e = n.e;\n\n            if (e === null) return n.toString();\n\n            str = coeffToString(n.c);\n\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                ? toExponential(str, e)\n                : toFixedPoint(str, e, '0');\n\n            return n.s < 0 ? '-' + str : str;\n        };\n\n\n        P._isBigNumber = true;\n\n        if (configObject != null) BigNumber.set(configObject);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for (; i < j;) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for (; z--; s = '0' + s);\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for (j = r.length; r.charCodeAt(--j) === 48;);\n        return r.slice(0, j + 1 || 1);\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare(x, y) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if (!i || !j) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if (a || b) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if (i != j) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if (!b) return k > l ^ a ? 1 : -1;\n\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n\n        // Compare digit by digit.\n        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\n     */\n    function intCheck(n, min, max, name) {\n        if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n            throw Error\n            (bignumberError + (name || 'Argument') + (typeof n == 'number'\n                ? n < min || n > max ? ' out of range: ' : ' not an integer: '\n                : ' not a primitive number: ') + n);\n        }\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    // Assumes finite n.\n    function isOdd(n) {\n        var k = n.c.length - 1;\n        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n\n    function toExponential(str, e) {\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\n            (e < 0 ? 'e' : 'e+') + e;\n    }\n\n\n    function toFixedPoint(str, e, z) {\n        var len, zs;\n\n        // Negative exponent?\n        if (e < 0) {\n\n            // Prepend zeros.\n            for (zs = z + '.'; ++e; zs += z);\n            str = zs + str;\n\n            // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if (++e > len) {\n                for (zs = z, e -= len; --e; zs += z);\n                str += zs;\n            } else if (e < len) {\n                str = str.slice(0, e) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n    globalObject.BigNumber = BigNumber;\n})(Class.scope);\nBigNumber = Class.scope.BigNumber;\nBigNumber.config({ DECIMAL_PLACES: 10 });\n","class NumberUtils {\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint8(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint16(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint32(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint64(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint32() {\n        return Math.floor(Math.random() * (NumberUtils.UINT32_MAX + 1));\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint64() {\n        return Math.floor(Math.random() * (NumberUtils.UINT64_MAX + 1));\n    }\n\n    /**\n     * @param {string} bin\n     * @return {number}\n     */\n    static fromBinary(bin) {\n        return parseInt(bin, 2);\n    }\n}\n\nNumberUtils.UINT8_MAX = 255;\nNumberUtils.UINT16_MAX = 65535;\nNumberUtils.UINT32_MAX = 4294967295;\nNumberUtils.UINT64_MAX = Number.MAX_SAFE_INTEGER;\n//Object.freeze(NumberUtils);\nClass.register(NumberUtils);\n","class MerklePath {\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     */\n    constructor(nodes) {\n        if (!Array.isArray(nodes) || !NumberUtils.isUint8(nodes.length)\n            || nodes.some(it => !(it instanceof MerklePathNode))) throw new Error('Malformed nodes');\n        /**\n         * @type {Array.<MerklePathNode>}\n         * @private\n         */\n        this._nodes = nodes;\n    }\n\n    /**\n     * @param {Array} values\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerklePath}\n     */\n    static compute(values, leafValue, fnHash = MerkleTree._hash) {\n        const leafHash = fnHash(leafValue);\n        const path = [];\n        MerklePath._compute(values, leafHash, path, fnHash);\n        return new MerklePath(path);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Hash} leafHash\n     * @param {Array.<MerklePathNode>} path\n     * @param {function(o: *):Hash} fnHash\n     * @returns {{containsLeaf:boolean, inner:Hash}}\n     * @private\n     */\n    static _compute(values, leafHash, path, fnHash) {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            return {containsLeaf: hash.equals(leafHash), inner: hash};\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, inner: leftHash} = MerklePath._compute(left, leafHash, path, fnHash);\n        const {containsLeaf: rightLeaf, inner: rightHash} = MerklePath._compute(right, leafHash, path, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        if (leftLeaf) {\n            path.push(new MerklePathNode(rightHash, false));\n            return {containsLeaf: true, inner: hash};\n        } else if (rightLeaf) {\n            path.push(new MerklePathNode(leftHash, true));\n            return {containsLeaf: true, inner: hash};\n        }\n\n        return {containsLeaf: false, inner: hash};\n    }\n\n    /**\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    computeRoot(leafValue, fnHash = MerkleTree._hash) {\n        /** @type {Hash} */\n        let root = fnHash(leafValue);\n        for (const node of this._nodes) {\n            const left = node.left;\n            const hash = node.hash;\n            const concat = new SerialBuffer(hash.serializedSize * 2);\n            if (left) hash.serialize(concat);\n            root.serialize(concat);\n            if (!left) hash.serialize(concat);\n            root = Hash.light(concat);\n        }\n        return root;\n    }\n\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _compress(nodes) {\n        const count = nodes.length;\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = new Uint8Array(leftBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            if (nodes[i].left) {\n                leftBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return leftBits;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MerklePath}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint8();\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = buf.read(leftBitsSize);\n\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            const left = (leftBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            const hash = Hash.unserialize(buf);\n            nodes.push(new MerklePathNode(hash, left));\n        }\n        return new MerklePath(nodes);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._nodes.length);\n        buf.write(MerklePath._compress(this._nodes));\n\n        for (const node of this._nodes) {\n            node.hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        const leftBitsSize = Math.ceil(this._nodes.length / 8);\n        return /*count*/ 1\n            + leftBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {MerklePath} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePath\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]));\n    }\n\n    /** @type {Array.<MerklePathNode>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\nClass.register(MerklePath);\n\nclass MerklePathNode {\n    /**\n     * @param {Hash} hash\n     * @param {boolean} left\n     */\n    constructor(hash, left) {\n        this._hash = hash;\n        this._left = left;\n    }\n\n    /** @type {Hash} */\n    get hash() {\n        return this._hash;\n    }\n\n    /** @type {boolean} */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     * @param {MerklePathNode} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePathNode\n            && this._hash.equals(o.hash)\n            && this._left === o.left;\n    }\n}\nClass.register(MerklePathNode);\n","class MnemonicUtils {\n    // Adapted from https://github.com/bitcoinjs/bip39, see license below.\n\n    /**\n     * @param {Uint8Array} entropy\n     * @returns {string}\n     * @private\n     */\n    static _crcChecksum(entropy) {\n        const ENT = entropy.length * 8;\n        const CS = ENT / 32;\n        const hash = CRC8.compute(entropy);\n\n        return BufferUtils.toBinary([hash]).slice(0, CS);\n    }\n\n    /**\n     * @param {Uint8Array} entropy\n     * @returns {string}\n     * @private\n     */\n    static _sha256Checksum(entropy) {\n        const ENT = entropy.length * 8;\n        const CS = ENT / 32;\n        const hash = Hash.computeSha256(entropy);\n\n        return BufferUtils.toBinary(hash).slice(0, CS);\n    }\n\n    /**\n     * @param {Uint8Array} entropy\n     * @returns {string}\n     * @private\n     */\n    static _entropyToBits(entropy) {\n        // 128 <= ENT <= 256\n        if (entropy.length < 16) throw new Error('Invalid key, length < 16');\n        if (entropy.length > 32) throw new Error('Invalid key, length > 32');\n        if (entropy.length % 4 !== 0) throw new Error('Invalid key, length % 4 != 0');\n\n        return BufferUtils.toBinary(entropy);\n    }\n\n    /**\n     * @param {string|ArrayBuffer|Uint8Array|Entropy} entropy\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _normalizeEntropy(entropy) {\n        if (typeof entropy === 'string') entropy = BufferUtils.fromHex(entropy);\n        if (entropy instanceof Entropy) entropy = entropy.serialize();\n        if (entropy instanceof ArrayBuffer) entropy = new Uint8Array(entropy);\n        return entropy;\n    }\n\n    /**\n     * @param {string} bits\n     * @param {Array.<string>} wordlist\n     * @returns {Array.<string>}\n     */\n    static _bitsToMnemonic(bits, wordlist) {\n        const chunks = bits.match(/(.{11})/g);\n        const words = chunks.map(chunk => {\n            const index = NumberUtils.fromBinary(chunk);\n            return wordlist[index];\n        });\n\n        return words;\n    }\n\n    /**\n     * @param {Array.<string>} mnemonic\n     * @param {Array.<string>} wordlist\n     * @returns {string}\n     */\n    static _mnemonicToBits(mnemonic, wordlist) {\n        const words = mnemonic;\n        if (words.length < 12) throw new Error('Invalid mnemonic, less than 12 words');\n        if (words.length > 24) throw new Error('Invalid mnemonic, more than 24 words');\n        if (words.length % 3 !== 0) throw new Error('Invalid mnemonic, words % 3 != 0');\n\n        // Convert word indices to 11 bit binary strings\n        const bits = words.map(function (word) {\n            const index = wordlist.indexOf(word.toLowerCase());\n            if (index === -1) throw new Error(`Invalid mnemonic, word >${word}< is not in wordlist`);\n\n            return StringUtils.lpad(index.toString(2), '0', 11);\n        }).join('');\n\n        return bits;\n    }\n\n    /**\n     * @param {string} bits\n     * @param {boolean} legacy\n     * @returns {Uint8Array}\n     */\n    static _bitsToEntropy(bits, legacy = false) {\n        // Split the binary string into ENT/CS\n        const dividerIndex = bits.length - (bits.length % 8 || 8);\n        const entropyBits = bits.slice(0, dividerIndex);\n        const checksumBits = bits.slice(dividerIndex);\n\n        // Calculate the checksum and compare\n        const entropyBytes = entropyBits.match(/(.{8})/g).map(NumberUtils.fromBinary);\n\n        if (entropyBytes.length < 16) throw new Error('Invalid generated key, length < 16');\n        if (entropyBytes.length > 32) throw new Error('Invalid generated key, length > 32');\n        if (entropyBytes.length % 4 !== 0) throw new Error('Invalid generated key, length % 4 != 0');\n\n        const entropy = new Uint8Array(entropyBytes);\n        const checksum = legacy ? MnemonicUtils._crcChecksum(entropy) : MnemonicUtils._sha256Checksum(entropy);\n        if (checksum !== checksumBits) throw new Error('Invalid checksum');\n\n        return entropy;\n    }\n\n    /**\n     * @param {string|ArrayBuffer|Uint8Array|Entropy} entropy\n     * @param {Array.<string>} [wordlist]\n     * @returns {Array.<string>}\n     */\n    static entropyToMnemonic(entropy, wordlist) {\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n        entropy = MnemonicUtils._normalizeEntropy(entropy);\n\n        const entropyBits = MnemonicUtils._entropyToBits(entropy);\n        const checksumBits = MnemonicUtils._sha256Checksum(entropy);\n\n        const bits = entropyBits + checksumBits;\n        return MnemonicUtils._bitsToMnemonic(bits, wordlist);\n    }\n\n    /**\n     * @param {string|ArrayBuffer|Uint8Array|Entropy} entropy\n     * @param {Array.<string>} [wordlist]\n     * @returns {Array.<string>}\n     * @deprecated\n     */\n    static entropyToLegacyMnemonic(entropy, wordlist) {\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n        entropy = MnemonicUtils._normalizeEntropy(entropy);\n\n        const entropyBits = MnemonicUtils._entropyToBits(entropy);\n        const checksumBits = MnemonicUtils._crcChecksum(entropy);\n\n        const bits = entropyBits + checksumBits;\n        return MnemonicUtils._bitsToMnemonic(bits, wordlist);\n    }\n\n    /**\n     * @param {Array.<string>|string} mnemonic\n     * @param {Array.<string>} [wordlist]\n     * @returns {Entropy}\n     */\n    static mnemonicToEntropy(mnemonic, wordlist) {\n        if (!Array.isArray(mnemonic)) mnemonic = mnemonic.trim().split(/\\s+/g);\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n\n        const bits = MnemonicUtils._mnemonicToBits(mnemonic, wordlist);\n        return new Entropy(MnemonicUtils._bitsToEntropy(bits, false));\n    }\n\n    /**\n     * @param {Array.<string>|string} mnemonic\n     * @param {Array.<string>} [wordlist]\n     * @returns {Entropy}\n     * @deprecated\n     */\n    static legacyMnemonicToEntropy(mnemonic, wordlist) {\n        if (!Array.isArray(mnemonic)) mnemonic = mnemonic.trim().split(/\\s+/g);\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n\n        const bits = MnemonicUtils._mnemonicToBits(mnemonic, wordlist);\n        return new Entropy(MnemonicUtils._bitsToEntropy(bits, true));\n    }\n\n    /**\n     * @param {string} password\n     * @returns {string}\n     * @private\n     */\n    static _salt(password) {\n        return `mnemonic${password || ''}`;\n    }\n\n    /**\n     * @param {string|Array.<string>} mnemonic\n     * @param {string} [password]\n     * @returns {Uint8Array}\n     */\n    static mnemonicToSeed(mnemonic, password) {\n        if (Array.isArray(mnemonic)) mnemonic = mnemonic.join(' ');\n\n        const mnemonicBuffer = BufferUtils.fromAscii(mnemonic);\n        const saltBuffer = BufferUtils.fromAscii(MnemonicUtils._salt(password));\n\n        return CryptoUtils.computePBKDF2sha512(mnemonicBuffer, saltBuffer, 2048, 64);\n    }\n\n    /**\n     * @param {string|Array.<string>} mnemonic\n     * @param {string} [password]\n     * @returns {ExtendedPrivateKey}\n     */\n    static mnemonicToExtendedPrivateKey(mnemonic, password) {\n        const seed = MnemonicUtils.mnemonicToSeed(mnemonic, password);\n        return ExtendedPrivateKey.generateMasterKey(seed);\n    }\n\n    /**\n     * @param {Entropy} entropy\n     * @returns {boolean}\n     */\n    static isCollidingChecksum(entropy) {\n        const normalizedEntropy = MnemonicUtils._normalizeEntropy(entropy);\n        return MnemonicUtils._crcChecksum(normalizedEntropy) === MnemonicUtils._sha256Checksum(normalizedEntropy);\n    }\n\n    /**\n     * @param {string|Array.<string>} mnemonic\n     * @param {Array.<string>} [wordlist]\n     * @returns {MnemonicUtils.MnemonicType}\n     */\n    static getMnemonicType(mnemonic, wordlist) {\n        if (!Array.isArray(mnemonic)) mnemonic = mnemonic.trim().split(/\\s+/g);\n\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n\n        const bits = MnemonicUtils._mnemonicToBits(mnemonic, wordlist);\n\n        let isBIP39 = true;\n        try { MnemonicUtils._bitsToEntropy(bits, false); } catch (e) { isBIP39 = false; }\n        let isLegacy = true;\n        try { MnemonicUtils._bitsToEntropy(bits, true); } catch (e) { isLegacy = false; }\n\n        if (isBIP39 && isLegacy) return MnemonicUtils.MnemonicType.UNKNOWN;\n        if (!isBIP39 && !isLegacy) throw new Error('Invalid checksum');\n        return isBIP39 ? MnemonicUtils.MnemonicType.BIP39 : MnemonicUtils.MnemonicType.LEGACY;\n    }\n}\n\nMnemonicUtils.ENGLISH_WORDLIST = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air', 'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost', 'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused', 'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual', 'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple', 'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around', 'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault', 'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract', 'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake', 'aware', 'away', 'awesome', 'awful', 'awkward', 'axis', 'baby', 'bachelor', 'bacon', 'badge', 'bag', 'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base', 'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin', 'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between', 'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame', 'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush', 'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow', 'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze', 'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother', 'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle', 'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz', 'cabbage', 'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel', 'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card', 'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch', 'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census', 'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge', 'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child', 'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle', 'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click', 'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club', 'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect', 'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct', 'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy', 'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin', 'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy', 'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch', 'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture', 'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle', 'dad', 'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate', 'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define', 'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend', 'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy', 'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel', 'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree', 'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce', 'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door', 'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill', 'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty', 'dwarf', 'dynamic', 'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology', 'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric', 'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge', 'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy', 'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure', 'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion', 'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke', 'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise', 'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose', 'express', 'extend', 'extra', 'eye', 'eyebrow', 'fabric', 'face', 'faculty', 'fade', 'faint', 'faith', 'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal', 'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female', 'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film', 'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit', 'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock', 'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food', 'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found', 'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown', 'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future', 'gadget', 'gain', 'galaxy', 'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate', 'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant', 'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide', 'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose', 'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass', 'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess', 'guide', 'guilt', 'guitar', 'gun', 'gym', 'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy', 'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy', 'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip', 'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope', 'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble', 'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid', 'ice', 'icon', 'idea', 'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune', 'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate', 'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury', 'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install', 'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item', 'ivory', 'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke', 'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just', 'kangaroo', 'keen', 'keep', 'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten', 'kiwi', 'knee', 'knife', 'knock', 'know', 'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp', 'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit', 'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure', 'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library', 'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little', 'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery', 'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics', 'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage', 'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market', 'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze', 'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory', 'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle', 'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery', 'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor', 'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor', 'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom', 'music', 'must', 'mutual', 'myself', 'mystery', 'myth', 'naive', 'name', 'napkin', 'narrow', 'nasty', 'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest', 'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee', 'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear', 'number', 'nurse', 'nut', 'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious', 'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive', 'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose', 'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan', 'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner', 'oxygen', 'oyster', 'ozone', 'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic', 'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient', 'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen', 'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase', 'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer', 'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge', 'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool', 'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power', 'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride', 'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit', 'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public', 'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose', 'purse', 'push', 'put', 'puzzle', 'pyramid', 'quality', 'quantum', 'quarter', 'question', 'quick', 'quit', 'quiz', 'quote', 'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally', 'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready', 'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce', 'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief', 'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat', 'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire', 'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich', 'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river', 'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate', 'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural', 'sad', 'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand', 'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene', 'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea', 'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select', 'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup', 'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine', 'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug', 'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver', 'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski', 'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim', 'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap', 'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid', 'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south', 'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice', 'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray', 'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs', 'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still', 'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong', 'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such', 'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply', 'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow', 'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol', 'symptom', 'syrup', 'system', 'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target', 'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term', 'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought', 'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny', 'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet', 'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple', 'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track', 'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree', 'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true', 'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey', 'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical', 'ugly', 'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy', 'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update', 'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless', 'usual', 'utility', 'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor', 'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version', 'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village', 'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice', 'void', 'volcano', 'volume', 'vote', 'voyage', 'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want', 'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear', 'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what', 'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win', 'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf', 'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle', 'wrist', 'write', 'wrong', 'yard', 'year', 'yellow', 'you', 'young', 'youth', 'zebra', 'zero', 'zone', 'zoo'];\nMnemonicUtils.DEFAULT_WORDLIST = MnemonicUtils.ENGLISH_WORDLIST;\n\n/**\n * @enum {number}\n */\nMnemonicUtils.MnemonicType = {\n    UNKNOWN: -1,\n    LEGACY: 0,\n    BIP39: 1,\n};\n\nObject.freeze(MnemonicUtils);\n\nClass.register(MnemonicUtils);\n\n/*\nbitcoinjs/bip39 LICENSE\nCopyright (c) 2014, Wei Lu <luwei.here@gmail.com> and Daniel Cousens <email@dcousens.com>\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n","class PlatformUtils {\n    /**\n     * @returns {boolean}\n     */\n    static isBrowser() {\n        return typeof window !== 'undefined';\n    }\n\n    /**\n     * @return {boolean}\n     */\n    static isNodeJs() {\n        return !PlatformUtils.isBrowser() && typeof process === 'object' && typeof require === 'function';\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWebRTC() {\n        const RTCPeerConnection = PlatformUtils.isBrowser() ? (window.RTCPeerConnection || window.webkitRTCPeerConnection) : null;\n        return !!RTCPeerConnection;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWS() {\n        return !PlatformUtils.isBrowser() || (location && location.protocol === 'http:');\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isOnline() {\n        return (!PlatformUtils.isBrowser() || !('onLine' in window.navigator)) || window.navigator.onLine;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isWindows() {\n        return PlatformUtils.isNodeJs() && /^win/.test(process.platform);\n    }\n}\nClass.register(PlatformUtils);\n","class StringUtils {\n    /**\n     * @param {string} str\n     * @returns {boolean}\n     */\n    static isMultibyte(str) {\n        return /[\\uD800-\\uDFFF]/.test(str);\n    }\n\n    /**\n     * @param {string} str\n     * @returns {boolean}\n     */\n    static isHex(str) {\n        return /^[0-9A-Fa-f]*$/.test(str);\n    }\n\n    /**\n     * @param {string} str\n     * @param {number} [length]\n     * @returns {boolean}\n     */\n    static isHexBytes(str, length) {\n        if (!StringUtils.isHex(str)) return false;\n        if (str.length % 2 !== 0) return false;\n        if (typeof length === 'number' && str.length / 2 !== length) return false;\n        return true;\n    }\n\n    /**\n     * @param {string} str1\n     * @param {string} str2\n     * @returns {string}\n     */\n    static commonPrefix(str1, str2) {\n        let i = 0;\n        for (; i < str1.length; ++i) {\n            if (str1[i] !== str2[i]) break;\n        }\n        return str1.substr(0, i);\n    }\n\n    /**\n     * @param {string} str\n     * @param {string} padString\n     * @param {number} length\n     * @return {string}\n     */\n    static lpad(str, padString, length) {\n        while (str.length < length) str = padString + str;\n        return str;\n    }\n\n}\nClass.register(StringUtils);\n","class Policy {\n    /**\n     * Convert Nimiq decimal to Number of Satoshis.\n     * @param {number} coins Nimiq count in decimal\n     * @return {number} Number of Satoshis\n     */\n    static coinsToSatoshis(coins) {\n        return Math.round(coins * Policy.SATOSHIS_PER_COIN);\n    }\n\n    /**\n     * Convert Number of Satoshis to Nimiq decimal.\n     * @param {number} satoshis Number of Satoshis.\n     * @return {number} Nimiq count in decimal.\n     */\n    static satoshisToCoins(satoshis) {\n        return satoshis / Policy.SATOSHIS_PER_COIN;\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static supplyAfter(blockHeight) {\n        // Calculate last entry in supply cache that is below blockHeight.\n        let startHeight = Math.floor(blockHeight / Policy._supplyCacheInterval) * Policy._supplyCacheInterval;\n        startHeight = Math.max(0, Math.min(startHeight, Policy._supplyCacheMax));\n\n        // Calculate respective block for the last entry of the cache and the targeted height.\n        const startI = startHeight / Policy._supplyCacheInterval;\n        const endI = Math.floor(blockHeight / Policy._supplyCacheInterval);\n\n        // The starting supply is the initial supply at the beginning and a cached value afterwards.\n        let supply = startHeight === 0 ? Policy.INITIAL_SUPPLY : Policy._supplyCache.get(startHeight);\n        // Use and update cache.\n        for (let i = startI; i < endI; ++i) {\n            startHeight = i * Policy._supplyCacheInterval;\n            // Since the cache stores the supply *before* a certain block, subtract one.\n            const endHeight = (i + 1) * Policy._supplyCacheInterval - 1;\n            supply = Policy._supplyAfter(supply, endHeight, startHeight);\n            // Don't forget to add one again.\n            Policy._supplyCache.set(endHeight + 1, supply);\n            Policy._supplyCacheMax = endHeight + 1;\n        }\n\n        // Calculate remaining supply (this also adds the block reward for endI*interval).\n        return Policy._supplyAfter(supply, blockHeight, endI * Policy._supplyCacheInterval);\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} initialSupply\n     * @param {number} blockHeight\n     * @param {number} [startHeight]\n     * @return {number}\n     */\n    static _supplyAfter(initialSupply, blockHeight, startHeight=0) {\n        let supply = initialSupply;\n        for (let i = startHeight; i <= blockHeight; ++i) {\n            supply += Policy._blockRewardAt(supply, i);\n        }\n        return supply;\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static blockRewardAt(blockHeight) {\n        const currentSupply = Policy.supplyAfter(blockHeight - 1);\n        return Policy._blockRewardAt(currentSupply, blockHeight);\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} currentSupply\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static _blockRewardAt(currentSupply, blockHeight) {\n        if (blockHeight <= 0) return 0;\n        const remaining = Policy.TOTAL_SUPPLY - currentSupply;\n        if (blockHeight >= Policy.EMISSION_TAIL_START && remaining >= Policy.EMISSION_TAIL_REWARD) {\n            return Policy.EMISSION_TAIL_REWARD;\n        }\n        const remainder = remaining % Policy.EMISSION_SPEED;\n        return (remaining - remainder) / Policy.EMISSION_SPEED;\n    }\n}\n\n/**\n * Targeted block time in seconds.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_TIME = 60;\n\n/**\n * Maximum block size in bytes.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_SIZE_MAX = 1e5; // 100 kb\n\n/**\n * The highest (easiest) block PoW target.\n * @type {BigNumber}\n * @constant\n */\nPolicy.BLOCK_TARGET_MAX = new BigNumber(2).pow(240);\n\n/**\n * Number of blocks we take into account to calculate next difficulty.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_BLOCK_WINDOW = 120;\n\n/**\n * Limits the rate at which the difficulty is adjusted min/max.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR = 2;\n\n/**\n * Number of blocks a transaction is valid.\n * @type {number}\n * @constant\n */\nPolicy.TRANSACTION_VALIDITY_WINDOW = 120;\n\n\n/* Supply & Emission Parameters */\n\n/**\n * Number of Satoshis per Nimiq.\n * @type {number}\n * @constant\n */\nPolicy.SATOSHIS_PER_COIN = 1e5;\n\n/**\n * Targeted total supply in satoshis.\n * @type {number}\n * @constant\n */\nPolicy.TOTAL_SUPPLY = 21e14;\n\n/**\n * Initial supply before genesis block in satoshis.\n * FIXME: Change for main net.\n * @type {number}\n * @constant\n */\nPolicy.INITIAL_SUPPLY = 252000000000000;\n\n/**\n * Emission speed.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_SPEED = Math.pow(2, 22);\n\n/**\n * First block using constant tail emission until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_START = 48692960;\n\n/**\n * Constant tail emission in satoshis until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_REWARD = 4000;\n\n/* Security parameters */\n\n/**\n * NIPoPoW Security parameter M\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.M = 240;\n\n/**\n * NIPoPoW Security parameter K\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.K = 120;\n\n/**\n * NIPoPoW Security parameter DELTA\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.DELTA = 0.15;\n\n/**\n * Number of blocks the light client downloads to verify the AccountsTree construction.\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.NUM_BLOCKS_VERIFICATION = 250;\n\n\n/* Snapshot Parameters */\n\n/**\n * Maximum number of snapshots.\n * @type {number}\n * @constant\n */\nPolicy.NUM_SNAPSHOTS_MAX = 20;\n\n\n/**\n * Stores the circulating supply before the given block.\n * @type {Map.<number, number>}\n * @private\n */\nPolicy._supplyCache = new Map();\nPolicy._supplyCacheMax = 0; // blocks\nPolicy._supplyCacheInterval = 5000; // blocks\nClass.register(Policy);\n","/**\n * @abstract\n */\nclass Serializable {\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Serializable && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return BufferUtils.compare(this.serialize(), o.serialize());\n    }\n\n    hashCode() {\n        return this.toBase64();\n    }\n\n    /**\n     * @abstract\n     * @param {SerialBuffer} [buf]\n     */\n    serialize(buf) {}\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.toBase64();\n    }\n\n    /**\n     * @return {string}\n     */\n    toBase64() {\n        return BufferUtils.toBase64(this.serialize());\n    }\n\n    /**\n     * @return {string}\n     */\n    toHex() {\n        return BufferUtils.toHex(this.serialize());\n    }\n}\n\nClass.register(Serializable);\n","class Hash extends Serializable {\n    /**\n     * @param {?Uint8Array} arg\n     * @param {Hash.Algorithm} [algorithm]\n     * @private\n     */\n    constructor(arg, algorithm = Hash.Algorithm.BLAKE2B) {\n        if (arg === null) {\n            arg = new Uint8Array(Hash.getSize(algorithm));\n        } else {\n            if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n            if (arg.length !== Hash.getSize(algorithm)) throw new Error('Primitive: Invalid length');\n        }\n        super();\n        this._obj = arg;\n        /** @type {Hash.Algorithm} */\n        this._algorithm = algorithm;\n    }\n\n    /**\n     * @deprecated\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static light(arr) {\n        return Hash.blake2b(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static blake2b(arr) {\n        return new Hash(Hash.computeBlake2b(arr), Hash.Algorithm.BLAKE2B);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @deprecated\n     * @returns {Promise.<Hash>}\n     */\n    static hard(arr) {\n        return Hash.argon2d(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Promise.<Hash>}\n     */\n    static async argon2d(arr) {\n        return new Hash(await (await CryptoWorker.getInstanceAsync()).computeArgon2d(arr), Hash.Algorithm.ARGON2D);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha256(arr) {\n        return new Hash(Hash.computeSha256(arr), Hash.Algorithm.SHA256);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha512(arr) {\n        return new Hash(Hash.computeSha512(arr), Hash.Algorithm.SHA512);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @param {Hash.Algorithm} algorithm\n     * @returns {Hash}\n     */\n    static compute(arr, algorithm) {\n        // !! The algorithms supported by this function are the allowed hash algorithms for HTLCs !!\n        switch (algorithm) {\n            case Hash.Algorithm.BLAKE2B: return Hash.blake2b(arr);\n            case Hash.Algorithm.SHA256: return Hash.sha256(arr);\n            // Hash.Algorithm.SHA512 postponed until hard-fork\n            // Hash.Algorithm.ARGON2 intentionally omitted\n            default: throw new Error('Invalid hash algorithm');\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash.Algorithm} [algorithm]\n     * @returns {Hash}\n     */\n    static unserialize(buf, algorithm = Hash.Algorithm.BLAKE2B) {\n        return new Hash(buf.read(Hash.getSize(algorithm)), algorithm);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /**\n     * @param {number} begin\n     * @param {number} end\n     * @returns {Uint8Array}\n     */\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Hash.SIZE.get(this._algorithm);\n    }\n\n    /** @type {Uint8Array} */\n    get array() {\n        return this._obj;\n    }\n\n    /** @type {Hash.Algorithm} */\n    get algorithm() {\n        return this._algorithm;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Hash && o._algorithm === this._algorithm && super.equals(o);\n    }\n\n    /**\n     * @param {string} base64\n     * @returns {Hash}\n     */\n    static fromBase64(base64) {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @returns {Hash}\n     */\n    static fromHex(hex) {\n        return new Hash(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Hash}\n     */\n    static fromString(str) {\n        try {\n            return Hash.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Hash.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid hash format');\n    }\n\n    /**\n     * @param {Hash} o\n     * @returns {boolean}\n     */\n    static isHash(o) {\n        return o instanceof Hash;\n    }\n\n    /**\n     * @param {Hash.Algorithm} algorithm\n     * @returns {number}\n     */\n    static getSize(algorithm) {\n        const size = Hash.SIZE.get(algorithm);\n        if (typeof size !== 'number') throw new Error('Invalid hash algorithm');\n        return size;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeBlake2b(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.BLAKE2B));\n            NodeNative.node_blake2(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.BLAKE2B);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_blake2(wasmOut, wasmIn, input.length);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha256(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));\n            NodeNative.node_sha256(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA256);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha256(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha512(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_sha512(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha512(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\n/**\n * @enum {number}\n */\nHash.Algorithm = {\n    BLAKE2B: 1,\n    ARGON2D: 2,\n    SHA256: 3,\n    SHA512: 4\n};\n/**\n * @type {Map<Hash.Algorithm, number>}\n */\nHash.SIZE = new Map();\nHash.SIZE.set(Hash.Algorithm.BLAKE2B, 32);\nHash.SIZE.set(Hash.Algorithm.ARGON2D, 32);\nHash.SIZE.set(Hash.Algorithm.SHA256, 32);\nHash.SIZE.set(Hash.Algorithm.SHA512, 64);\n\nHash.NULL = new Hash(new Uint8Array(32));\nClass.register(Hash);\n","class PrivateKey extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PrivateKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @return {PrivateKey}\n     */\n    static generate() {\n        const privateKey = new Uint8Array(PrivateKey.SIZE);\n        CryptoWorker.lib.getRandomValues(privateKey);\n        return new PrivateKey(privateKey);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PrivateKey}\n     */\n    static unserialize(buf) {\n        return new PrivateKey(buf.read(PrivateKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PrivateKey.SIZE;\n    }\n\n    /**\n     * Overwrite this private key with a replacement in-memory\n     * @param {PrivateKey} privateKey\n     */\n    overwrite(privateKey) {\n        this._obj.set(privateKey._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PrivateKey && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _privateKeyDelinearize(privateKey, publicKey, publicKeysHash) {\n        if (privateKey.byteLength !== PrivateKey.SIZE\n            || publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_derive_delinearized_private_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPrivateKey = Module.stackAlloc(privateKey.length);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPrivateKey, privateKey.length).set(privateKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_derive_delinearized_private_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey, wasmInPrivateKey);\n                const delinearizedPrivateKey = new Uint8Array(PrivateKey.SIZE);\n                delinearizedPrivateKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PrivateKey.SIZE));\n                return delinearizedPrivateKey;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPrivateKey.SIZE = 32;\n\nClass.register(PrivateKey);\n","class PublicKey extends Serializable {\n    /**\n     * @param {PublicKey} o\n     * @returns {PublicKey}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new PublicKey(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PublicKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {PublicKey}\n     */\n    static derive(privateKey) {\n        return new PublicKey(PublicKey._publicKeyDerive(privateKey._obj));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @return {PublicKey}\n     */\n    static sum(publicKeys) {\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        return PublicKey._delinearizeAndAggregatePublicKeys(publicKeys);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PublicKey}\n     */\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PublicKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PublicKey.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PublicKey && super.equals(o);\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        return Hash.light(this.serialize());\n    }\n\n    /**\n     * @param {PublicKey} o\n     * @return {number}\n     */\n    compare(o) {\n        return BufferUtils.compare(this._obj, o._obj);\n    }\n\n    /**\n     * @return {Address}\n     */\n    toAddress() {\n        return Address.fromHash(this.hash());\n    }\n\n    /**\n     * @return {PeerId}\n     */\n    toPeerId() {\n        return new PeerId(this.hash().subarray(0, 16));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @returns {PublicKey}\n     */\n    static _delinearizeAndAggregatePublicKeys(publicKeys) {\n        const publicKeysObj = publicKeys.map(k => k.serialize());\n        const publicKeysHash = PublicKey._publicKeysHash(publicKeysObj);\n        const raw = PublicKey._publicKeysDelinearizeAndAggregate(publicKeysObj, publicKeysHash);\n        return new PublicKey(raw);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDerive(privateKey) {\n        if (privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_public_key_derive(out, new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const pubKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOut, PrivateKey.SIZE);\n                pubKeyBuffer.set(privateKey);\n                const wasmIn = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmIn, PrivateKey.SIZE);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_public_key_derive(wasmOut, wasmIn);\n                privKeyBuffer.fill(0);\n                const publicKey = new Uint8Array(PublicKey.SIZE);\n                publicKey.set(pubKeyBuffer);\n                return publicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @returns {Uint8Array}\n     */\n    static _publicKeysHash(publicKeys) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_ed25519_hash_public_keys(out, concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                Module._ed25519_hash_public_keys(wasmOut, wasmInPublicKeys, publicKeys.length);\n                const hashedPublicKey = new Uint8Array(hashSize);\n                hashedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hashedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDelinearize(publicKey, publicKeysHash) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_delinearize_public_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_delinearize_public_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey);\n                const delinearizedPublicKey = new Uint8Array(PublicKey.SIZE);\n                delinearizedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return delinearizedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeysDelinearizeAndAggregate(publicKeys, publicKeysHash) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_delinearized_public_keys(out, new Uint8Array(publicKeysHash), concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_aggregate_delinearized_public_keys(wasmOut, wasmInPublicKeysHash, wasmInPublicKeys, publicKeys.length);\n                const aggregatePublicKey = new Uint8Array(PublicKey.SIZE);\n                aggregatePublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggregatePublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPublicKey.SIZE = 32;\n\nClass.register(PublicKey);\n","class KeyPair extends Serializable {\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {boolean} locked\n     * @param {Uint8Array} lockSalt\n     * @private\n     */\n    constructor(privateKey, publicKey, locked = false, lockSalt = null) {\n        if (!(privateKey instanceof Object)) throw new Error('Primitive: Invalid type');\n        if (!(publicKey instanceof Object)) throw new Error('Primitive: Invalid type');\n        super();\n\n        /** @type {boolean} */\n        this._locked = locked;\n        /** @type {boolean} */\n        this._lockedInternally = locked;\n        /** @type {Uint8Array} */\n        this._lockSalt = lockSalt;\n        /** @type {PublicKey} */\n        this._publicKey = publicKey;\n        /** @type {PrivateKey} */\n        this._internalPrivateKey = new PrivateKey(privateKey.serialize());\n    }\n\n    /**\n     * @return {KeyPair}\n     */\n    static generate() {\n        const privateKey = PrivateKey.generate();\n        return new KeyPair(privateKey, PublicKey.derive(privateKey));\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {KeyPair}\n     */\n    static derive(privateKey) {\n        return new KeyPair(privateKey, PublicKey.derive(privateKey));\n    }\n\n    /**\n     * @param {string} hexBuf\n     * @return {KeyPair}\n     */\n    static fromHex(hexBuf) {\n        return KeyPair.unserialize(BufferUtils.fromHex(hexBuf));\n    }\n\n    /**\n     *\n     * @param {SerialBuffer} buf\n     * @param {Uint8Array} key\n     * @return {Promise<KeyPair>}\n     */\n    static async fromEncrypted(buf, key) {\n        const decryptedData = await CryptoUtils.decryptOtpKdf(buf, key);\n        return KeyPair.derive(new PrivateKey(decryptedData));\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {KeyPair}\n     */\n    static unserialize(buf) {\n        const privateKey = PrivateKey.unserialize(buf);\n        const publicKey = PublicKey.unserialize(buf);\n        let locked = false;\n        let lockSalt = null;\n        if (buf.readPos < buf.byteLength) {\n            const extra = buf.readUint8();\n            if (extra === 1) {\n                locked = true;\n                lockSalt = buf.read(32);\n            }\n        }\n        return new KeyPair(privateKey, publicKey, locked, lockSalt);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._privateKey.serialize(buf);\n        this.publicKey.serialize(buf);\n        if (this._locked) {\n            buf.writeUint8(1);\n            buf.write(this._lockSalt);\n        } else {\n            buf.writeUint8(0);\n        }\n        return buf;\n    }\n\n    /**\n     * The unlocked private key.\n     * @type {PrivateKey}\n     */\n    get privateKey() {\n        if (this.isLocked) throw new Error('Wallet is locked');\n        return this._privateKey;\n    }\n\n    /**\n     * The private key in its current state, i.e., depending on this._locked.\n     * If this._locked, it is the internally locked private key.\n     * If !this._locked, it is either the internally unlocked private key (if !this._lockedInternally)\n     * or this._unlockedPrivateKey.\n     * @type {PrivateKey}\n     */\n    get _privateKey() {\n        return this._unlockedPrivateKey || this._internalPrivateKey;\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey || (this._publicKey = new PublicKey(this._obj.publicKey));\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._privateKey.serializedSize + this.publicKey.serializedSize + (this._locked ? this._lockSalt.byteLength + 1 : 1);\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} [unlockKey]\n     * @return {Promise.<Uint8Array>}\n     */\n    async exportEncrypted(key, unlockKey) {\n        const wasLocked = this._locked;\n        if (this._locked) {\n            try {\n                await this.unlock(unlockKey || key);\n            } catch (e) {\n                throw new Error('KeyPair is locked and lock key mismatches');\n            }\n        }\n\n        const buf = CryptoUtils.encryptOtpKdf(this._privateKey.serialize(), key);\n\n        if (wasLocked) this.relock();\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get encryptedSize() {\n        return CryptoUtils.ENCRYPTION_SIZE;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} [lockSalt]\n     */\n    async lock(key, lockSalt) {\n        if (this._locked) throw new Error('KeyPair already locked');\n\n        if (lockSalt) this._lockSalt = lockSalt;\n        if (!this._lockSalt || this._lockSalt.length === 0) {\n            this._lockSalt = new Uint8Array(32);\n            CryptoWorker.lib.getRandomValues(this._lockSalt);\n        }\n\n        this._internalPrivateKey.overwrite(await this._otpPrivateKey(key));\n        this._clearUnlockedPrivateKey();\n        this._locked = true;\n        this._lockedInternally = true;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     */\n    async unlock(key) {\n        if (!this._locked) throw new Error('KeyPair not locked');\n\n        const privateKey = await this._otpPrivateKey(key);\n        const verifyPub = PublicKey.derive(privateKey);\n        if (verifyPub.equals(this.publicKey)) {\n            // Only set this._internalPrivateKey, but keep this._obj locked.\n            this._unlockedPrivateKey = privateKey;\n            this._locked = false;\n        } else {\n            throw new Error('Invalid key');\n        }\n    }\n\n    /**\n     * Destroy cached unlocked private key if the internal key is in locked state.\n     */\n    relock() {\n        if (this._locked) throw new Error('KeyPair already locked');\n        if (!this._lockedInternally) throw new Error('KeyPair was never locked');\n        this._clearUnlockedPrivateKey();\n        this._locked = true;\n    }\n\n    _clearUnlockedPrivateKey() {\n        // If this wallet is not locked internally and unlocked, this method does not have any effect.\n        if (!this._lockedInternally || this._locked) return;\n\n        // Overwrite cached key in this._unlockedPrivateKey with 0s.\n        this._unlockedPrivateKey.overwrite(PrivateKey.unserialize(new SerialBuffer(this._unlockedPrivateKey.serializedSize)));\n        // Then, reset it.\n        this._unlockedPrivateKey = null;\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @return {Promise<PrivateKey>}\n     * @private\n     */\n    async _otpPrivateKey(key) {\n        return new PrivateKey(await CryptoUtils.otpKdf(this._privateKey.serialize(), key, this._lockSalt, KeyPair.LOCK_KDF_ROUNDS));\n    }\n\n    get isLocked() {\n        return this._locked;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof KeyPair && super.equals(o);\n    }\n}\nKeyPair.LOCK_KDF_ROUNDS = 256;\n\nClass.register(KeyPair);\n","class Entropy extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Entropy.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @return {Entropy}\n     */\n    static generate() {\n        const entropy = new Uint8Array(Entropy.SIZE);\n        CryptoWorker.lib.getRandomValues(entropy);\n        return new Entropy(entropy);\n    }\n\n    /**\n     * @param {string} [password]\n     * @param {Array.<string>} [wordlist]\n     * @return {ExtendedPrivateKey}\n     */\n    toExtendedPrivateKey(password, wordlist) {\n        return MnemonicUtils.mnemonicToExtendedPrivateKey(this.toMnemonic(wordlist), password);\n    }\n\n    /**\n     * @param {Array.<string>} [wordlist]\n     * @return {Array.<string>}\n     */\n    toMnemonic(wordlist) {\n        return MnemonicUtils.entropyToMnemonic(this, wordlist);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Entropy}\n     */\n    static unserialize(buf) {\n        return new Entropy(buf.read(Entropy.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Entropy.SIZE;\n    }\n\n    /**\n     * Overwrite this entropy with a replacement in-memory\n     * @param {Entropy} entropy\n     */\n    overwrite(entropy) {\n        this._obj.set(entropy._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Entropy && super.equals(o);\n    }\n}\n\nEntropy.SIZE = 32;\n\nClass.register(Entropy);\n","class ExtendedPrivateKey extends Serializable {\n    /**\n     * @param {PrivateKey} key\n     * @param {Uint8Array} chainCode\n     * @private\n     */\n    constructor(key, chainCode) {\n        super();\n        if (!(key instanceof PrivateKey)) throw new Error('ExtendedPrivateKey: Invalid key');\n        if (!(chainCode instanceof Uint8Array)) throw new Error('ExtendedPrivateKey: Invalid chainCode');\n        if (chainCode.length !== ExtendedPrivateKey.CHAIN_CODE_SIZE) throw new Error('ExtendedPrivateKey: Invalid chainCode length');\n        this._key = key;\n        this._chainCode = chainCode;\n    }\n\n    /**\n     * @param {Uint8Array} seed\n     * @return {ExtendedPrivateKey}\n     */\n    static generateMasterKey(seed) {\n        const bCurve = BufferUtils.fromAscii('ed25519 seed');\n        const hash = CryptoUtils.computeHmacSha512(bCurve, seed);\n        return new ExtendedPrivateKey(new PrivateKey(hash.slice(0, 32)), hash.slice(32));\n    }\n\n    /**\n     * @param {number} index\n     * @return {ExtendedPrivateKey}\n     */\n    derive(index) {\n        // Only hardened derivation is allowed for ed25519.\n        if (index < 0x80000000) index += 0x80000000;\n\n        const data = new SerialBuffer(1 + PrivateKey.SIZE + 4);\n        data.writeUint8(0);\n        this._key.serialize(data);\n        data.writeUint32(index);\n\n        const hash = CryptoUtils.computeHmacSha512(this._chainCode, data);\n        return new ExtendedPrivateKey(new PrivateKey(hash.slice(0, 32)), hash.slice(32));\n    }\n\n    /**\n     * @param {string} path\n     * @return {boolean}\n     */\n    static isValidPath(path) {\n        if (path.match(/^m(\\/[0-9]+')*$/) === null) return false;\n\n        // Overflow check.\n        const segments = path.split('/');\n        for (let i = 1; i < segments.length; i++) {\n            if (!NumberUtils.isUint32(parseInt(segments[i]))) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {string} path\n     * @return {ExtendedPrivateKey}\n     */\n    derivePath(path) {\n        if (!ExtendedPrivateKey.isValidPath(path)) throw new Error('Invalid path');\n\n        let extendedKey = this;\n        const segments = path.split('/');\n        for (let i = 1; i < segments.length; i++) {\n            const index = parseInt(segments[i]);\n            extendedKey = extendedKey.derive(index);\n        }\n        return extendedKey;\n    }\n\n    /**\n     * @param {string} path\n     * @param {Uint8Array} seed\n     * @return {ExtendedPrivateKey}\n     */\n    static derivePathFromSeed(path, seed) {\n        let extendedKey = ExtendedPrivateKey.generateMasterKey(seed);\n        return extendedKey.derivePath(path);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {ExtendedPrivateKey}\n     */\n    static unserialize(buf) {\n        const privateKey = PrivateKey.unserialize(buf);\n        const chainCode = buf.read(ExtendedPrivateKey.CHAIN_CODE_SIZE);\n        return new ExtendedPrivateKey(privateKey, chainCode);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._key.serialize(buf);\n        buf.write(this._chainCode);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._key.serializedSize + ExtendedPrivateKey.CHAIN_CODE_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof ExtendedPrivateKey && super.equals(o);\n    }\n\n    /**\n     * @type {PrivateKey}\n     */\n    get privateKey() {\n        return this._key;\n    }\n\n    /**\n     * @return {Address}\n     */\n    toAddress() {\n        return PublicKey.derive(this._key).toAddress();\n    }\n}\n\nExtendedPrivateKey.CHAIN_CODE_SIZE = 32;\n\nClass.register(ExtendedPrivateKey);\n","class RandomSecret extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== RandomSecret.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {RandomSecret}\n     */\n    static unserialize(buf) {\n        return new RandomSecret(buf.read(RandomSecret.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return RandomSecret.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof RandomSecret && super.equals(o);\n    }\n}\n\nRandomSecret.SIZE = 32;\n\nClass.register(RandomSecret);\n","class Signature extends Serializable {\n    /**\n     * @param {Signature} o\n     * @returns {Signature}\n     */\n    static copy(o) {\n        if (!o) return o;\n        // FIXME Move this to Crypto class.\n        const obj = new Uint8Array(o._obj);\n        return new Signature(obj);\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Signature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {Signature}\n     */\n    static create(privateKey, publicKey, data) {\n        return new Signature(Signature._signatureCreate(privateKey._obj, publicKey._obj, data));\n    }\n\n    /**\n     * @param {Commitment} commitment\n     * @param {Array.<PartialSignature>} signatures\n     * @return {Signature}\n     */\n    static fromPartialSignatures(commitment, signatures) {\n        const raw = Signature._combinePartialSignatures(commitment.serialize(), signatures.map(s => s.serialize()));\n        return new Signature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Signature}\n     */\n    static unserialize(buf) {\n        return new Signature(buf.read(Signature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Signature.SIZE;\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {boolean}\n     */\n    verify(publicKey, data) {\n        return Signature._signatureVerify(publicKey._obj, data, this._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Signature && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} combinedCommitment\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _combinePartialSignatures(combinedCommitment, partialSignatures) {\n        const combinedSignature = Signature._aggregatePartialSignatures(partialSignatures);\n        return BufferUtils.concatTypedArrays(combinedCommitment, combinedSignature);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _aggregatePartialSignatures(partialSignatures) {\n        return partialSignatures.reduce((sigA, sigB) => Signature._scalarsAdd(sigA, sigB));\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @returns {Uint8Array}\n     */\n    static _scalarsAdd(a, b) {\n        if (a.byteLength !== PartialSignature.SIZE || b.byteLength !== PartialSignature.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_add_scalars(out, new Uint8Array(a), new Uint8Array(b));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSum = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInA = Module.stackAlloc(a.length);\n                const wasmInB = Module.stackAlloc(b.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInA, a.length).set(a);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInB, b.length).set(b);\n                Module._ed25519_add_scalars(wasmOutSum, wasmInA, wasmInB);\n                const sum = new Uint8Array(PartialSignature.SIZE);\n                sum.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSum, PartialSignature.SIZE));\n                return sum;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _signatureCreate(privateKey, publicKey, message) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Signature.SIZE);\n            NodeNative.node_ed25519_sign(out, new Uint8Array(message), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSignature = Module.stackAlloc(Signature.SIZE);\n                const signatureBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOutSignature, Signature.SIZE);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInPrivKey = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmInPrivKey, privateKey.length);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_sign(wasmOutSignature, wasmInMessage, message.byteLength, wasmInPubKey, wasmInPrivKey);\n                privKeyBuffer.fill(0);\n\n                const signature = new Uint8Array(Signature.SIZE);\n                signature.set(signatureBuffer);\n                return signature;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    static _signatureVerify(publicKey, message, signature) {\n        if (PlatformUtils.isNodeJs()) {\n            return !!NodeNative.node_ed25519_verify(new Uint8Array(signature), new Uint8Array(message), new Uint8Array(publicKey));\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInSignature = Module.stackAlloc(signature.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInSignature, signature.length).set(signature);\n\n                return !!Module._ed25519_verify(wasmInSignature, wasmInMessage, message.byteLength, wasmInPubKey);\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nSignature.SIZE = 64;\n\nClass.register(Signature);\n","class Commitment extends Serializable {\n    /**\n     * @param {Commitment} o\n     * @returns {Commitment}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new Commitment(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Array.<Commitment>} commitments\n     * @return {Commitment}\n     */\n    static sum(commitments) {\n        return new Commitment(Commitment._commitmentsAggregate(commitments.map(c => c._obj)));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Commitment.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Commitment}\n     */\n    static unserialize(buf) {\n        return new Commitment(buf.read(Commitment.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Commitment.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Commitment && super.equals(o);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} commitments\n     * @returns {Uint8Array}\n     */\n    static _commitmentsAggregate(commitments) {\n        if (commitments.some(commitment => commitment.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedCommitments = new Uint8Array(commitments.length * PublicKey.SIZE);\n        for (let i = 0; i < commitments.length; ++i) {\n            concatenatedCommitments.set(commitments[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_commitments(out, concatenatedCommitments, commitments.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInCommitments = Module.stackAlloc(concatenatedCommitments.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInCommitments, concatenatedCommitments.length).set(concatenatedCommitments);\n                Module._ed25519_aggregate_commitments(wasmOut, wasmInCommitments, commitments.length);\n                const aggCommitments = new Uint8Array(PublicKey.SIZE);\n                aggCommitments.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggCommitments;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nCommitment.SIZE = 32;\n\nClass.register(Commitment);\n","class CommitmentPair extends Serializable {\n    /**\n     * @param {RandomSecret} secret\n     * @param {Commitment} commitment\n     * @private\n     */\n    constructor(secret, commitment) {\n        super();\n        if (!(secret instanceof RandomSecret)) throw new Error('Primitive: Invalid type');\n        if (!(commitment instanceof Commitment)) throw new Error('Primitive: Invalid type');\n        this._secret = secret;\n        this._commitment = commitment;\n    }\n\n    /**\n     * @return {CommitmentPair}\n     */\n    static generate() {\n        const randomness = new Uint8Array(CommitmentPair.RANDOMNESS_SIZE);\n        CryptoWorker.lib.getRandomValues(randomness);\n        const raw = CommitmentPair._commitmentCreate(randomness);\n        return new CommitmentPair(new RandomSecret(raw.secret), new Commitment(raw.commitment));\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {CommitmentPair}\n     */\n    static unserialize(buf) {\n        const secret = RandomSecret.unserialize(buf);\n        const commitment = Commitment.unserialize(buf);\n        return new CommitmentPair(secret, commitment);\n    }\n\n    /**\n     * @param {string} hexBuf\n     * @return {CommitmentPair}\n     */\n    static fromHex(hexBuf) {\n        return this.unserialize(BufferUtils.fromHex(hexBuf));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this.secret.serialize(buf);\n        this.commitment.serialize(buf);\n        return buf;\n    }\n\n    /** @type {RandomSecret} */\n    get secret() {\n        return this._secret;\n    }\n\n    /** @type {Commitment} */\n    get commitment() {\n        return this._commitment;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this.secret.serializedSize + this.commitment.serializedSize;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof CommitmentPair && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} randomness\n     * @returns {{commitment:Uint8Array, secret:Uint8Array}}\n     */\n    static _commitmentCreate(randomness) {\n        if (PlatformUtils.isNodeJs()) {\n            const commitment = new Uint8Array(PublicKey.SIZE);\n            const secret = new Uint8Array(PrivateKey.SIZE);\n            NodeNative.node_ed25519_create_commitment(secret, commitment, randomness);\n            return {commitment, secret};\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutCommitment = Module.stackAlloc(PublicKey.SIZE);\n                const wasmOutSecret = Module.stackAlloc(PrivateKey.SIZE);\n                const wasmIn = Module.stackAlloc(randomness.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, randomness.length).set(randomness);\n                const res = Module._ed25519_create_commitment(wasmOutSecret, wasmOutCommitment, wasmIn);\n                if (res !== 1) {\n                    throw new Error(`Secret must not be 0 or 1: ${res}`);\n                }\n                const commitment = new Uint8Array(PublicKey.SIZE);\n                const secret = new Uint8Array(PrivateKey.SIZE);\n                commitment.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutCommitment, PublicKey.SIZE));\n                secret.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSecret, PrivateKey.SIZE));\n                return {commitment, secret};\n            } catch (e) {\n                Log.w(CommitmentPair, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nCommitmentPair.SERIALIZED_SIZE = RandomSecret.SIZE + Signature.SIZE;\nCommitmentPair.RANDOMNESS_SIZE = 32;\n\nClass.register(CommitmentPair);\n","class PartialSignature extends Serializable {\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PartialSignature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {RandomSecret} secret\n     * @param {Commitment} aggregateCommitment\n     * @param {Uint8Array} data\n     * @return {PartialSignature}\n     */\n    static create(privateKey, publicKey, publicKeys, secret, aggregateCommitment, data) {\n        const raw = PartialSignature._delinearizedPartialSignatureCreate(publicKeys.map(o => o._obj), privateKey._obj,\n            publicKey._obj, secret._obj, aggregateCommitment._obj, data);\n        return new PartialSignature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PartialSignature}\n     */\n    static unserialize(buf) {\n        return new PartialSignature(buf.read(PartialSignature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PartialSignature.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PartialSignature && super.equals(o);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} secret\n     * @param {Uint8Array} aggregateCommitment\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _delinearizedPartialSignatureCreate(publicKeys, privateKey, publicKey, secret, aggregateCommitment, message) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || privateKey.byteLength !== PrivateKey.SIZE\n            || publicKey.byteLength !== PublicKey.SIZE\n            || secret.byteLength !== RandomSecret.SIZE\n            || aggregateCommitment.byteLength !== Commitment.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_delinearized_partial_sign(out, new Uint8Array(message), new Uint8Array(aggregateCommitment), new Uint8Array(secret), new Uint8Array(concatenatedPublicKeys), publicKeys.length, new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPrivateKey = Module.stackAlloc(privateKey.length);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInSecret = Module.stackAlloc(secret.length);\n                const wasmInCommitment = Module.stackAlloc(aggregateCommitment.length);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPrivateKey, privateKey.length).set(privateKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInSecret, secret.length).set(secret);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInCommitment, aggregateCommitment.length).set(aggregateCommitment);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInMessage, message.length).set(message);\n                Module._ed25519_delinearized_partial_sign(wasmOut, wasmInMessage, message.length, wasmInCommitment, wasmInSecret, wasmInPublicKeys, publicKeys.length, wasmInPublicKey, wasmInPrivateKey);\n                const partialSignature = new Uint8Array(PartialSignature.SIZE);\n                partialSignature.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PartialSignature.SIZE));\n                return partialSignature;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPartialSignature.SIZE = 32;\nClass.register(PartialSignature);\n","class Address extends Serializable {\n    /**\n     * @param {Address} o\n     * @returns {Address}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Address(obj);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Address}\n     */\n    static fromHash(hash) {\n        return new Address(hash.subarray(0, Address.SERIALIZED_SIZE));\n    }\n\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Address.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Address} Newly created Account object.\n     */\n    static unserialize(buf) {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Address\n            && super.equals(o);\n    }\n\n    static fromString(str) {\n        try {\n            return Address.fromUserFriendlyAddress(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid address format');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {Address}\n     */\n    static fromBase64(base64) {\n        return new Address(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @return {Address}\n     */\n    static fromHex(hex) {\n        return new Address(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @return {Address}\n     */\n    static fromUserFriendlyAddress(str) {\n        str = str.replace(/ /g, '');\n        if (str.substr(0, 2).toUpperCase() !== Address.CCODE) {\n            throw new Error('Invalid Address: Wrong country code');\n        }\n        if (str.length !== 36) {\n            throw new Error('Invalid Address: Should be 36 chars (ignoring spaces)');\n        }\n        if (Address._ibanCheck(str.substr(4) + str.substr(0, 4)) !== 1) {\n            throw new Error('Invalid Address: Checksum invalid');\n        }\n        return new Address(BufferUtils.fromBase32(str.substr(4)));\n    }\n\n    static _ibanCheck(str) {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6)) % 97).toString();\n        }\n\n        return parseInt(tmp);\n    }\n\n    /**\n     * @param {boolean} [withSpaces]\n     * @return {string}\n     */\n    toUserFriendlyAddress(withSpaces = true) {\n        const base32 = BufferUtils.toBase32(this.serialize());\n        // eslint-disable-next-line prefer-template\n        const check = ('00' + (98 - Address._ibanCheck(base32 + Address.CCODE + '00'))).slice(-2);\n        let res = Address.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n}\nAddress.CCODE = 'NQ';\nAddress.SERIALIZED_SIZE = 20;\nAddress.HEX_SIZE = 40;\nAddress.NULL = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nAddress.CONTRACT_CREATION = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nClass.register(Address);\n","/**\n * @abstract\n */\nclass Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint64(balance)) throw new Error('Malformed balance');\n\n        /** @type {Account.Type} */\n        this._type = type;\n        /** @type {number} */\n        this._balance = balance;\n    }\n\n    /**\n     * Create Account object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Account} Newly created Account object.\n     */\n    static unserialize(buf) {\n        const type = /** @type {Account.Type} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Account.TYPE_MAP.has(type)) {\n            throw new Error('Unknown account type');\n        }\n\n        return Account.TYPE_MAP.get(type).unserialize(buf);\n    }\n\n    /**\n     * Serialize this Account object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeUint64(this._balance);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return /*type*/ 1\n            + /*balance*/ 8;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    toString() {\n        return `Account{type=${this._type}, balance=${this._balance.toString()}`;\n    }\n\n    /**\n     * @type {number} Account balance\n     */\n    get balance() {\n        return this._balance;\n    }\n\n    /** @type {Account.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) { throw new Error('Not yet implemented.'); }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            if (transactionsCache.containsTransaction(transaction)) {\n                throw new Error('Double Transaction Error!');\n            }\n            return this.withBalance(newBalance);\n        } else {\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            return this.withBalance(this._balance + transaction.value + transaction.fee);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            return this.withBalance(this._balance + transaction.value);\n        } else {\n            const newBalance = this._balance - transaction.value;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            return this.withBalance(newBalance);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this === Account.INITIAL;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isToBePruned() {\n        return this._balance === 0 && !this.isInitial();\n    }\n}\n\n/**\n * Enum for Account types.\n * Non-zero values are contracts.\n * @enum\n */\nAccount.Type = {\n    /**\n     * Basic account type.\n     * @see {BasicAccount}\n     */\n    BASIC: 0,\n    /**\n     * Account with vesting functionality.\n     * @see {VestingContract}\n     */\n    VESTING: 1,\n    /**\n     * Hashed Time-Locked Contract\n     * @see {HashedTimeLockedContract}\n     */\n    HTLC: 2\n};\n/**\n * @type {Map.<Account.Type, {copy: function(o: *):Account, unserialize: function(buf: SerialBuffer):Account, create: function(balance: number, blockHeight: number, transaction: Transaction):Account, verifyOutgoingTransaction: function(transaction: Transaction):boolean, verifyIncomingTransaction: function(transaction: Transaction):boolean}>}\n */\nAccount.TYPE_MAP = new Map();\n\nClass.register(Account);\n","/**\n * @abstract\n */\nclass Transaction {\n    /**\n     * @param {Transaction.Format} format\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(format, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId = GenesisConfig.NETWORK_ID) {\n        if (!(sender instanceof Address)) throw new Error('Malformed sender');\n        if (!NumberUtils.isUint8(senderType)) throw new Error('Malformed sender type');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient');\n        if (!NumberUtils.isUint8(recipientType)) throw new Error('Malformed recipient type');\n        if (!NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed value');\n        if (!NumberUtils.isUint64(fee)) throw new Error('Malformed fee');\n        if (!NumberUtils.isUint32(validityStartHeight)) throw new Error('Malformed validityStartHeight');\n        if (!NumberUtils.isUint8(flags) && (flags & ~(Transaction.Flag.ALL)) > 0) throw new Error('Malformed flags');\n        if (!(data instanceof Uint8Array) || !(NumberUtils.isUint16(data.byteLength))) throw new Error('Malformed data');\n        if (proof && (!(proof instanceof Uint8Array) || !(NumberUtils.isUint16(proof.byteLength)))) throw new Error('Malformed proof');\n        if (!NumberUtils.isUint8(networkId)) throw new Error('Malformed networkId');\n\n        /** @type {Transaction.Format} */\n        this._format = format;\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Account.Type} */\n        this._senderType = senderType;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Account.Type} */\n        this._recipientType = recipientType;\n        /** @type {number} */\n        this._value = value;\n        /** @type {number} */\n        this._fee = fee;\n        /** @type {number} */\n        this._networkId = networkId;\n        /** @type {number} */\n        this._validityStartHeight = validityStartHeight;\n        /** @type {Transaction.Flag | *} */\n        this._flags = flags;\n        /** @type {Uint8Array} */\n        this._data = data;\n        /** @type {Uint8Array} */\n        this._proof = proof;\n\n        if (this._recipient === Address.CONTRACT_CREATION) this._recipient = this.getContractCreationAddress();\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const format = /** @type {Transaction.Format} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format).unserialize(buf);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        buf.writeUint16(this._data.byteLength);\n        buf.write(this._data);\n        this._sender.serialize(buf);\n        buf.writeUint8(this._senderType);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._recipientType);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        buf.writeUint8(this._flags);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return /*dataSize*/ 2\n            + this._data.byteLength\n            + this._sender.serializedSize\n            + /*senderType*/ 1\n            + this._recipient.serializedSize\n            + /*recipientType*/ 1\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + /*flags*/ 1;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     */\n    verify(networkId) {\n        if (this._valid === undefined) {\n            this._valid = this._verify(networkId);\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     * @private\n     */\n    _verify(networkId = GenesisConfig.NETWORK_ID) {\n        if (this._networkId !== networkId) {\n            Log.w(Transaction, 'Transaction is not valid in this network', this);\n            return false;\n        }\n        // Check that sender != recipient.\n        if (this._recipient.equals(this._sender)) {\n            Log.w(Transaction, 'Sender and recipient must not match', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.has(this._senderType) || !Account.TYPE_MAP.has(this._recipientType)) {\n            Log.w(Transaction, 'Invalid account type', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._senderType).verifyOutgoingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for sender', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._recipientType).verifyIncomingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for recipient', this);\n            return false;\n        }\n        return true;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        throw new Error('Getter needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        throw new Error('Method needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        // Exclude the signature, we don't want transactions to be malleable.\n        this._hash = this._hash || Hash.light(this.serializeContent());\n        return this._hash;\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compare(o) {\n        if (this.fee / this.serializedSize > o.fee / o.serializedSize) return -1;\n        if (this.fee / this.serializedSize < o.fee / o.serializedSize) return 1;\n        if (this.serializedSize > o.serializedSize) return -1;\n        if (this.serializedSize < o.serializedSize) return 1;\n        if (this.fee > o.fee) return -1;\n        if (this.fee < o.fee) return 1;\n        if (this.value > o.value) return -1;\n        if (this.value < o.value) return 1;\n        return this.compareBlockOrder(o);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compareBlockOrder(o) {\n        // This function must return 0 iff this.equals(o).\n        const recCompare = this._recipient.compare(o._recipient);\n        if (recCompare !== 0) return recCompare;\n        if (this._validityStartHeight < o._validityStartHeight) return -1;\n        if (this._validityStartHeight > o._validityStartHeight) return 1;\n        if (this._fee > o._fee) return -1;\n        if (this._fee < o._fee) return 1;\n        if (this._value > o._value) return -1;\n        if (this._value < o._value) return 1;\n        const senderCompare = this._sender.compare(o._sender);\n        if (senderCompare !== 0) return senderCompare;\n        if (this._recipientType < o._recipientType) return -1;\n        if (this._recipientType > o._recipientType) return 1;\n        if (this._senderType < o._senderType) return -1;\n        if (this._senderType > o._senderType) return 1;\n        if (this._flags < o._flags) return -1;\n        if (this._flags > o._flags) return 1;\n        return BufferUtils.compare(this._data, o._data);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {boolean}\n     */\n    equals(o) {\n        // This ignores format and proof to be consistent with hash():\n        //   tx1.hash() == tx2.hash() iff tx1.equals(t2)\n        return o instanceof Transaction\n            && this._sender.equals(o._sender)\n            && this._senderType === o._senderType\n            && this._recipient.equals(o._recipient)\n            && this._recipientType === o._recipientType\n            && this._value === o._value\n            && this._fee === o._fee\n            && this._validityStartHeight === o._validityStartHeight\n            && this._networkId === o._networkId\n            && this._flags === o._flags\n            && BufferUtils.equals(this._data, o._data);\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `Transaction{`\n            + `sender=${this._sender.toBase64()}, `\n            + `recipient=${this._recipient.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `validityStartHeight=${this._validityStartHeight}, `\n            + `networkId=${this._networkId}`\n            + `}`;\n    }\n\n    /**\n     * @return {Address}\n     */\n    getContractCreationAddress() {\n        const tx = Transaction.unserialize(this.serialize());\n        tx._recipient = Address.NULL;\n        tx._hash = null;\n        return Address.fromHash(tx.hash());\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Account.Type} */\n    get senderType() {\n        return this._senderType;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Account.Type} */\n    get recipientType() {\n        return this._recipientType;\n    }\n\n    /** @type {number} */\n    get value() {\n        return this._value;\n    }\n\n    /** @type {number} */\n    get fee() {\n        return this._fee;\n    }\n\n    /** @type {number} */\n    get feePerByte() {\n        return this._fee / this.serializedSize;\n    }\n\n    /** @type {number} */\n    get networkId() {\n        return this._networkId;\n    }\n\n    /** @type {number} */\n    get validityStartHeight() {\n        return this._validityStartHeight;\n    }\n\n    /** @type {number} */\n    get flags() {\n        return this._flags;\n    }\n\n    /**\n     * @param {Transaction.Flag} flag\n     * @returns {boolean}\n     */\n    hasFlag(flag) {\n        return (this._flags & flag) > 0;\n    }\n\n    /** @type {Uint8Array} */\n    get data() {\n        return this._data;\n    }\n\n    /** @type {Uint8Array} */\n    get proof() {\n        return this._proof;\n    }\n\n    // Sender proof is set by the Wallet after signing a transaction.\n    /** @type {Uint8Array} */\n    set proof(proof) {\n        this._proof = proof;\n    }\n}\n\n/**\n * Enum for Transaction formats.\n * @enum\n */\nTransaction.Format = {\n    BASIC: 0,\n    EXTENDED: 1\n};\n/**\n * @enum\n */\nTransaction.Flag = {\n    NONE: 0,\n    CONTRACT_CREATION: 0b1,\n    ALL: 0b1\n};\n/** @type {Map.<Transaction.Format, {unserialize: function(buf: SerialBuffer):Transaction}>} */\nTransaction.FORMAT_MAP = new Map();\n\nClass.register(Transaction);\n","class SignatureProof {\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    static verifyTransaction(transaction) {\n        try {\n            const buffer = new SerialBuffer(transaction.proof);\n            const proof = SignatureProof.unserialize(buffer);\n\n            // Reject proof if it is longer than needed.\n            if (buffer.readPos !== buffer.byteLength) {\n                Log.w(SignatureProof, 'Invalid SignatureProof - overlong');\n                return false;\n            }\n\n            return proof.verify(transaction.sender, transaction.serializeContent());\n        } catch (e) {\n            Log.w(SignatureProof, `Failed to verify transaction: ${e.message || e}`, e);\n            return false;\n        }\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static singleSig(publicKey, signature) {\n        return new SignatureProof(publicKey, new MerklePath([]), signature);\n    }\n\n    /**\n     * @param {PublicKey} signerKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static multiSig(signerKey, publicKeys, signature) {\n        const merklePath = MerklePath.compute(publicKeys, signerKey);\n        return new SignatureProof(signerKey, merklePath, signature);\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {MerklePath} merklePath\n     * @param {Signature} signature\n     */\n    constructor(publicKey, merklePath, signature) {\n        if (!(publicKey instanceof PublicKey)) throw new Error('Malformed publickKey');\n        if (!(merklePath instanceof MerklePath)) throw new Error('Malformed merklePath');\n        if (signature && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        /**\n         * @type {PublicKey}\n         * @private\n         */\n        this._publicKey = publicKey;\n        /**\n         * @type {MerklePath}\n         * @private\n         */\n        this._merklePath = merklePath;\n        /**\n         * @type {Signature}\n         * @private\n         */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {SignatureProof}\n     */\n    static unserialize(buf) {\n        const publicKey = PublicKey.unserialize(buf);\n        const merklePath = MerklePath.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new SignatureProof(publicKey, merklePath, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._publicKey.serialize(buf);\n        this._merklePath.serialize(buf);\n\n        // The SignatureProof is sometimes serialized before the signature is set (e.g. when creating transactions).\n        // Simply don't serialize the signature if it's missing as this should never go over the wire.\n        // We always expect the signature to be present when unserializing.\n        if (this._signature) {\n            this._signature.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._publicKey.serializedSize\n            + this._merklePath.serializedSize\n            + (this._signature ? this._signature.serializedSize : 0);\n    }\n\n    /**\n     * @param {SignatureProof} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof SignatureProof\n            && this._publicKey.equals(o._publicKey)\n            && this._merklePath.equals(o._merklePath)\n            && (this._signature ? this._signature.equals(o._signature) : this._signature === o._signature);\n    }\n\n    /**\n     * @param {?Address} sender\n     * @param {Uint8Array} data\n     * @returns {boolean}\n     */\n    verify(sender, data) {\n        if (sender !== null && !this.isSignedBy(sender)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signer does not match sender address');\n            return false;\n        }\n\n        if (!this._signature) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is missing');\n            return false;\n        }\n\n        if (!this._signature.verify(this._publicKey, data)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is invalid');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Address} sender\n     * @returns {boolean}\n     */\n    isSignedBy(sender) {\n        const merkleRoot = this._merklePath.computeRoot(this._publicKey);\n        const signerAddr = Address.fromHash(merkleRoot);\n        return signerAddr.equals(sender);\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {MerklePath} */\n    get merklePath() {\n        return this._merklePath;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {Signature} */\n    set signature(signature) {\n        this._signature = signature;\n    }\n}\n\nClass.register(SignatureProof);\n","class BasicTransaction extends Transaction {\n    /**\n     * @param {PublicKey} senderPubKey\n     * @param {Address} recipient\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Signature} [signature]\n     * @param {number} [networkId]\n     */\n    constructor(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId) {\n        if (!(senderPubKey instanceof PublicKey)) throw new Error('Malformed senderPubKey');\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        const proof = SignatureProof.singleSig(senderPubKey, signature);\n        super(Transaction.Format.BASIC, senderPubKey.toAddress(), Account.Type.BASIC, recipient, Account.Type.BASIC, value, fee, validityStartHeight, Transaction.Flag.NONE, new Uint8Array(0), proof.serialize(), networkId);\n\n        /**\n         * @type {SignatureProof}\n         * @private\n         */\n        this._signatureProof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        Assert.that(type === Transaction.Format.BASIC);\n\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new BasicTransaction(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.BASIC);\n        this.senderPubKey.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        this.signature.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.senderPubKey.serializedSize\n            + this._recipient.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + this.signature.serializedSize;\n    }\n\n    /**\n     * @type {PublicKey}\n     */\n    get senderPubKey() {\n        return this._signatureProof.publicKey;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    get signature() {\n        return this._signatureProof.signature;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    set signature(signature) {\n        this._signatureProof.signature = signature;\n        this._proof = this._signatureProof.serialize();\n    }\n}\nTransaction.FORMAT_MAP.set(Transaction.Format.BASIC, BasicTransaction);\nClass.register(BasicTransaction);\n","class ExtendedTransaction extends Transaction {\n\n    /**\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof = new Uint8Array(0), networkId) {\n        super(Transaction.Format.EXTENDED, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = /** @type {Transaction.Format} */ buf.readUint8();\n        Assert.that(type === Transaction.Format.EXTENDED);\n\n        const dataSize = buf.readUint16();\n        const data = buf.read(dataSize);\n        const sender = Address.unserialize(buf);\n        const senderType = /** @type {Account.Type} */ buf.readUint8();\n        const recipient = Address.unserialize(buf);\n        const recipientType = /** @type {Account.Type} */ buf.readUint8();\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const flags = buf.readUint8();\n        const proofSize = buf.readUint16();\n        const proof = buf.read(proofSize);\n        return new ExtendedTransaction(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.EXTENDED);\n        this.serializeContent(buf);\n        buf.writeUint16(this._proof.byteLength);\n        buf.write(this._proof);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.serializedContentSize\n            + /*proofSize*/ 2\n            + this._proof.byteLength;\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.EXTENDED, ExtendedTransaction);\nClass.register(ExtendedTransaction);\n","/**\n * @interface\n */\nclass IWorker {\n    static async createProxy(clazz, name, worker) {\n        return new (IWorker.Proxy(clazz))(worker, name);\n    }\n\n    static async startWorkerForProxy(clazz, name, workerScript) {\n        if (!IWorker._workersSupported) {\n            await IWorker._workerImplementation[clazz.name].init(name);\n            return IWorker._workerImplementation[clazz.name];\n        } else {\n            if (!workerScript) {\n                workerScript = `${Nimiq._path}worker.js`;\n            }\n            return IWorker.createProxy(clazz, name, new Worker(window.URL.createObjectURL(new Blob([`Nimiq = {_path: '${Nimiq._path}'}; importScripts('${workerScript.replace(/'/g, '')}');`]))));\n        }\n    }\n\n    static async startWorkerPoolForProxy(clazz, name, size, workerScript) {\n        return (new (IWorker.Pool(clazz))((name) => IWorker.startWorkerForProxy(clazz, name, workerScript), name, size)).start();\n    }\n\n    static async stubBaseOnMessage(msg) {\n        try {\n            if (msg.data.command === 'init') {\n                if (IWorker._workerImplementation[msg.data.args[0]]) {\n                    const res = await IWorker._workerImplementation[msg.data.args[0]].init(msg.data.args[1]);\n                    self.postMessage({status: 'OK', result: res, id: msg.data.id});\n                } else {\n                    self.postMessage({status: 'error', result: 'Unknown worker!', id: msg.data.id});\n                }\n            } else {\n                self.postMessage({status: 'error', result: 'Worker not yet initialized!', id: msg.data.id});\n            }\n        } catch (e) {\n            self.postMessage({status: 'error', result: e, id: msg.data.id});\n        }\n    }\n\n    static get _workersSupported() {\n        return typeof Worker !== 'undefined';\n    }\n\n    static get areWorkersAsync() {\n        return IWorker._workersSupported;\n    }\n\n    static get _insideWebWorker() {\n        return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n\n    static prepareForWorkerUse(baseClazz, impl) {\n        if (IWorker._insideWebWorker) {\n            // Only inside WebWorker\n            self.onmessage = IWorker.stubBaseOnMessage;\n        }\n        IWorker._workerImplementation = IWorker._workerImplementation || {};\n        IWorker._workerImplementation[baseClazz.name] = impl;\n    }\n\n    static _loadBrowserScript(url, resolve) {\n        // Adding the script tag to the head as suggested before\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n\n        // Then bind the event to the callback function.\n        // There are several events for cross browser compatibility.\n        // These events might occur before processing, so delay them a bit.\n        const ret = () => window.setTimeout(resolve, 100);\n        script.onreadystatechange = ret;\n        script.onload = ret;\n\n        // Fire the loading\n        head.appendChild(script);\n    }\n\n    static Proxy(clazz) {\n        const proxyClass = class extends clazz {\n            /**\n             * @param {Worker} worker\n             * @param {string} [name]\n             */\n            constructor(worker, name) {\n                super();\n                this._name = name;\n                this._messageId = 0;\n                this._worker = worker;\n                this._worker.onmessage = this._receive.bind(this);\n                /** @type {Map.<number,{resolve:Function,error:Function}>} */\n                this._waiting = new Map();\n                return this._invoke('init', [clazz.name, name]).then(() => { return this; });\n            }\n\n            _receive(msg) {\n                const cb = this._waiting.get(msg.data.id);\n                if (!cb) {\n                    Log.w(WorkerProxy, 'Unknown reply', msg);\n                } else {\n                    this._waiting.delete(msg.data.id);\n                    if (msg.data.status === 'OK') {\n                        cb.resolve(msg.data.result);\n                    } else if (msg.data.status === 'error') {\n                        cb.error(msg.data.result);\n                    }\n                }\n            }\n\n            /**\n             * @param {string} command\n             * @param {object[]} [args]\n             * @returns {Promise}\n             * @private\n             */\n            _invoke(command, args = []) {\n                return new Promise((resolve, error) => {\n                    const obj = {command: command, args: args, id: this._messageId++};\n                    this._waiting.set(obj.id, {resolve, error});\n                    this._worker.postMessage(obj);\n                });\n            }\n\n            destroy() {\n                return this._invoke('destroy');\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                proxyClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return proxyClass;\n    }\n\n    /**\n     * @param {object} clazz\n     * @return {Stub}\n     * @constructor\n     */\n    static Stub(clazz) {\n        const Stub = class extends clazz {\n            constructor() {\n                super();\n            }\n\n            _result(msg, status, result) {\n                self.postMessage({status, result, id: msg.data.id});\n            }\n\n            _onmessage(msg) {\n                try {\n                    const res = this._invoke(msg.data.command, msg.data.args);\n                    if (res instanceof Promise) {\n                        res.then((finalRes) => { this._result(msg, 'OK', finalRes); });\n                    } else {\n                        this._result(msg, 'OK', res);\n                    }\n                } catch (e) {\n                    this._result(msg, 'error', e.message || e);\n                }\n            }\n\n            init(name) {\n                this._name = name;\n                if (IWorker._insideWebWorker) {\n                    self.name = name;\n                    self.onmessage = (msg) => this._onmessage(msg);\n                }\n            }\n\n            _invoke(command, args) {\n                return this[command].apply(this, args);\n            }\n\n            destroy() {\n                if (IWorker._insideWebWorker) {\n                    self.close();\n                }\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                Stub.prototype[funcName] = function () {\n                    throw `Not implemented in IWorker Stub: ${funcName}`;\n                };\n            }\n        }\n        return Stub;\n    }\n\n    static Pool(clazz) {\n        const poolClass = class extends clazz {\n            /**\n             *\n             * @param {function(string):Promise} proxyInitializer\n             * @param {string} [name]\n             * @param {number} [size] Number of workers in this pool.\n             */\n            constructor(proxyInitializer, name = 'pool', size = 1) {\n                super();\n                /** @type {function(string):Promise} */\n                this._proxyInitializer = proxyInitializer;\n                /** @type {string} */\n                this._name = name;\n                /** @type {number} */\n                this._poolSize = size;\n                /** @type {Array} */\n                this._workers = [];\n                /** @type {Array} */\n                this._freeWorkers = [];\n                /** @type {Array.<{name:string, args:Array, resolve:function, error:function}>} */\n                this._waitingCalls = [];\n            }\n\n            async start() {\n                await this._updateToSize();\n\n                return this;\n            }\n\n            get poolSize() {\n                return this._poolSize;\n            }\n\n            set poolSize(_size) {\n                this._poolSize = _size;\n                this._updateToSize().catch(Log.w.tag(IWorker));\n            }\n\n            destroy() {\n                this._poolSize = 0;\n                return this._updateToSize();\n            }\n\n            /**\n             * @param {string} name Name of the function to call on a worker\n             * @param {Array} args Arguments to pass to the function\n             * @returns {Promise}\n             */\n            _invoke(name, args) {\n                if (IWorker._workersSupported) {\n                    return new Promise((resolve, error) => {\n                        this._waitingCalls.push({name, args, resolve, error});\n                        const worker = this._freeWorkers.shift();\n                        if (worker) {\n                            this._step(worker).catch(Log.w.tag(IWorker));\n                        }\n                    });\n                } else {\n                    return this._workers[0][name].apply(this._workers[0], args);\n                }\n            }\n\n            /**\n             * @param worker\n             * @returns {Promise.<void>}\n             * @private\n             */\n            async _step(worker) {\n                let call = this._waitingCalls.shift();\n                while (call) {\n                    try {\n                        // eslint-disable-next-line no-await-in-loop\n                        call.resolve(await worker[call.name].apply(worker, call.args));\n                    } catch (e) {\n                        call.error(e);\n                    }\n                    if (this._workers.indexOf(worker) === -1) {\n                        worker.destroy();\n                        return;\n                    }\n                    call = this._waitingCalls.shift();\n                }\n                this._freeWorkers.push(worker);\n            }\n\n            async _updateToSize() {\n                if (typeof Worker === 'undefined' && this._poolSize > 1) {\n                    Log.d(IWorker, 'Pool of size larger than 1 requires WebWorker support.');\n                    this._poolSize = 1;\n                }\n\n                const workerPromises = [];\n                while (this._workers.length + workerPromises.length < this._poolSize) {\n                    workerPromises.push(this._proxyInitializer(`${this._name}#${this._workers.length + workerPromises.length}`));\n                }\n                const createdWorkers = await Promise.all(workerPromises);\n                for (const worker of createdWorkers) {\n                    this._workers.push(worker);\n                    this._step(worker).catch(Log.w.tag(IWorker));\n                }\n\n                while (this._workers.length > this._poolSize) {\n                    const worker = this._freeWorkers.shift() || this._workers.pop();\n                    const idx = this._workers.indexOf(worker);\n                    if (idx >= 0) {\n                        // This was a free worker, also remove it from the worker list and destroy it now.\n                        this._workers.splice(idx, 1);\n                        worker.destroy();\n                    }\n                }\n                return this;\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                poolClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return poolClass;\n    }\n}\n\nIWorker._moduleLoadedCallbacks = {};\nIWorker._workerImplementation = {};\nClass.register(IWorker);\n","// TODO: Split platform specific code into subdirs\n// i.e. no `require()` or `window.*` in generic\n// Using `require()`s in browser specific code are likely to cause problems\n// with tools like webpack that try to resolve those for the browser.\n\nclass WasmHelper {\n\n    static async doImportBrowser() {\n        if (PlatformUtils.isNodeJs()) return;\n        if (WasmHelper._importStarted) {\n            Log.e(WasmHelper, 'doImportBrowser invoked twice');\n            return;\n        }\n        WasmHelper._importStarted = true;\n        if (await WasmHelper.importWasmBrowser('worker-wasm.wasm')) {\n            await WasmHelper.importScriptBrowser('worker-wasm.js');\n        } else {\n            await WasmHelper.importScriptBrowser('worker-js.js');\n        }\n        WasmHelper._importFinished = true;\n    }\n\n    static doImportNodeJs() {\n        if (!PlatformUtils.isNodeJs()) return;\n        if (WasmHelper.importWasmNodeJs('worker-wasm.wasm')) {\n            WasmHelper.importScriptNodeJs('worker-wasm.js');\n        } else {\n            WasmHelper.importScriptNodeJs('worker-js.js');\n        }\n    }\n\n    /**\n     * @param {string} wasm\n     * @param {string} module\n     * @returns {Promise.<boolean>}\n     */\n    static importWasmBrowser(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return Promise.resolve(false);\n        }\n\n        return new Promise((resolve) => {\n            try {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', wasm, true);\n                xhr.responseType = 'arraybuffer';\n                xhr.onload = function () {\n                    WasmHelper._global[module] = WasmHelper._global[module] || {};\n                    WasmHelper._global[module].wasmBinary = xhr.response;\n                    resolve(true);\n                };\n                xhr.onerror = function () {\n                    Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                    resolve(false);\n                };\n                xhr.send(null);\n            } catch (e) {\n                Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                resolve(false);\n            }\n        });\n    }\n\n    static importWasmNodeJs(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return false;\n        }\n\n        const toUint8Array = function (buf) {\n            const u = new Uint8Array(buf.length);\n            for (let i = 0; i < buf.length; ++i) {\n                u[i] = buf[i];\n            }\n            return u;\n        };\n        const fs = require('fs');\n        try {\n            const data = fs.readFileSync(wasm);\n            WasmHelper._global[module] = WasmHelper._global[module] || {};\n            WasmHelper._global[module].wasmBinary = toUint8Array(data);\n            return true;\n        } catch (e) {\n            Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}: ${e}`);\n            return false;\n        }\n    }\n\n    static importScriptBrowser(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n        return new Promise(async (resolve, reject) => {\n            if (module) {\n                moduleSettings.onRuntimeInitialized = () => resolve(true);\n            }\n            if (typeof importScripts === 'function') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    importScripts(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof window === 'object') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    WasmHelper._loadBrowserScript(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof require === 'function') {\n                WasmHelper._global[module] = require(script)(moduleSettings);\n                if (!module) resolve(true);\n            } else {\n                reject('No way to load scripts.');\n            }\n        });\n    }\n\n    static importScriptNodeJs(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n\n        if (typeof require === 'function') {\n            WasmHelper._global[module] = require(script)(moduleSettings);\n            if (!module) return true;\n        }\n        return false;\n    }\n\n    static fireModuleLoaded(module = 'Module') {\n        if (typeof WasmHelper._moduleLoadedCallbacks[module] === 'function') {\n            WasmHelper._moduleLoadedCallbacks[module]();\n            WasmHelper._moduleLoadedCallbacks[module] = null;\n        }\n    }\n\n    static _loadBrowserScript(url) {\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        head.appendChild(script);\n    }\n\n    static _adjustWasmPath(wasm) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) wasm = `${Nimiq._path}${wasm}`;\n        if (typeof __dirname === 'string' && wasm.indexOf('/') === -1) wasm = `${__dirname}/${wasm}`;\n        return wasm;\n    }\n\n    static _adjustScriptPath(script) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) script = `${Nimiq._path}${script}`;\n        if (typeof __dirname === 'string' && script.indexOf('/') === -1) script = `${__dirname}/${script}`;\n        return script;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n}\nWasmHelper._moduleLoadedCallbacks = {};\n\nClass.register(WasmHelper);\n\n","/**\n * @interface\n */\nclass CryptoWorker {\n    static get lib() { return CryptoLib.instance; }\n\n    /**\n     * @returns {Promise.<CryptoWorker>}\n     */\n    static async getInstanceAsync() {\n        if (!CryptoWorker._workerAsync) {\n            CryptoWorker._workerAsync = await IWorker.startWorkerPoolForProxy(CryptoWorker, 'crypto', 4);\n        }\n        return CryptoWorker._workerAsync;\n    }\n    /**\n     * @param {Uint8Array} input\n     * @returns {Promise.<Uint8Array>}\n     */\n    async computeArgon2d(input) {}\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Promise.<Array.<Uint8Array>>}\n     */\n    async computeArgon2dBatch(inputs) {}\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Promise.<Uint8Array>}\n     */\n    async kdf(key, salt, iterations) {}\n\n    /**\n     * @param {Uint8Array} block\n     * @param {Array.<bool>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(block, transactionValid, timeNow, genesisHash, networkId) {}\n}\n/** @type {CryptoWorker} */\nCryptoWorker._workerAsync = null;\n\nClass.register(CryptoWorker);\n","class CryptoUtils {\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} data\n     * @return {Uint8Array}\n     */\n    static computeHmacSha512(key, data) {\n        if (key.length > CryptoUtils.SHA512_BLOCK_SIZE) {\n            key = new SerialBuffer(Hash.computeSha512(key));\n        }\n\n        const iKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        const oKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        for (let i = 0; i < CryptoUtils.SHA512_BLOCK_SIZE; ++i) {\n            const byte = key[i] || 0;\n            iKey[i] = 0x36 ^ byte;\n            oKey[i] = 0x5c ^ byte;\n        }\n\n        const innerHash = Hash.computeSha512(BufferUtils.concatTypedArrays(iKey, data));\n        return Hash.computeSha512(BufferUtils.concatTypedArrays(oKey, innerHash));\n    }\n\n    /**\n     * @param {Uint8Array} password\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @param {number} derivedKeyLength\n     * @return {Uint8Array}\n     */\n    static computePBKDF2sha512(password, salt, iterations, derivedKeyLength) {\n        // Following https://www.ietf.org/rfc/rfc2898.txt\n        const hashLength = Hash.SIZE.get(Hash.Algorithm.SHA512);\n\n        if (derivedKeyLength > (Math.pow(2, 32) - 1) * hashLength) {\n            throw new Error('Derived key too long');\n        }\n\n        const l = Math.ceil(derivedKeyLength / hashLength);\n        const r = derivedKeyLength - (l - 1) * hashLength;\n\n        const derivedKey = new SerialBuffer(derivedKeyLength);\n        for (let i = 1; i <= l; i++) {\n            let u = new SerialBuffer(salt.length + 4);\n            u.write(salt);\n            u.writeUint32(i);\n\n            u = CryptoUtils.computeHmacSha512(password, u);\n            const t = u;\n            for (let j = 1; j < iterations; j++) {\n                u = CryptoUtils.computeHmacSha512(password, u);\n                for (let k = 0; k < t.length; k++) {\n                    t[k] ^= u[k];\n                }\n            }\n\n            if (i < l) {\n                derivedKey.write(t);\n            } else {\n                derivedKey.write(t.slice(0, r));\n            }\n        }\n        return derivedKey;\n    }\n\n    /**\n     * @param {Uint8Array} message\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @return {Promise<Uint8Array>}\n     */\n    static async otpKdf(message, key, salt, iterations) {\n        return BufferUtils.xor(message, await (await CryptoWorker.getInstanceAsync()).kdf(key, salt, iterations));\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @param {Uint8Array} key\n     * @return {Promise.<Uint8Array>}\n     */\n    static async encryptOtpKdf(data, key) {\n        if (data.length !== CryptoUtils.ENCRYPTION_INPUT_SIZE) throw new Error('Invalid data size for encryption');\n\n        const salt = new Uint8Array(CryptoUtils.ENCRYPTION_SALT_LENGTH);\n        CryptoWorker.lib.getRandomValues(salt);\n\n        const buf = new SerialBuffer(CryptoUtils.ENCRYPTION_SIZE);\n        buf.writeUint8(2); // Argon2 KDF, Hash checksum\n        buf.writeUint8(Math.log2(CryptoUtils.ENCRYPTION_KDF_ROUNDS));\n        buf.write(await CryptoUtils.otpKdf(data, key, salt, CryptoUtils.ENCRYPTION_KDF_ROUNDS));\n        buf.write(salt);\n        buf.write(Hash.computeBlake2b(data).subarray(0, CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH));\n        return buf;\n    }\n\n    /**\n     * @param {SerialBuffer} data\n     * @param {Uint8Array} key\n     * @return {Promise.<Uint8Array>}\n     */\n    static async decryptOtpKdf(data, key) {\n        const type = data.readUint8();\n        if (type !== 1 && type !== 2) throw new Error('Unsupported type');\n        const roundsLog = data.readUint8();\n        if (roundsLog > 32) throw new Error('Rounds out-of-bounds');\n        const rounds = Math.pow(2, roundsLog);\n        const encryptedData = data.read(CryptoUtils.ENCRYPTION_INPUT_SIZE);\n        const salt = data.read(CryptoUtils.ENCRYPTION_SALT_LENGTH);\n        const check = data.read(CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH);\n\n        const decryptedData = await CryptoUtils.otpKdf(encryptedData, key, salt, rounds);\n\n        // Validate checksum.\n        let checksum;\n        switch (type) {\n            case 1: {\n                const privateKey = new PrivateKey(decryptedData);\n                const publicKey = PublicKey.derive(privateKey);\n                checksum = publicKey.hash();\n                break;\n            }\n            case 2: {\n                checksum = Hash.computeBlake2b(decryptedData);\n                break;\n            }\n        }\n\n        if (!BufferUtils.equals(checksum.subarray(0, CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH), check)) {\n            throw new Error('Invalid key');\n        }\n\n        return decryptedData;\n    }\n}\nCryptoUtils.SHA512_BLOCK_SIZE = 128;\nCryptoUtils.ENCRYPTION_INPUT_SIZE = 32;\nCryptoUtils.ENCRYPTION_KDF_ROUNDS = 256;\nCryptoUtils.ENCRYPTION_CHECKSUM_LENGTH = 4;\nCryptoUtils.ENCRYPTION_SALT_LENGTH = 16;\nCryptoUtils.ENCRYPTION_SIZE = /*version + rounds*/ 2 + CryptoUtils.ENCRYPTION_INPUT_SIZE + CryptoUtils.ENCRYPTION_SALT_LENGTH + CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH;\n\nClass.register(CryptoUtils);\n","class GenesisConfig {\n    static main() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['main']);\n    }\n\n    static test() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['test']);\n    }\n\n    static dev() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['dev']);\n    }\n\n    static bounty() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['bounty']);\n    }\n\n    /**\n     * @param {{NETWORK_ID:number,NETWORK_NAME:string}} config\n     */\n    static init(config) {\n        if (GenesisConfig._config) throw new Error('GenesisConfig already initialized');\n        if (!config.NETWORK_ID) throw new Error('Config is missing network id');\n        if (!config.NETWORK_NAME) throw new Error('Config is missing network name');\n\n        GenesisConfig._config = config;\n    }\n\n    /**\n     * @type {number}\n     */\n    static get NETWORK_ID() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.NETWORK_ID;\n    }\n\n    /**\n     * @type {string}\n     */\n    static get NETWORK_NAME() {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.NETWORK_NAME;\n    }\n}\nClass.register(GenesisConfig);\n\nGenesisConfig.CONFIGS = {\n    'main': {\n        NETWORK_ID: 42,\n        NETWORK_NAME: 'main'\n    },\n\n    'test': {\n        NETWORK_ID: 1,\n        NETWORK_NAME: 'test'\n    },\n\n    'dev': {\n        NETWORK_ID: 2,\n        NETWORK_NAME: 'dev'\n    },\n\n    'bounty': {\n        NETWORK_ID: 3,\n        NETWORK_NAME: 'bounty'\n    }\n};\n","    exports._loaded = true;\n    if (typeof exports._onload === 'function') exports._onload();\n    return exports;\n})(Nimiq);\n"]}