{"version":3,"sources":["Class.js","PlatformUtils.js","LogNative.js","Log.js","IWorker.js","WasmHelper.js","CryptoUtils.js","CryptoWorker.js","CryptoWorkerImpl.js","BigNumber.js","NumberUtils.js","BufferUtils.js","SerialBuffer.js","MinerWorker.js","MinerWorkerImpl.js","MinerWorkerPool.js","GenesisConfig.js","ArrayUtils.js","Assert.js","MerkleTree.js","MerklePath.js","Policy.js","Serializable.js","Hash.js","PublicKey.js","Signature.js","Address.js","Account.js","PrunedAccount.js","BasicAccount.js","Contract.js","HashedTimeLockedContract.js","VestingContract.js","BlockHeader.js","BlockInterlink.js","BlockBody.js","BlockUtils.js","Block.js","Transaction.js","SignatureProof.js","BasicTransaction.js","ExtendedTransaction.js"],"names":["Class","scope","exports","self","window","[object Object]","cls","name","register","PlatformUtils","isBrowser","process","require","RTCPeerConnection","webkitRTCPeerConnection","location","protocol","navigator","onLine","isNodeJs","test","platform","LogNative","this","_global_level","Log","INFO","_tag_levels","localStorage","c","getItem","JSON","parse","e","console","warn","tag","level","setItem","stringify","args","isLoggable","unshift","Level","toStringTag","Date","toTimeString","substr","error","ERROR","apply","WARNING","info","debug","DEBUG","trace","TRACE","log","instance","_instance","native","_native","setLoggable","get","l","i","length","toString","constructor","msg","message","arguments","Array","prototype","slice","call","undefined","VERBOSE","ASSERT","v","isNaN","parseInt","toLowerCase","d","bind","w","t","IWorker","clazz","worker","Proxy","workerScript","_workersSupported","Nimiq","_path","createProxy","Worker","URL","createObjectURL","Blob","replace","_workerImplementation","init","size","Pool","startWorkerForProxy","start","data","command","res","postMessage","status","result","id","areWorkersAsync","_insideWebWorker","WorkerGlobalScope","_global","global","baseClazz","impl","onmessage","stubBaseOnMessage","url","resolve","head","document","getElementsByTagName","script","createElement","type","src","ret","setTimeout","onreadystatechange","onload","appendChild","proxyClass","super","_name","_messageId","_worker","_receive","_waiting","Map","_invoke","then","cb","delete","WorkerProxy","Promise","obj","set","funcName","Object","getOwnPropertyNames","Stub","finalRes","_result","_onmessage","close","poolClass","proxyInitializer","_proxyInitializer","_poolSize","_workers","_freeWorkers","_waitingCalls","_updateToSize","poolSize","_size","catch","push","shift","_step","indexOf","destroy","workerPromises","createdWorkers","all","pop","idx","splice","_moduleLoadedCallbacks","WasmHelper","_importStarted","importWasmBrowser","importScriptBrowser","_importFinished","importWasmNodeJs","importScriptNodeJs","wasm","module","_adjustWasmPath","WebAssembly","xhr","XMLHttpRequest","open","responseType","wasmBinary","response","onerror","send","fs","readFileSync","buf","u","Uint8Array","toUint8Array","asm","_adjustScriptPath","moduleSettings","async","reject","onRuntimeInitialized","importScripts","_loadBrowserScript","__dirname","CryptoUtils","key","SHA512_BLOCK_SIZE","SerialBuffer","Hash","computeSha512","iKey","oKey","byte","innerHash","BufferUtils","concatTypedArrays","password","salt","iterations","derivedKeyLength","hashLength","SIZE","Algorithm","SHA512","Math","pow","Error","ceil","r","derivedKey","write","writeUint32","computeHmacSha512","j","k","xor","CryptoWorker","getInstanceAsync","kdf","ENCRYPTION_INPUT_SIZE","ENCRYPTION_SALT_LENGTH","lib","getRandomValues","ENCRYPTION_SIZE","writeUint8","log2","ENCRYPTION_KDF_ROUNDS","otpKdf","computeBlake2b","subarray","ENCRYPTION_CHECKSUM_LENGTH","readUint8","roundsLog","rounds","encryptedData","read","check","decryptedData","checksum","privateKey","PrivateKey","PublicKey","derive","hash","equals","CryptoLib","_workerAsync","startWorkerPoolForProxy","input","inputs","block","transactionValid","timeNow","genesisHash","networkId","CryptoWorkerImpl","_superInit","doImportBrowser","out","getSize","ARGON2D","NodeNative","node_argon2","stackPtr","Module","stackSave","hashSize","wasmOut","stackAlloc","wasmIn","HEAPU8","buffer","_nimiq_argon2","stackRestore","hashes","stackTmp","node_kdf","wasmSalt","_nimiq_kdf","blockSerialized","GenesisConfig","GENESIS_HASH","unserialize","NETWORK_ID","Block","body","transactions","_valid","valid","_verify","header","interlinkHash","interlink","bodyHash","serialize","prepareForWorkerUse","globalObject","BigNumber","isNumeric","mathceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","a","s","z","charCodeAt","compare","x","y","b","xc","yc","intCheck","min","max","isArray","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","alphabet","isNum","round","search","substring","format","rm","c0","ne","maxOrMin","method","m","normalise","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","p","hasOwnProperty","crypto","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","lt","minimum","gt","random","dp","rand","Uint32Array","copy","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","NumberUtils","val","Number","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","bin","String","fromCharCode","string","u8","TextDecoder","_ISO_8859_15_DECODER","decode","num","_BASE64_LOOKUP","end","tmp","output","_tripletToBase64","join","extraBytes","parts","len2","_base64encodeChunk","Buffer","from","btoa","_codePointTextDecoder","_base64fromByteArray","base64","atob","toBase64","BASE32_ALPHABET","NIMIQ","symbol","base32","charmap","toUpperCase","forEach","char","hex","code","HEX_ALPHABET","trim","StringUtils","isHexBytes","match","lpad","viewA","viewB","byteLength","BASE64_ALPHABET","RFC4648","RFC4648_HEX","bufferOrArrayOrLength","_view","DataView","_readPos","_writePos","ArrayUtils","readPos","value","writePos","array","getUint8","setUint8","getUint16","setUint16","getUint32","setUint32","isUint64","readUint16","readUint32","readUint64","writeUint16","writeUint64","getFloat64","setFloat64","bytes","toAscii","isMultibyte","fromAscii","view","byteOffset","padding","isUint8","MinerWorker","blockHeader","compact","minNonce","maxNonce","MinerWorkerImpl","_malloc","nonce","_nimiq_argon2_target","_free","MinerWorkerPool","_miningEnabled","_activeNonces","_block","_noncesPerRun","_observable","Observable","_shareCompact","Policy","BLOCK_TARGET_MAX","_runsPerCycle","Infinity","_cycleWait","_superUpdateToSize","cpuSupport","multiMine","fail","node_argon2_target_async","computeArgon2d","noncesPerRun","nonces","runsPerCycle","cycleWait","callback","on","off","shareCompact","nBits","_startMiner","map","nonceRange","_singleMiner","fire","newMin","newRange","uintarr","begin","clamp","list","indices","reverseRange","found","Assert","condition","MerkleTree","values","fnHash","_hash","_computeRoot","light","mid","left","right","leftHash","rightHash","o","MerklePath","nodes","some","it","MerklePathNode","_nodes","leafValue","leafHash","path","_compute","containsLeaf","inner","leftLeaf","rightLeaf","root","node","serializedSize","count","leftBitsSize","leftBits","_compress","reduce","sum","every","_left","coins","SATOSHIS_PER_COIN","satoshis","blockHeight","startHeight","_supplyCacheInterval","startI","_supplyCacheMax","endI","supply","INITIAL_SUPPLY","_supplyCache","endHeight","_supplyAfter","initialSupply","_blockRewardAt","currentSupply","supplyAfter","remaining","TOTAL_SUPPLY","EMISSION_TAIL_START","EMISSION_TAIL_REWARD","EMISSION_SPEED","BLOCK_TIME","BLOCK_SIZE_MAX","DIFFICULTY_BLOCK_WINDOW","DIFFICULTY_MAX_ADJUSTMENT_FACTOR","TRANSACTION_VALIDITY_WINDOW","M","K","DELTA","NUM_BLOCKS_VERIFICATION","NUM_SNAPSHOTS_MAX","Serializable","toHex","arg","algorithm","BLAKE2B","_obj","_algorithm","blake2b","argon2d","computeSha256","SHA256","sha256","fromBase64","fromHex","node_blake2","_nimiq_blake2","node_sha256","_nimiq_sha256","node_sha512","_nimiq_sha512","NULL","_publicKeyDerive","publicKeys","sort","_delinearizeAndAggregatePublicKeys","Address","fromHash","PeerId","publicKeysObj","publicKeysHash","_publicKeysHash","raw","_publicKeysDelinearizeAndAggregate","node_ed25519_public_key_derive","pubKeyBuffer","HEAP8","privKeyBuffer","_ed25519_public_key_derive","fill","publicKey","concatenatedPublicKeys","node_ed25519_hash_public_keys","wasmInPublicKeys","_ed25519_hash_public_keys","hashedPublicKey","node_ed25519_delinearize_public_key","wasmInPublicKey","wasmInPublicKeysHash","_ed25519_delinearize_public_key","delinearizedPublicKey","node_ed25519_aggregate_delinearized_public_keys","_ed25519_aggregate_delinearized_public_keys","aggregatePublicKey","Signature","_signatureCreate","commitment","signatures","_combinePartialSignatures","_signatureVerify","combinedCommitment","partialSignatures","combinedSignature","_aggregatePartialSignatures","sigA","sigB","_scalarsAdd","PartialSignature","node_ed25519_add_scalars","wasmOutSum","wasmInA","wasmInB","_ed25519_add_scalars","node_ed25519_sign","wasmOutSignature","signatureBuffer","wasmInMessage","wasmInPubKey","wasmInPrivKey","_ed25519_sign","signature","node_ed25519_verify","wasmInSignature","_ed25519_verify","SERIALIZED_SIZE","fromUserFriendlyAddress","CCODE","_ibanCheck","fromBase32","withSpaces","toBase32","HEX_SIZE","CONTRACT_CREATION","Account","balance","_type","_balance","TYPE_MAP","has","transaction","transactionsCache","revert","validityStartHeight","withBalance","fee","newBalance","containsTransaction","INITIAL","isInitial","Type","BASIC","VESTING","HTLC","PrunedAccount","address","account","_address","_account","hashCode","BasicAccount","SignatureProof","verifyTransaction","hasFlag","Transaction","Flag","recipientType","withIncomingTransaction","create","Contract","recipient","getContractCreationAddress","HashedTimeLockedContract","sender","hashRoot","hashCount","timeout","totalAmount","isUint32","_sender","_recipient","_hashRoot","_hashCount","_timeout","_totalAmount","hashAlgorithm","toUserFriendlyAddress","proof","ProofType","REGULAR_TRANSFER","hashDepth","preImage","compute","verify","serializeContent","EARLY_RESOLVE","TIMEOUT_RESOLVE","verifyIncomingTransaction","minCap","isSignedBy","withOutgoingTransaction","VestingContract","owner","vestingStart","vestingStepBlocks","vestingStepAmount","vestingTotalAmount","_owner","_vestingStart","_vestingStepBlocks","_vestingStepAmount","_vestingTotalAmount","getMinCap","BlockHeader","prevHash","accountsHash","height","timestamp","version","CURRENT_VERSION","isUint16","isHash","BlockUtils","isValidCompact","_version","_prevHash","_interlinkHash","_bodyHash","_accountsHash","_nBits","_height","_timestamp","_nonce","SUPPORTED_VERSIONS","includes","isProofOfWork","target","prevHeader","_pow","hard","compactToTarget","difficulty","compactToDifficulty","Version","V1","BlockInterlink","repeatBitsSize","repeatBits","lastHash","compressed","_hashes","_repeatBits","_compressed","computeRoot","BlockBody","extraData","minerAddr","prunedAccounts","_minerAddr","_extraData","_transactions","_prunedAccounts","extraDataLength","numTransactions","numPrunedAccounts","tx","acc","previousTx","compareBlockOrder","previousAcc","isToBePruned","getMerkleLeafs","addresses","transactionCount","getTargetHeight","targetToCompact","difficultyToTarget","targetToDifficulty","hashToTarget","getTargetDepth","isValidTarget","headBlock","tailBlock","deltaTotalDifficulty","that","actualTime","adjustment","averageDifficulty","nextTarget","_header","_interlink","_body","time","isLight","now","blockVerify","TIMESTAMP_DRIFT_MAX","verifyProofOfWork","_verifyInterlink","isFull","_verifyBody","predecessor","isImmediateSuccessorOf","getNextInterlink","prevPow","targetHeight","blockFound","depth","HashSet","addAll","removeAll","depthDiff","commonBlock","thisInterlink","prevInterlink","isInterlinkSuccessorOf","nextVersion","thisPowDepth","getHashDepth","nextTargetDepth","numOccurrences","senderType","flags","_format","_senderType","_recipientType","_value","_fee","_networkId","_validityStartHeight","_flags","_data","_proof","FORMAT_MAP","serializedContentSize","verifyOutgoingTransaction","recCompare","senderCompare","feePerByte","flag","Format","EXTENDED","NONE","ALL","signerKey","merklePath","_publicKey","_merklePath","_signature","merkleRoot","BasicTransaction","senderPubKey","singleSig","toAddress","_signatureProof","ExtendedTransaction","dataSize","proofSize"],"mappings":"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","file":"worker.js","sourcesContent":["class Class {\n    static get scope() {\n        if (typeof exports !== 'undefined') return exports;\n        if (typeof self !== 'undefined') return self;\n        return window;\n    }\n\n    static register(cls) {\n        if (typeof exports !== 'undefined') exports[cls.name] = cls;\n    }\n}\nClass.register(Class);\n","class PlatformUtils {\n    /**\n     * @returns {boolean}\n     */\n    static isBrowser() {\n        return typeof window !== 'undefined';\n    }\n\n    /**\n     * @return {boolean}\n     */\n    static isNodeJs() {\n        return !PlatformUtils.isBrowser() && typeof process === 'object' && typeof require === 'function';\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWebRTC() {\n        const RTCPeerConnection = PlatformUtils.isBrowser() ? (window.RTCPeerConnection || window.webkitRTCPeerConnection) : null;\n        return !!RTCPeerConnection;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWS() {\n        return !PlatformUtils.isBrowser() || (location && location.protocol === 'http:');\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isOnline() {\n        return (!PlatformUtils.isBrowser() || !('onLine' in window.navigator)) || window.navigator.onLine;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isWindows() {\n        return PlatformUtils.isNodeJs() && /^win/.test(process.platform);\n    }\n}\nClass.register(PlatformUtils);\n","class LogNative {\n    constructor() {\n        this._global_level = Log.INFO;\n        this._tag_levels = {};\n        try {\n            if (window.localStorage) {\n                try {\n                    let c = window.localStorage.getItem('log_tag_levels');\n                    if (c && typeof c === 'string') c = JSON.parse(c);\n                    if (c && typeof c === 'object') this._tag_levels = c;\n                } catch (e) {\n                    console.warn('Failed to load log configuration from local storage.');\n                }\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n\n    isLoggable(tag, level) {\n        if (tag && this._tag_levels[tag]) {\n            return this._tag_levels[tag] <= level;\n        }\n        if (this._tag_levels['*']) {\n            return this._tag_levels['*'] <= level;\n        }\n        return this._global_level <= level;\n    }\n\n    setLoggable(tag, level) {\n        if (tag && tag.name) tag = tag.name;\n        this._tag_levels[tag] = level;\n        if (window.localStorage) {\n            window.localStorage.setItem('log_tag_levels', JSON.stringify(this._tag_levels));\n        }\n    }\n\n    msg(level, tag, args) {\n        if (tag && tag.name) tag = tag.name;\n        if (!this.isLoggable(tag, level)) return;\n        if (tag) args.unshift(tag + ':');\n        args.unshift(`[${Log.Level.toStringTag(level)} ${new Date().toTimeString().substr(0, 8)}]`);\n        if (console.error && level >= Log.ERROR) {\n            console.error.apply(console, args);\n        } else if (console.warn && level >= Log.WARNING) {\n            console.warn.apply(console, args);\n        } else if (console.info && level >= Log.INFO) {\n            console.info.apply(console, args);\n        } else if (console.debug && level >= Log.DEBUG) {\n            console.debug.apply(console, args);\n        } else if (console.trace && level <= Log.TRACE) {\n            console.trace.apply(console, args);\n        } else {\n            console.log.apply(console, args);\n        }\n    }\n}\nClass.register(LogNative);\n","class Log {\n    /**\n     * @returns {Log}\n     */\n    static get instance() {\n        if (!Log._instance) {\n            Log._instance = new Log(new LogNative());\n        }\n        return Log._instance;\n    }\n\n    /**\n     * @param {LogNative} native\n     */\n    constructor(native) {\n        /** @type {LogNative} */\n        this._native = native;\n    }\n\n    /**\n     * @param {string} tag\n     * @param {Log.Level} level\n     */\n    setLoggable(tag, level) {\n        this._native.setLoggable(tag, Log.Level.get(level));\n    }\n\n    /** @type {Log.Level} */\n    get level() {\n        return this._native._global_level;\n    }\n\n    /** @type {Log.Level} */\n    set level(l) {\n        this._native._global_level = Log.Level.get(l);\n    }\n\n    /**\n     * @param {Log.Level} level\n     * @param {string|{name:string}} tag\n     * @param {Array} args\n     */\n    msg(level, tag, args) {\n        if (this._native.isLoggable(tag, level)) {\n            for (let i = 0; i < args.length; ++i) {\n                if (typeof args[i] === 'function') {\n                    args[i] = args[i]();\n                }\n                if (typeof args[i] === 'object') {\n                    if (typeof args[i].toString === 'function') {\n                        args[i] = args[i].toString();\n                    } else if (args[i].constructor && args[i].constructor.name) {\n                        args[i] = `{Object: ${args[i].constructor.name}}`;\n                    } else {\n                        args[i] = '{Object}';\n                    }\n                }\n            }\n            this._native.msg(level, tag, args);\n        }\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static d(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.DEBUG, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static e(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.ERROR, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static i(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.INFO, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static v(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.VERBOSE, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static w(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.WARNING, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static t(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.TRACE, tag, args);\n    }\n}\n\n/**\n * @enum {number|string}\n */\nLog.Level = {\n    TRACE: 1,\n    VERBOSE: 2,\n    DEBUG: 3,\n    INFO: 4,\n    WARNING: 5,\n    ERROR: 6,\n    ASSERT: 7,\n\n    /**\n     * @param {Log.Level} level\n     * @returns {string}\n     */\n    toStringTag: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'T';\n            case Log.Level.VERBOSE:\n                return 'V';\n            case Log.Level.DEBUG:\n                return 'D';\n            case Log.Level.INFO:\n                return 'I';\n            case Log.Level.WARNING:\n                return 'W';\n            case Log.Level.ERROR:\n                return 'E';\n            case Log.Level.ASSERT:\n                return 'A';\n            default:\n                return '*';\n        }\n    },\n\n    toString: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'trace';\n            case Log.Level.VERBOSE:\n                return 'verbose';\n            case Log.Level.DEBUG:\n                return 'debug';\n            case Log.Level.INFO:\n                return 'info';\n            case Log.Level.WARNING:\n                return 'warn';\n            case Log.Level.ERROR:\n                return 'error';\n            case Log.Level.ASSERT:\n                return 'assert';\n            default:\n                return 'unknown';\n        }\n    },\n\n    /**\n     * @param {string|number|Log.Level} v\n     * @returns {Log.Level}\n     */\n    get: function (v) {\n        if (typeof v === 'number') return /** @type {Log.Level} */ v;\n        if (!isNaN(parseInt(v))) return /** @type {Log.Level} */ parseInt(v);\n        switch (v.toLowerCase()) {\n            case 't':\n            case 'trace':\n                return Log.Level.TRACE;\n            case 'v':\n            case 'verbose':\n                return Log.Level.VERBOSE;\n            case 'd':\n            case 'debug':\n                return Log.Level.DEBUG;\n            case 'i':\n            case 'info':\n                return Log.Level.INFO;\n            case 'w':\n            case 'warn':\n            case 'warning':\n                return Log.Level.WARNING;\n            case 'e':\n            case 'error':\n            case 'exception':\n                return Log.Level.ERROR;\n            case 'a':\n            case 'assert':\n            case 'assertion':\n                return Log.Level.ASSERT;\n        }\n        return /** @type {Log.Level} */ 0;\n    }\n};\nLog.TRACE = Log.Level.TRACE;\nLog.VERBOSE = Log.Level.VERBOSE;\nLog.DEBUG = Log.Level.DEBUG;\nLog.INFO = Log.Level.INFO;\nLog.WARNING = Log.Level.WARNING;\nLog.ERROR = Log.Level.ERROR;\nLog.ASSERT = Log.Level.ASSERT;\nLog._instance = null;\n\nLog.d.tag = (tag) => Log.d.bind(null, tag);\nLog.e.tag = (tag) => Log.e.bind(null, tag);\nLog.i.tag = (tag) => Log.i.bind(null, tag);\nLog.v.tag = (tag) => Log.v.bind(null, tag);\nLog.w.tag = (tag) => Log.w.bind(null, tag);\nLog.t.tag = (tag) => Log.t.bind(null, tag);\n\nClass.register(Log);\n","/**\n * @interface\n */\nclass IWorker {\n    static async createProxy(clazz, name, worker) {\n        return new (IWorker.Proxy(clazz))(worker, name);\n    }\n\n    static async startWorkerForProxy(clazz, name, workerScript) {\n        if (!IWorker._workersSupported) {\n            await IWorker._workerImplementation[clazz.name].init(name);\n            return IWorker._workerImplementation[clazz.name];\n        } else {\n            if (!workerScript) {\n                workerScript = `${Nimiq._path}worker.js`;\n            }\n            return IWorker.createProxy(clazz, name, new Worker(window.URL.createObjectURL(new Blob([`Nimiq = {_path: '${Nimiq._path}'}; importScripts('${workerScript.replace(/'/g, '')}');`]))));\n        }\n    }\n\n    static async startWorkerPoolForProxy(clazz, name, size, workerScript) {\n        return (new (IWorker.Pool(clazz))((name) => IWorker.startWorkerForProxy(clazz, name, workerScript), name, size)).start();\n    }\n\n    static async stubBaseOnMessage(msg) {\n        try {\n            if (msg.data.command === 'init') {\n                if (IWorker._workerImplementation[msg.data.args[0]]) {\n                    const res = await IWorker._workerImplementation[msg.data.args[0]].init(msg.data.args[1]);\n                    self.postMessage({status: 'OK', result: res, id: msg.data.id});\n                } else {\n                    self.postMessage({status: 'error', result: 'Unknown worker!', id: msg.data.id});\n                }\n            } else {\n                self.postMessage({status: 'error', result: 'Worker not yet initialized!', id: msg.data.id});\n            }\n        } catch (e) {\n            self.postMessage({status: 'error', result: e, id: msg.data.id});\n        }\n    }\n\n    static get _workersSupported() {\n        return typeof Worker !== 'undefined';\n    }\n\n    static get areWorkersAsync() {\n        return IWorker._workersSupported;\n    }\n\n    static get _insideWebWorker() {\n        return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n\n    static prepareForWorkerUse(baseClazz, impl) {\n        if (IWorker._insideWebWorker) {\n            // Only inside WebWorker\n            self.onmessage = IWorker.stubBaseOnMessage;\n        }\n        IWorker._workerImplementation = IWorker._workerImplementation || {};\n        IWorker._workerImplementation[baseClazz.name] = impl;\n    }\n\n    static _loadBrowserScript(url, resolve) {\n        // Adding the script tag to the head as suggested before\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n\n        // Then bind the event to the callback function.\n        // There are several events for cross browser compatibility.\n        // These events might occur before processing, so delay them a bit.\n        const ret = () => window.setTimeout(resolve, 100);\n        script.onreadystatechange = ret;\n        script.onload = ret;\n\n        // Fire the loading\n        head.appendChild(script);\n    }\n\n    static Proxy(clazz) {\n        const proxyClass = class extends clazz {\n            /**\n             * @param {Worker} worker\n             * @param {string} [name]\n             */\n            constructor(worker, name) {\n                super();\n                this._name = name;\n                this._messageId = 0;\n                this._worker = worker;\n                this._worker.onmessage = this._receive.bind(this);\n                /** @type {Map.<number,{resolve:Function,error:Function}>} */\n                this._waiting = new Map();\n                return this._invoke('init', [clazz.name, name]).then(() => { return this; });\n            }\n\n            _receive(msg) {\n                const cb = this._waiting.get(msg.data.id);\n                if (!cb) {\n                    Log.w(WorkerProxy, 'Unknown reply', msg);\n                } else {\n                    this._waiting.delete(msg.data.id);\n                    if (msg.data.status === 'OK') {\n                        cb.resolve(msg.data.result);\n                    } else if (msg.data.status === 'error') {\n                        cb.error(msg.data.result);\n                    }\n                }\n            }\n\n            /**\n             * @param {string} command\n             * @param {object[]} [args]\n             * @returns {Promise}\n             * @private\n             */\n            _invoke(command, args = []) {\n                return new Promise((resolve, error) => {\n                    const obj = {command: command, args: args, id: this._messageId++};\n                    this._waiting.set(obj.id, {resolve, error});\n                    this._worker.postMessage(obj);\n                });\n            }\n\n            destroy() {\n                return this._invoke('destroy');\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                proxyClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return proxyClass;\n    }\n\n    /**\n     * @param {object} clazz\n     * @return {Stub}\n     * @constructor\n     */\n    static Stub(clazz) {\n        const Stub = class extends clazz {\n            constructor() {\n                super();\n            }\n\n            _result(msg, status, result) {\n                self.postMessage({status, result, id: msg.data.id});\n            }\n\n            _onmessage(msg) {\n                try {\n                    const res = this._invoke(msg.data.command, msg.data.args);\n                    if (res instanceof Promise) {\n                        res.then((finalRes) => { this._result(msg, 'OK', finalRes); });\n                    } else {\n                        this._result(msg, 'OK', res);\n                    }\n                } catch (e) {\n                    this._result(msg, 'error', e.message || e);\n                }\n            }\n\n            init(name) {\n                this._name = name;\n                if (IWorker._insideWebWorker) {\n                    self.name = name;\n                    self.onmessage = (msg) => this._onmessage(msg);\n                }\n            }\n\n            _invoke(command, args) {\n                return this[command].apply(this, args);\n            }\n\n            destroy() {\n                if (IWorker._insideWebWorker) {\n                    self.close();\n                }\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                Stub.prototype[funcName] = function () {\n                    throw `Not implemented in IWorker Stub: ${funcName}`;\n                };\n            }\n        }\n        return Stub;\n    }\n\n    static Pool(clazz) {\n        const poolClass = class extends clazz {\n            /**\n             *\n             * @param {function(string):Promise} proxyInitializer\n             * @param {string} [name]\n             * @param {number} [size] Number of workers in this pool.\n             */\n            constructor(proxyInitializer, name = 'pool', size = 1) {\n                super();\n                /** @type {function(string):Promise} */\n                this._proxyInitializer = proxyInitializer;\n                /** @type {string} */\n                this._name = name;\n                /** @type {number} */\n                this._poolSize = size;\n                /** @type {Array} */\n                this._workers = [];\n                /** @type {Array} */\n                this._freeWorkers = [];\n                /** @type {Array.<{name:string, args:Array, resolve:function, error:function}>} */\n                this._waitingCalls = [];\n            }\n\n            async start() {\n                await this._updateToSize();\n\n                return this;\n            }\n\n            get poolSize() {\n                return this._poolSize;\n            }\n\n            set poolSize(_size) {\n                this._poolSize = _size;\n                this._updateToSize().catch(Log.w.tag(IWorker));\n            }\n\n            destroy() {\n                this._poolSize = 0;\n                return this._updateToSize();\n            }\n\n            /**\n             * @param {string} name Name of the function to call on a worker\n             * @param {Array} args Arguments to pass to the function\n             * @returns {Promise}\n             */\n            _invoke(name, args) {\n                if (IWorker._workersSupported) {\n                    return new Promise((resolve, error) => {\n                        this._waitingCalls.push({name, args, resolve, error});\n                        const worker = this._freeWorkers.shift();\n                        if (worker) {\n                            this._step(worker).catch(Log.w.tag(IWorker));\n                        }\n                    });\n                } else {\n                    return this._workers[0][name].apply(this._workers[0], args);\n                }\n            }\n\n            /**\n             * @param worker\n             * @returns {Promise.<void>}\n             * @private\n             */\n            async _step(worker) {\n                let call = this._waitingCalls.shift();\n                while (call) {\n                    try {\n                        // eslint-disable-next-line no-await-in-loop\n                        call.resolve(await worker[call.name].apply(worker, call.args));\n                    } catch (e) {\n                        call.error(e);\n                    }\n                    if (this._workers.indexOf(worker) === -1) {\n                        worker.destroy();\n                        return;\n                    }\n                    call = this._waitingCalls.shift();\n                }\n                this._freeWorkers.push(worker);\n            }\n\n            async _updateToSize() {\n                if (typeof Worker === 'undefined' && this._poolSize > 1) {\n                    Log.d(IWorker, 'Pool of size larger than 1 requires WebWorker support.');\n                    this._poolSize = 1;\n                }\n\n                const workerPromises = [];\n                while (this._workers.length + workerPromises.length < this._poolSize) {\n                    workerPromises.push(this._proxyInitializer(`${this._name}#${this._workers.length + workerPromises.length}`));\n                }\n                const createdWorkers = await Promise.all(workerPromises);\n                for (const worker of createdWorkers) {\n                    this._workers.push(worker);\n                    this._step(worker).catch(Log.w.tag(IWorker));\n                }\n\n                while (this._workers.length > this._poolSize) {\n                    const worker = this._freeWorkers.shift() || this._workers.pop();\n                    const idx = this._workers.indexOf(worker);\n                    if (idx >= 0) {\n                        // This was a free worker, also remove it from the worker list and destroy it now.\n                        this._workers.splice(idx, 1);\n                        worker.destroy();\n                    }\n                }\n                return this;\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                poolClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return poolClass;\n    }\n}\n\nIWorker._moduleLoadedCallbacks = {};\nIWorker._workerImplementation = {};\nClass.register(IWorker);\n","// TODO: Split platform specific code into subdirs\n// i.e. no `require()` or `window.*` in generic\n// Using `require()`s in browser specific code are likely to cause problems\n// with tools like webpack that try to resolve those for the browser.\n\nclass WasmHelper {\n\n    static async doImportBrowser() {\n        if (PlatformUtils.isNodeJs()) return;\n        if (WasmHelper._importStarted) {\n            Log.e(WasmHelper, 'doImportBrowser invoked twice');\n            return;\n        }\n        WasmHelper._importStarted = true;\n        if (await WasmHelper.importWasmBrowser('worker-wasm.wasm')) {\n            await WasmHelper.importScriptBrowser('worker-wasm.js');\n        } else {\n            await WasmHelper.importScriptBrowser('worker-js.js');\n        }\n        WasmHelper._importFinished = true;\n    }\n\n    static doImportNodeJs() {\n        if (!PlatformUtils.isNodeJs()) return;\n        if (WasmHelper.importWasmNodeJs('worker-wasm.wasm')) {\n            WasmHelper.importScriptNodeJs('worker-wasm.js');\n        } else {\n            WasmHelper.importScriptNodeJs('worker-js.js');\n        }\n    }\n\n    /**\n     * @param {string} wasm\n     * @param {string} module\n     * @returns {Promise.<boolean>}\n     */\n    static importWasmBrowser(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return Promise.resolve(false);\n        }\n\n        return new Promise((resolve) => {\n            try {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', wasm, true);\n                xhr.responseType = 'arraybuffer';\n                xhr.onload = function () {\n                    WasmHelper._global[module] = WasmHelper._global[module] || {};\n                    WasmHelper._global[module].wasmBinary = xhr.response;\n                    resolve(true);\n                };\n                xhr.onerror = function () {\n                    Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                    resolve(false);\n                };\n                xhr.send(null);\n            } catch (e) {\n                Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                resolve(false);\n            }\n        });\n    }\n\n    static importWasmNodeJs(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return false;\n        }\n\n        const toUint8Array = function (buf) {\n            const u = new Uint8Array(buf.length);\n            for (let i = 0; i < buf.length; ++i) {\n                u[i] = buf[i];\n            }\n            return u;\n        };\n        const fs = require('fs');\n        try {\n            const data = fs.readFileSync(wasm);\n            WasmHelper._global[module] = WasmHelper._global[module] || {};\n            WasmHelper._global[module].wasmBinary = toUint8Array(data);\n            return true;\n        } catch (e) {\n            Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}: ${e}`);\n            return false;\n        }\n    }\n\n    static importScriptBrowser(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n        return new Promise(async (resolve, reject) => {\n            if (module) {\n                moduleSettings.onRuntimeInitialized = () => resolve(true);\n            }\n            if (typeof importScripts === 'function') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    importScripts(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof window === 'object') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    WasmHelper._loadBrowserScript(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof require === 'function') {\n                WasmHelper._global[module] = require(script)(moduleSettings);\n                if (!module) resolve(true);\n            } else {\n                reject('No way to load scripts.');\n            }\n        });\n    }\n\n    static importScriptNodeJs(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n\n        if (typeof require === 'function') {\n            WasmHelper._global[module] = require(script)(moduleSettings);\n            if (!module) return true;\n        }\n        return false;\n    }\n\n    static fireModuleLoaded(module = 'Module') {\n        if (typeof WasmHelper._moduleLoadedCallbacks[module] === 'function') {\n            WasmHelper._moduleLoadedCallbacks[module]();\n            WasmHelper._moduleLoadedCallbacks[module] = null;\n        }\n    }\n\n    static _loadBrowserScript(url) {\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        head.appendChild(script);\n    }\n\n    static _adjustWasmPath(wasm) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) wasm = `${Nimiq._path}${wasm}`;\n        if (typeof __dirname === 'string' && wasm.indexOf('/') === -1) wasm = `${__dirname}/${wasm}`;\n        return wasm;\n    }\n\n    static _adjustScriptPath(script) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) script = `${Nimiq._path}${script}`;\n        if (typeof __dirname === 'string' && script.indexOf('/') === -1) script = `${__dirname}/${script}`;\n        return script;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n}\nWasmHelper._moduleLoadedCallbacks = {};\n\nClass.register(WasmHelper);\n\n","class CryptoUtils {\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} data\n     * @return {Uint8Array}\n     */\n    static computeHmacSha512(key, data) {\n        if (key.length > CryptoUtils.SHA512_BLOCK_SIZE) {\n            key = new SerialBuffer(Hash.computeSha512(key));\n        }\n\n        const iKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        const oKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        for (let i = 0; i < CryptoUtils.SHA512_BLOCK_SIZE; ++i) {\n            const byte = key[i] || 0;\n            iKey[i] = 0x36 ^ byte;\n            oKey[i] = 0x5c ^ byte;\n        }\n\n        const innerHash = Hash.computeSha512(BufferUtils.concatTypedArrays(iKey, data));\n        return Hash.computeSha512(BufferUtils.concatTypedArrays(oKey, innerHash));\n    }\n\n    /**\n     * @param {Uint8Array} password\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @param {number} derivedKeyLength\n     * @return {Uint8Array}\n     */\n    static computePBKDF2sha512(password, salt, iterations, derivedKeyLength) {\n        // Following https://www.ietf.org/rfc/rfc2898.txt\n        const hashLength = Hash.SIZE.get(Hash.Algorithm.SHA512);\n\n        if (derivedKeyLength > (Math.pow(2, 32) - 1) * hashLength) {\n            throw new Error('Derived key too long');\n        }\n\n        const l = Math.ceil(derivedKeyLength / hashLength);\n        const r = derivedKeyLength - (l - 1) * hashLength;\n\n        const derivedKey = new SerialBuffer(derivedKeyLength);\n        for (let i = 1; i <= l; i++) {\n            let u = new SerialBuffer(salt.length + 4);\n            u.write(salt);\n            u.writeUint32(i);\n\n            u = CryptoUtils.computeHmacSha512(password, u);\n            const t = u;\n            for (let j = 1; j < iterations; j++) {\n                u = CryptoUtils.computeHmacSha512(password, u);\n                for (let k = 0; k < t.length; k++) {\n                    t[k] ^= u[k];\n                }\n            }\n\n            if (i < l) {\n                derivedKey.write(t);\n            } else {\n                derivedKey.write(t.slice(0, r));\n            }\n        }\n        return derivedKey;\n    }\n\n    /**\n     * @param {Uint8Array} message\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @return {Promise<Uint8Array>}\n     */\n    static async otpKdf(message, key, salt, iterations) {\n        return BufferUtils.xor(message, await (await CryptoWorker.getInstanceAsync()).kdf(key, salt, iterations));\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @param {Uint8Array} key\n     * @return {Promise.<Uint8Array>}\n     */\n    static async encryptOtpKdf(data, key) {\n        if (data.length !== CryptoUtils.ENCRYPTION_INPUT_SIZE) throw new Error('Invalid data size for encryption');\n\n        const salt = new Uint8Array(CryptoUtils.ENCRYPTION_SALT_LENGTH);\n        CryptoWorker.lib.getRandomValues(salt);\n\n        const buf = new SerialBuffer(CryptoUtils.ENCRYPTION_SIZE);\n        buf.writeUint8(2); // Argon2 KDF, Hash checksum\n        buf.writeUint8(Math.log2(CryptoUtils.ENCRYPTION_KDF_ROUNDS));\n        buf.write(await CryptoUtils.otpKdf(data, key, salt, CryptoUtils.ENCRYPTION_KDF_ROUNDS));\n        buf.write(salt);\n        buf.write(Hash.computeBlake2b(data).subarray(0, CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH));\n        return buf;\n    }\n\n    /**\n     * @param {SerialBuffer} data\n     * @param {Uint8Array} key\n     * @return {Promise.<Uint8Array>}\n     */\n    static async decryptOtpKdf(data, key) {\n        const type = data.readUint8();\n        if (type !== 1 && type !== 2) throw new Error('Unsupported type');\n        const roundsLog = data.readUint8();\n        if (roundsLog > 32) throw new Error('Rounds out-of-bounds');\n        const rounds = Math.pow(2, roundsLog);\n        const encryptedData = data.read(CryptoUtils.ENCRYPTION_INPUT_SIZE);\n        const salt = data.read(CryptoUtils.ENCRYPTION_SALT_LENGTH);\n        const check = data.read(CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH);\n\n        const decryptedData = await CryptoUtils.otpKdf(encryptedData, key, salt, rounds);\n\n        // Validate checksum.\n        let checksum;\n        switch (type) {\n            case 1: {\n                const privateKey = new PrivateKey(decryptedData);\n                const publicKey = PublicKey.derive(privateKey);\n                checksum = publicKey.hash();\n                break;\n            }\n            case 2: {\n                checksum = Hash.computeBlake2b(decryptedData);\n                break;\n            }\n        }\n\n        if (!BufferUtils.equals(checksum.subarray(0, CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH), check)) {\n            throw new Error('Invalid key');\n        }\n\n        return decryptedData;\n    }\n}\nCryptoUtils.SHA512_BLOCK_SIZE = 128;\nCryptoUtils.ENCRYPTION_INPUT_SIZE = 32;\nCryptoUtils.ENCRYPTION_KDF_ROUNDS = 256;\nCryptoUtils.ENCRYPTION_CHECKSUM_LENGTH = 4;\nCryptoUtils.ENCRYPTION_SALT_LENGTH = 16;\nCryptoUtils.ENCRYPTION_SIZE = /*version + rounds*/ 2 + CryptoUtils.ENCRYPTION_INPUT_SIZE + CryptoUtils.ENCRYPTION_SALT_LENGTH + CryptoUtils.ENCRYPTION_CHECKSUM_LENGTH;\n\nClass.register(CryptoUtils);\n","/**\n * @interface\n */\nclass CryptoWorker {\n    static get lib() { return CryptoLib.instance; }\n\n    /**\n     * @returns {Promise.<CryptoWorker>}\n     */\n    static async getInstanceAsync() {\n        if (!CryptoWorker._workerAsync) {\n            CryptoWorker._workerAsync = await IWorker.startWorkerPoolForProxy(CryptoWorker, 'crypto', 4);\n        }\n        return CryptoWorker._workerAsync;\n    }\n    /**\n     * @param {Uint8Array} input\n     * @returns {Promise.<Uint8Array>}\n     */\n    async computeArgon2d(input) {}\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Promise.<Array.<Uint8Array>>}\n     */\n    async computeArgon2dBatch(inputs) {}\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Promise.<Uint8Array>}\n     */\n    async kdf(key, salt, iterations) {}\n\n    /**\n     * @param {Uint8Array} block\n     * @param {Array.<bool>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(block, transactionValid, timeNow, genesisHash, networkId) {}\n}\n/** @type {CryptoWorker} */\nCryptoWorker._workerAsync = null;\n\nClass.register(CryptoWorker);\n","class CryptoWorkerImpl extends IWorker.Stub(CryptoWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        await WasmHelper.doImportBrowser();\n        CryptoWorker._workerAsync = this;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    computeArgon2d(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Array.<Uint8Array>}\n     */\n    computeArgon2dBatch(inputs) {\n        const hashes = [];\n        if (PlatformUtils.isNodeJs()) {\n            for(const input of inputs) {\n                const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n                const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                hashes.push(out);\n            }\n            return hashes;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const stackTmp = Module.stackSave();\n                for (const input of inputs) {\n                    Module.stackRestore(stackTmp);\n                    const wasmIn = Module.stackAlloc(input.length);\n                    new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                    const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                    if (res !== 0) {\n                        throw res;\n                    }\n                    const hash = new Uint8Array(hashSize);\n                    hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                    hashes.push(hash);\n                }\n                return hashes;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Uint8Array}\n     */\n    kdf(key, salt, iterations) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_kdf(out, new Uint8Array(key), new Uint8Array(salt), 512, iterations);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(key.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, key.length).set(key);\n                const wasmSalt = Module.stackAlloc(salt.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmSalt, salt.length).set(salt);\n                const res = Module._nimiq_kdf(wasmOut, wasmIn, key.length, wasmSalt, salt.length, 512, iterations);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} blockSerialized\n     * @param {Array.<boolean|undefined>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(blockSerialized, transactionValid, timeNow, genesisHash, networkId) {\n        // The worker only uses a stub genesis config.\n        GenesisConfig = {\n            GENESIS_HASH: Hash.unserialize(new SerialBuffer(genesisHash)),\n            NETWORK_ID: networkId\n        };\n\n        const block = Block.unserialize(new SerialBuffer(blockSerialized));\n        for (let i = 0; i < transactionValid.length; i++) {\n            block.body.transactions[i]._valid = transactionValid[i];\n        }\n\n        const valid = await block._verify(timeNow);\n        const pow = await block.header.pow();\n        const interlinkHash = block.interlink.hash();\n        const bodyHash = block.body.hash();\n        return { valid: valid, pow: pow.serialize(), interlinkHash: interlinkHash.serialize(), bodyHash: bodyHash.serialize() };\n    }\n}\n\nIWorker.prepareForWorkerUse(CryptoWorker, new CryptoWorkerImpl());\n",";(function (globalObject) {\n    'use strict';\n\n    /*\n     *      bignumber.js v7.0.1\n     *      A JavaScript library for arbitrary-precision arithmetic.\n     *      https://github.com/MikeMcl/bignumber.js\n     *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n     *      MIT Licensed.\n     *\n     *      BigNumber.prototype methods     |  BigNumber methods\n     *                                      |\n     *      absoluteValue            abs    |  clone\n     *      comparedTo                      |  config               set\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\n     *      dividedBy                div    |      ROUNDING_MODE\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\n     *      exponentiatedBy          pow    |      RANGE\n     *      integerValue                    |      CRYPTO\n     *      isEqualTo                eq     |      MODULO_MODE\n     *      isFinite                        |      POW_PRECISION\n     *      isGreaterThan            gt     |      FORMAT\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\n     *      isInteger                       |  isBigNumber\n     *      isLessThan               lt     |  maximum              max\n     *      isLessThanOrEqualTo      lte    |  minimum              min\n     *      isNaN                           |  random\n     *      isNegative                      |\n     *      isPositive                      |\n     *      isZero                          |\n     *      minus                           |\n     *      modulo                   mod    |\n     *      multipliedBy             times  |\n     *      negated                         |\n     *      plus                            |\n     *      precision                sd     |\n     *      shiftedBy                       |\n     *      squareRoot               sqrt   |\n     *      toExponential                   |\n     *      toFixed                         |\n     *      toFormat                        |\n     *      toFraction                      |\n     *      toJSON                          |\n     *      toNumber                        |\n     *      toPrecision                     |\n     *      toString                        |\n     *      valueOf                         |\n     *\n     */\n\n\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        // EDITABLE\n        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n        // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function clone(configObject) {\n        var div, convertBase, parseNumeric,\n            P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n            ONE = new BigNumber(1),\n\n\n            //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n            // The default values below must be integers within the inclusive ranges stated.\n            // The values can also be changed at run-time using BigNumber.set.\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            // The rounding mode used when rounding to the above decimal places, and when using\n            // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n            // UP         0 Away from zero.\n            // DOWN       1 Towards zero.\n            // CEIL       2 Towards +Infinity.\n            // FLOOR      3 Towards -Infinity.\n            // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n            // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n            // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n            // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n            // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            // The modulo mode used when calculating the modulus: a mod n.\n            // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n            // The remainder (r) is calculated as: r = a - n * q.\n            //\n            // UP        0 The remainder is positive if the dividend is negative, else is negative.\n            // DOWN      1 The remainder has the same sign as the dividend.\n            //             This modulo mode is commonly known as 'truncated division' and is\n            //             equivalent to (a % n) in JavaScript.\n            // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n            // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n            // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n            //             The remainder is always positive.\n            //\n            // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n            // modes are commonly used for the modulus operation.\n            // Although the other rounding modes can also be used, they may not give useful results.\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the exponentiatedBy operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 0,                    // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            },\n\n            // The alphabet used for base conversion.\n            // It must be at least 2 characters long, with no '.' or repeated character.\n            // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n            ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n\n        //------------------------------------------------------------------------------------------\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\n         */\n        function BigNumber(n, b) {\n            var alphabet, c, e, i, isNum, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if (!(x instanceof BigNumber)) {\n\n                // Don't throw on constructor call without new (#81).\n                // '[BigNumber Error] Constructor call without new: {n}'\n                //throw Error(bignumberError + ' Constructor call without new: ' + n);\n                return new BigNumber(n, b);\n            }\n\n            if (b == null) {\n\n                // Duplicate.\n                if (n instanceof BigNumber) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = (n = n.c) ? n.slice() : n;\n                    return;\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum && n * 0 == 0) {\n\n                    // Use `1 / n` to handle minus zero also.\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n                    // Faster path for integers.\n                    if (n === ~~n) {\n                        for (e = 0, i = n; i >= 10; i /= 10, e++);\n                        x.e = e;\n                        x.c = [n];\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\n                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n                }\n\n            } else {\n\n                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n                intCheck(b, 2, ALPHABET.length, 'Base');\n                str = n + '';\n\n                // Allow exponential notation to be used with base 10 argument, while\n                // also rounding to DECIMAL_PLACES as with other bases.\n                if (b == 10) {\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum) {\n\n                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                    if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                    if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n                        throw Error\n                        (tooManyDigits + n);\n                    }\n\n                    // Prevent later check for length on converted number.\n                    isNum = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n\n                    // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                    if (b > 10 && b < 37) str = str.toLowerCase();\n                }\n\n                alphabet = ALPHABET.slice(0, b);\n                e = i = 0;\n\n                // Check that str is a valid base b number.\n                // Don't use RegExp so alphabet can contain special characters.\n                for (len = str.length; i < len; i++) {\n                    if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n                        if (c == '.') {\n\n                            // If '.' is not the first character and it has not be found before.\n                            if (i > e) {\n                                e = len;\n                                continue;\n                            }\n                        }\n\n                        return parseNumeric(x, n + '', isNum, b);\n                    }\n                }\n\n                str = convertBase(str, b, 10, x.s);\n            }\n\n            // Decimal point?\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for (i = 0; str.charCodeAt(i) === 48; i++);\n\n            // Determine trailing zeros.\n            for (len = str.length; str.charCodeAt(--len) === 48;);\n\n            str = str.slice(i, ++len);\n\n            if (str) {\n                len -= i;\n\n                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                if (isNum && BigNumber.DEBUG &&\n                    len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n                    throw Error\n                    (tooManyDigits + (x.s * n));\n                }\n\n                e = e - i - 1;\n\n                // Overflow?\n                if (e > MAX_EXP) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                    // Underflow?\n                } else if (e < MIN_EXP) {\n\n                    // Zero.\n                    x.c = [x.e = 0];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = (e + 1) % LOG_BASE;\n                    if (e < 0) i += LOG_BASE;\n\n                    if (i < len) {\n                        if (i) x.c.push(+str.slice(0, i));\n\n                        for (len -= LOG_BASE; i < len;) {\n                            x.c.push(+str.slice(i, i += LOG_BASE));\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for (; i--; str += '0');\n                    x.c.push(+str);\n                }\n            } else {\n\n                // Zero.\n                x.c = [x.e = 0];\n            }\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.clone = clone;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object with the following optional properties (if the value of a property is\n         * a number, it must be an integer within the inclusive range stated):\n         *\n         *   DECIMAL_PLACES   {number}           0 to MAX\n         *   ROUNDING_MODE    {number}           0 to 8\n         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\n         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\n         *   CRYPTO           {boolean}          true or false\n         *   MODULO_MODE      {number}           0 to 9\n         *   POW_PRECISION       {number}           0 to MAX\n         *   ALPHABET         {string}           A string of two or more unique characters, and not\n         *                                       containing '.'. The empty string, null or undefined\n         *                                       resets the alphabet to its default value.\n         *   FORMAT           {object}           An object with some of the following properties:\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined, except for ALPHABET.\n         *\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = BigNumber.set = function (obj) {\n            var p, v;\n\n            if (obj != null) {\n\n                if (typeof obj == 'object') {\n\n                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        DECIMAL_PLACES = v;\n                    }\n\n                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 8, p);\n                        ROUNDING_MODE = v;\n                    }\n\n                    // EXPONENTIAL_AT {number|number[]}\n                    // Integer, -MAX to MAX inclusive or\n                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, 0, p);\n                            intCheck(v[1], 0, MAX, p);\n                            TO_EXP_NEG = v[0];\n                            TO_EXP_POS = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n                        }\n                    }\n\n                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n                    if (obj.hasOwnProperty(p = 'RANGE')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, -1, p);\n                            intCheck(v[1], 1, MAX, p);\n                            MIN_EXP = v[0];\n                            MAX_EXP = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            if (v) {\n                                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                            } else {\n                                throw Error\n                                (bignumberError + p + ' cannot be zero: ' + v);\n                            }\n                        }\n                    }\n\n                    // CRYPTO {boolean} true or false.\n                    // '[BigNumber Error] CRYPTO not true or false: {v}'\n                    // '[BigNumber Error] crypto unavailable'\n                    if (obj.hasOwnProperty(p = 'CRYPTO')) {\n                        v = obj[p];\n                        if (v === !!v) {\n                            if (v) {\n                                if (typeof crypto != 'undefined' && crypto &&\n                                    (crypto.getRandomValues || crypto.randomBytes)) {\n                                    CRYPTO = v;\n                                } else {\n                                    CRYPTO = !v;\n                                    throw Error\n                                    (bignumberError + 'crypto unavailable');\n                                }\n                            } else {\n                                CRYPTO = v;\n                            }\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' not true or false: ' + v);\n                        }\n                    }\n\n                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 9, p);\n                        MODULO_MODE = v;\n                    }\n\n                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        POW_PRECISION = v;\n                    }\n\n                    // FORMAT {object}\n                    // '[BigNumber Error] FORMAT not an object: {v}'\n                    if (obj.hasOwnProperty(p = 'FORMAT')) {\n                        v = obj[p];\n                        if (typeof v == 'object') FORMAT = v;\n                        else throw Error\n                        (bignumberError + p + ' not an object: ' + v);\n                    }\n\n                    // ALPHABET {string}\n                    // '[BigNumber Error] ALPHABET invalid: {v}'\n                    if (obj.hasOwnProperty(p = 'ALPHABET')) {\n                        v = obj[p];\n\n                        // Disallow if only one character, or contains '.' or a repeated character.\n                        if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\n                            ALPHABET = v;\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' invalid: ' + v);\n                        }\n                    }\n\n                } else {\n\n                    // '[BigNumber Error] Object expected: {v}'\n                    throw Error\n                    (bignumberError + 'Object expected: ' + obj);\n                }\n            }\n\n            return {\n                DECIMAL_PLACES: DECIMAL_PLACES,\n                ROUNDING_MODE: ROUNDING_MODE,\n                EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n                RANGE: [MIN_EXP, MAX_EXP],\n                CRYPTO: CRYPTO,\n                MODULO_MODE: MODULO_MODE,\n                POW_PRECISION: POW_PRECISION,\n                FORMAT: FORMAT,\n                ALPHABET: ALPHABET\n            };\n        };\n\n\n        /*\n         * Return true if v is a BigNumber instance, otherwise return false.\n         *\n         * v {any}\n         */\n        BigNumber.isBigNumber = function (v) {\n            return v instanceof BigNumber || v && v._isBigNumber === true || false;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.maximum = BigNumber.max = function () {\n            return maxOrMin(arguments, P.lt);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.minimum = BigNumber.min = function () {\n            return maxOrMin(arguments, P.gt);\n        };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\n         * '[BigNumber Error] crypto unavailable'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n                ? function () { return mathfloor(Math.random() * pow2_53); }\n                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                    (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                if (dp == null) dp = DECIMAL_PLACES;\n                else intCheck(dp, 0, MAX);\n\n                k = mathceil(dp / LOG_BASE);\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if (crypto.getRandomValues) {\n\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n                        for (; i < k;) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if (v >= 9e15) {\n                                b = crypto.getRandomValues(new Uint32Array(2));\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                        // Node.js supporting crypto.randomBytes.\n                    } else if (crypto.randomBytes) {\n\n                        // buffer\n                        a = crypto.randomBytes(k *= 7);\n\n                        for (; i < k;) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\n                                (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\n                                (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                            if (v >= 9e15) {\n                                crypto.randomBytes(7).copy(a, i);\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else {\n                        CRYPTO = false;\n                        throw Error\n                        (bignumberError + 'crypto unavailable');\n                    }\n                }\n\n                // Use Math.random.\n                if (!CRYPTO) {\n\n                    for (; i < k;) {\n                        v = random53bitInt();\n                        if (v < 9e15) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if (k && dp) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor(k / v) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for (; c[i] === 0; c.pop(), i--);\n\n                // Zero?\n                if (i < 0) {\n                    c = [e = 0];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Called by BigNumber and BigNumber.prototype.toString.\n        convertBase = (function () {\n            var decimal = '0123456789';\n\n            /*\n             * Convert string of baseIn to an array of numbers of baseOut.\n             * Eg. toBaseOut('255', 10, 16) returns [15, 15].\n             * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\n             */\n            function toBaseOut(str, baseIn, baseOut, alphabet) {\n                var j,\n                    arr = [0],\n                    arrL,\n                    i = 0,\n                    len = str.length;\n\n                for (; i < len;) {\n                    for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n                    arr[0] += alphabet.indexOf(str.charAt(i++));\n\n                    for (j = 0; j < arr.length; j++) {\n\n                        if (arr[j] > baseOut - 1) {\n                            if (arr[j + 1] == null) arr[j + 1] = 0;\n                            arr[j + 1] += arr[j] / baseOut | 0;\n                            arr[j] %= baseOut;\n                        }\n                    }\n                }\n\n                return arr.reverse();\n            }\n\n            // Convert a numeric string of baseIn to a numeric string of baseOut.\n            // If the caller is toString, we are converting from base 10 to baseOut.\n            // If the caller is BigNumber, we are converting from baseIn to base 10.\n            return function (str, baseIn, baseOut, sign, callerIsToString) {\n                var alphabet, d, e, k, r, x, xc, y,\n                    i = str.indexOf('.'),\n                    dp = DECIMAL_PLACES,\n                    rm = ROUNDING_MODE;\n\n                // Non-integer.\n                if (i >= 0) {\n                    k = POW_PRECISION;\n\n                    // Unlimited precision.\n                    POW_PRECISION = 0;\n                    str = str.replace('.', '');\n                    y = new BigNumber(baseIn);\n                    x = y.pow(str.length - i);\n                    POW_PRECISION = k;\n\n                    // Convert str as if an integer, then restore the fraction part by dividing the\n                    // result by its base raised to a power.\n\n                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\n                        10, baseOut, decimal);\n                    y.e = y.c.length;\n                }\n\n                // Convert the number as integer.\n\n                xc = toBaseOut(str, baseIn, baseOut, callerIsToString\n                    ? (alphabet = ALPHABET, decimal)\n                    : (alphabet = decimal, ALPHABET));\n\n                // xc now represents str as an integer and converted to baseOut. e is the exponent.\n                e = k = xc.length;\n\n                // Remove trailing zeros.\n                for (; xc[--k] == 0; xc.pop());\n\n                // Zero?\n                if (!xc[0]) return alphabet.charAt(0);\n\n                // Does str represent an integer? If so, no need for the division.\n                if (i < 0) {\n                    --e;\n                } else {\n                    x.c = xc;\n                    x.e = e;\n\n                    // The sign is needed for correct rounding.\n                    x.s = sign;\n                    x = div(x, y, dp, rm, baseOut);\n                    xc = x.c;\n                    r = x.r;\n                    e = x.e;\n                }\n\n                // xc now represents str converted to baseOut.\n\n                // THe index of the rounding digit.\n                d = e + dp + 1;\n\n                // The rounding digit: the digit to the right of the digit that may be rounded up.\n                i = xc[d];\n\n                // Look at the rounding digits and mode to determine whether to round up.\n\n                k = baseOut / 2;\n                r = r || d < 0 || xc[d + 1] != null;\n\n                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                    : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                    rm == (x.s < 0 ? 8 : 7));\n\n                // If the index of the rounding digit is not greater than zero, or xc represents\n                // zero, then the result of the base conversion is zero or, if rounding up, a value\n                // such as 0.00001.\n                if (d < 1 || !xc[0]) {\n\n                    // 1^-dp or 0\n                    str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\n                        : alphabet.charAt(0);\n                } else {\n\n                    // Truncate xc to the required number of decimal places.\n                    xc.length = d;\n\n                    // Round up?\n                    if (r) {\n\n                        // Rounding up may mean the previous digit has to be rounded up and so on.\n                        for (--baseOut; ++xc[--d] > baseOut;) {\n                            xc[d] = 0;\n\n                            if (!d) {\n                                ++e;\n                                xc = [1].concat(xc);\n                            }\n                        }\n                    }\n\n                    // Determine trailing zeros.\n                    for (k = xc.length; !xc[--k];);\n\n                    // E.g. [4, 11, 15] becomes 4bf.\n                    for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n                    // Add leading zeros, decimal point and trailing zeros as required.\n                    str = toFixedPoint(str, e, alphabet.charAt(0));\n                }\n\n                // The caller will add the sign.\n                return str;\n            };\n        })();\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply(x, k, base) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for (x = x.slice(); i--;) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x = [carry].concat(x);\n\n                return x;\n            }\n\n            function compare(a, b, aL, bL) {\n                var i, cmp;\n\n                if (aL != bL) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for (i = cmp = 0; i < aL; i++) {\n\n                        if (a[i] != b[i]) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n\n                return cmp;\n            }\n\n            function subtract(a, b, aL, base) {\n                var i = 0;\n\n                // Subtract b from a.\n                for (; aL--;) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for (; !a[0] && a.length > 1; a.splice(0, 1));\n            }\n\n            // x: dividend, y: divisor.\n            return function (x, y, dp, rm, base) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if (!xc || !xc[0] || !yc || !yc[0]) {\n\n                    return new BigNumber(\n\n                        // Return NaN if either NaN, or both Infinity or 0.\n                        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n                            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if (!base) {\n                    base = BASE;\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n                if (yc[i] > (xc[i] || 0)) e--;\n\n                if (s < 0) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor(base / (yc[0] + 1));\n\n                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n                    if (n > 1) {\n                        yc = multiply(yc, n, base);\n                        xc = multiply(xc, n, base);\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice(0, yL);\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for (; remL < yL; rem[remL++] = 0);\n                    yz = yc.slice();\n                    yz = [0].concat(yz);\n                    yc0 = yc[0];\n                    if (yc[1] >= base / 2) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare(yc, rem, yL, remL);\n\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor(rem0 / yc0);\n\n                            //  Algorithm:\n                            //  product = divisor multiplied by trial digit (n).\n                            //  Compare product and remainder.\n                            //  If product is greater than remainder:\n                            //    Subtract divisor from product, decrement trial digit.\n                            //  Subtract product from remainder.\n                            //  If product was less than remainder at the last compare:\n                            //    Compare new remainder and divisor.\n                            //    If remainder is greater than divisor:\n                            //      Subtract divisor from remainder, increment trial digit.\n\n                            if (n > 1) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply(yc, n, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder then trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while (compare(prod, rem, prodL, remL) == 1) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if (n == 0) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if (prodL < remL) prod = [0].concat(prod);\n\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            remL = rem.length;\n\n                            // If product was < remainder.\n                            if (cmp == -1) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while (compare(yc, rem, yL, remL) < 1) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if (cmp === 0) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if (rem[0]) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [xc[xi]];\n                            remL = 1;\n                        }\n                    } while ((xi++ < xL || rem[0] != null) && s--);\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if (!qc[0]) qc.splice(0, 1);\n                }\n\n                if (base == BASE) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n                    // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n: a BigNumber.\n         * i: the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm: the rounding mode.\n         * id: 1 (toExponential) or 2 (toPrecision).\n         */\n        function format(n, i, rm, id) {\n            var c0, e, ne, len, str;\n\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n\n            if (!n.c) return n.toString();\n\n            c0 = n.c[0];\n            ne = n.e;\n\n            if (i == null) {\n                str = coeffToString(n.c);\n                str = id == 1 || id == 2 && ne <= TO_EXP_NEG\n                    ? toExponential(str, ne)\n                    : toFixedPoint(str, ne, '0');\n            } else {\n                n = round(new BigNumber(n), i, rm);\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString(n.c);\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n                    // Append zeros?\n                    for (; len < i; str += '0', len++);\n                    str = toExponential(str, e);\n\n                    // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint(str, e, '0');\n\n                    // Append zeros?\n                    if (e + 1 > len) {\n                        if (--i > 0) for (str += '.'; i--; str += '0');\n                    } else {\n                        i += e - len;\n                        if (i > 0) {\n                            if (e + 1 == len) str += '.';\n                            for (; i--; str += '0');\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin(args, method) {\n            var m, n,\n                i = 0;\n\n            if (isArray(args[0])) args = args[0];\n            m = new BigNumber(args[0]);\n\n            for (; ++i < args.length;) {\n                n = new BigNumber(args[i]);\n\n                // If any number is NaN, return NaN.\n                if (!n.s) {\n                    m = n;\n                    break;\n                } else if (method.call(m, n)) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise(n, c, e) {\n            var i = 1,\n                j = c.length;\n\n            // Remove trailing zeros.\n            for (; !c[--j]; c.pop());\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for (j = c[0]; j >= 10; j /= 10, i++);\n\n            // Overflow?\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n                // Underflow?\n            } else if (e < MIN_EXP) {\n\n                // Zero.\n                n.c = [n.e = 0];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function (x, str, isNum, b) {\n                var base,\n                    s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n                // No exception on ±Infinity or NaN.\n                if (isInfinityOrNaN.test(s)) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                    x.c = x.e = null;\n                } else {\n                    if (!isNum) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace(basePrefix, function (m, p1, p2) {\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n                        }\n\n                        if (str != s) return new BigNumber(s, base);\n                    }\n\n                    // '[BigNumber Error] Not a number: {n}'\n                    // '[BigNumber Error] Not a base {b} number: {n}'\n                    if (BigNumber.DEBUG) {\n                        throw Error\n                        (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n                    }\n\n                    // NaN\n                    x.c = x.e = x.s = null;\n                }\n            }\n        })();\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round(x, sd, rm, r) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if (i < 0) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ni = 0];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[d - j - 1] % 10 | 0;\n                    } else {\n                        ni = mathceil((i + 1) / LOG_BASE);\n\n                        if (ni >= xc.length) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for (; xc.length <= ni; xc.push(0));\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for (d = 1; k >= 10; k /= 10, d++);\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                        // Are there any non-zero digits after the rounding digit?\n                        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n                        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n                    r = rm < 4\n                        ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                        : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\n                        rm == (x.s < 0 ? 8 : 7));\n\n                    if (sd < 1 || !xc[0]) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if (i == 0) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[LOG_BASE - i];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for (; ;) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if (ni == 0) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                                j = xc[0] += k;\n                                for (k = 1; j >= 10; j /= 10, k++);\n\n                                // if i != k the length has increased.\n                                if (i != k) {\n                                    x.e++;\n                                    if (xc[0] == BASE) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if (xc[ni] != BASE) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for (i = xc.length; xc[--i] === 0; xc.pop());\n                }\n\n                // Overflow? Infinity.\n                if (x.e > MAX_EXP) {\n                    x.c = x.e = null;\n\n                    // Underflow? Zero.\n                } else if (x.e < MIN_EXP) {\n                    x.c = [x.e = 0];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if (x.s < 0) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return\n         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         *   0 if they have the same value,\n         *   or null if the value of either is NaN.\n         */\n        P.comparedTo = function (y, b) {\n            return compare(this, new BigNumber(y, b));\n        };\n\n\n        /*\n         * If dp is undefined or null or true or false, return the number of decimal places of the\n         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         *\n         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.decimalPlaces = P.dp = function (dp, rm) {\n            var c, n, v,\n                x = this;\n\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), dp + x.e + 1, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n            if (n < 0) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function (y, b) {\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.idiv = function (y, b) {\n            return div(this, new BigNumber(y, b), 0, 1);\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\n         *\n         * If m is present, return the result modulo m.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * The modular power operation works efficiently when x, n, and m are integers, otherwise it\n         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\n         *\n         * n {number|string|BigNumber} The exponent. An integer.\n         * [m] {number|string|BigNumber} The modulus.\n         *\n         * '[BigNumber Error] Exponent not an integer: {n}'\n         */\n        P.exponentiatedBy = P.pow = function (n, m) {\n            var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\n                x = this;\n\n            n = new BigNumber(n);\n\n            // Allow NaN and ±Infinity, but not other non-integers.\n            if (n.c && !n.isInteger()) {\n                throw Error\n                (bignumberError + 'Exponent not an integer: ' + n);\n            }\n\n            if (m != null) m = new BigNumber(m);\n\n            // Exponent of MAX_SAFE_INTEGER is 15.\n            nIsBig = n.e > 14;\n\n            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n                // The sign of the result of pow when x is negative depends on the evenness of n.\n                // If +n overflows to ±Infinity, the evenness of n would be not be known.\n                y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\n                return m ? y.mod(m) : y;\n            }\n\n            nIsNeg = n.s < 0;\n\n            if (m) {\n\n                // x % m returns NaN if abs(m) is zero, or m is NaN.\n                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n                isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n                if (isModExp) x = x.mod(m);\n\n                // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n                // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n                // [1, 240000000]\n                ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n                // [80000000000000]  [99999750000000]\n                : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n                // If x is negative and n is odd, k = -0, else k = 0.\n                k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n                // If x >= 1, k = ±Infinity.\n                if (x.e > -1) k = 1 / k;\n\n                // If n is negative return ±0, else return ±Infinity.\n                return new BigNumber(nIsNeg ? 1 / k : k);\n\n            } else if (POW_PRECISION) {\n\n                // Truncating each coefficient array to a length of k after each multiplication\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\n                // i.e. there will be a minimum of 28 guard digits retained.\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\n            }\n\n            if (nIsBig) {\n                half = new BigNumber(0.5);\n                nIsOdd = isOdd(n);\n            } else {\n                nIsOdd = n % 2;\n            }\n\n            if (nIsNeg) n.s = 1;\n\n            y = new BigNumber(ONE);\n\n            // Performs 54 loop iterations for n of 9007199254740991.\n            for (; ;) {\n\n                if (nIsOdd) {\n                    y = y.times(x);\n                    if (!y.c) break;\n\n                    if (k) {\n                        if (y.c.length > k) y.c.length = k;\n                    } else if (isModExp) {\n                        y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n                    }\n                }\n\n                if (nIsBig) {\n                    n = n.times(half);\n                    round(n, n.e + 1, 1);\n                    if (!n.c[0]) break;\n                    nIsBig = n.e > 14;\n                    nIsOdd = isOdd(n);\n                } else {\n                    n = mathfloor(n / 2);\n                    if (!n) break;\n                    nIsOdd = n % 2;\n                }\n\n                x = x.times(x);\n\n                if (k) {\n                    if (x.c && x.c.length > k) x.c.length = k;\n                } else if (isModExp) {\n                    x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n                }\n            }\n\n            if (isModExp) return y;\n            if (nIsNeg) y = ONE.div(y);\n\n            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\n         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\n         */\n        P.integerValue = function (rm) {\n            var n = new BigNumber(this);\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n            return round(n, n.e + 1, rm);\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isEqualTo = P.eq = P.equals = function (y, b) {\n            return compare(this, new BigNumber(y, b)) === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise return false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isGreaterThan = P.gt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = function () {\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isLessThan = P.lt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isLessThanOrEqualTo = P.lte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise return false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise return false.\n         */\n        P.isNegative = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is positive, otherwise return false.\n         */\n        P.isPositive = function () {\n            return this.s > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = function (y, b) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Either Infinity?\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n                // Either zero?\n                if (!xc[0] || !yc[0]) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                        ROUNDING_MODE == 3 ? -0 : 0);\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if (a = xe - ye) {\n\n                if (xLTy = a < 0) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for (b = a; b--; t.push(0));\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n                for (a = b = 0; b < j; b++) {\n\n                    if (xc[b] != yc[b]) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = (j = yc.length) - (i = xc.length);\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if (b > 0) for (; b--; xc[i++] = 0);\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for (; j > a;) {\n\n                if (xc[--j] < yc[j]) {\n                    for (i = j; i && !xc[--i]; xc[i] = b);\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n            // Zero?\n            if (!xc[0]) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [y.e = 0];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function (y, b) {\n            var q, s,\n                x = this;\n\n            y = new BigNumber(y, b);\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if (!x.c || !y.s || y.c && !y.c[0]) {\n                return new BigNumber(NaN);\n\n                // Return x if y is Infinity or x is zero.\n            } else if (!y.c || x.c && !x.c[0]) {\n                return new BigNumber(x);\n            }\n\n            if (MODULO_MODE == 9) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div(x, y, 0, 3);\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div(x, y, 0, MODULO_MODE);\n            }\n\n            y = x.minus(q.times(y));\n\n            // To match JavaScript %, ensure sign of zero is sign of dividend.\n            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n            return y;\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\n         * of BigNumber(y, b).\n         */\n        P.multipliedBy = P.times = function (y, b) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = (y = new BigNumber(y, b)).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if (!xc || !yc || !xc[0] || !yc[0]) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if (!xc || !yc) {\n                        y.c = y.e = null;\n\n                        // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for (i = ycL; --i >= 0;) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for (k = xcL, j = i + k; j > i;) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.splice(0, 1);\n            }\n\n            return normalise(y, zc, e);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = function (y, b) {\n            var t,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Return ±Infinity if either ±Infinity.\n                if (!xc || !yc) return new BigNumber(a / 0);\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if (a = xe - ye) {\n                if (a > 0) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for (; a--; t.push(0));\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for (a = 0; b;) {\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n            }\n\n            if (a) {\n                xc = [a].concat(xc);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         * If sd is undefined or null or true or false, return the number of significant digits of\n         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         * If sd is true include integer-part trailing zeros in the count.\n         *\n         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\n         *                     boolean: whether to count integer-part trailing zeros: true or false.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.precision = P.sd = function (sd, rm) {\n            var c, n, v,\n                x = this;\n\n            if (sd != null && sd !== !!sd) {\n                intCheck(sd, 1, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), sd, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if (v = c[v]) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for (; v % 10 == 0; v /= 10, n--);\n\n                // Add the number of digits of the first element.\n                for (v = c[0]; v >= 10; v /= 10, n++);\n            }\n\n            if (sd && x.e + 1 > n) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\n         */\n        P.shiftedBy = function (k) {\n            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n            return this.times('1e' + k);\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt(N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt(I) =  I\n         *  sqrt(0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if (s !== 1 || !c || !c[0]) {\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n            }\n\n            // Initial estimate.\n            s = Math.sqrt(+x);\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if (s == 0 || s == 1 / 0) {\n                n = coeffToString(c);\n                if ((n.length + e) % 2 == 0) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n                if (s == 1 / 0) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber(s + '');\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if (r.c[0]) {\n                e = r.e;\n                s = e + dp;\n                if (s < 3) s = 0;\n\n                // Newton-Raphson iteration.\n                for (; ;) {\n                    t = r;\n                    r = half.times(t.plus(div(x, t, dp, 1)));\n\n                    if (coeffToString(t.c  ).slice(0, s) === (n =\n                        coeffToString(r.c)).slice(0, s)) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if (r.e < e) --s;\n                        n = n.slice(s - 3, s + 1);\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if (n == '9999' || !rep && n == '4999') {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if (!rep) {\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                                if (t.times(t).eq(x)) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                                // Truncate to the first rounding digit.\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toExponential = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp++;\n            }\n            return format(this, dp, rm, 1);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFixed = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp = dp + this.e + 1;\n            }\n            return format(this, dp, rm);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.set).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFormat = function (dp, rm) {\n            var str = this.toFixed(dp, rm);\n\n            if (this.c) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if (g1 > 0 && len > 0) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr(0, i);\n\n                    for (; i < len; i += g1) {\n                        intPart += groupSeparator + intDigits.substr(i, g1);\n                    }\n\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                    ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\n                    ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\n                        '$&' + FORMAT.fractionGroupSeparator)\n                    : fractionPart)\n                    : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\n         *\n         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\n                x = this,\n                xc = x.c;\n\n            if (md != null) {\n                n = new BigNumber(md);\n\n                // Throw if md is less than one or is not an integer, unless it is Infinity.\n                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n                    throw Error\n                    (bignumberError + 'Argument ' +\n                        (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\n                }\n            }\n\n            if (!xc) return x.toString();\n\n            d = new BigNumber(ONE);\n            n1 = d0 = new BigNumber(ONE);\n            d1 = n0 = new BigNumber(ONE);\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n            md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for (; ;)  {\n                q = div(n, d, 0, 1);\n                d2 = d0.plus(q.times(d1));\n                if (d2.comparedTo(md) == 1) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus(q.times(d2 = n1));\n                n0 = d2;\n                d = n.minus(q.times(d2 = d));\n                n = d2;\n            }\n\n            d2 = div(md.minus(d0), d1, 0, 1);\n            n0 = n0.plus(d2.times(n1));\n            d0 = d0.plus(d2.times(d1));\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\n                div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\n                ? [n1.toString(), d1.toString()]\n                : [n0.toString(), d0.toString()];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            return +this;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.toPrecision = function (sd, rm) {\n            if (sd != null) intCheck(sd, 1, MAX);\n            return format(this, sd, rm, 2);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to ALPHABET.length inclusive.\n         *\n         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if (e === null) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if (s < 0) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString(n.c);\n\n                if (b == null) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                        ? toExponential(str, e)\n                        : toFixedPoint(str, e, '0');\n                } else {\n                    intCheck(b, 2, ALPHABET.length, 'Base');\n                    str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n                }\n\n                if (s < 0 && n.c[0]) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return as toString, but do not accept a base argument, and include the minus sign for\n         * negative zero.\n         */\n        P.valueOf = P.toJSON = function () {\n            var str,\n                n = this,\n                e = n.e;\n\n            if (e === null) return n.toString();\n\n            str = coeffToString(n.c);\n\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                ? toExponential(str, e)\n                : toFixedPoint(str, e, '0');\n\n            return n.s < 0 ? '-' + str : str;\n        };\n\n\n        P._isBigNumber = true;\n\n        if (configObject != null) BigNumber.set(configObject);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for (; i < j;) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for (; z--; s = '0' + s);\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for (j = r.length; r.charCodeAt(--j) === 48;);\n        return r.slice(0, j + 1 || 1);\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare(x, y) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if (!i || !j) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if (a || b) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if (i != j) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if (!b) return k > l ^ a ? 1 : -1;\n\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n\n        // Compare digit by digit.\n        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\n     */\n    function intCheck(n, min, max, name) {\n        if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n            throw Error\n            (bignumberError + (name || 'Argument') + (typeof n == 'number'\n                ? n < min || n > max ? ' out of range: ' : ' not an integer: '\n                : ' not a primitive number: ') + n);\n        }\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    // Assumes finite n.\n    function isOdd(n) {\n        var k = n.c.length - 1;\n        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n\n    function toExponential(str, e) {\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\n            (e < 0 ? 'e' : 'e+') + e;\n    }\n\n\n    function toFixedPoint(str, e, z) {\n        var len, zs;\n\n        // Negative exponent?\n        if (e < 0) {\n\n            // Prepend zeros.\n            for (zs = z + '.'; ++e; zs += z);\n            str = zs + str;\n\n            // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if (++e > len) {\n                for (zs = z, e -= len; --e; zs += z);\n                str += zs;\n            } else if (e < len) {\n                str = str.slice(0, e) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n    globalObject.BigNumber = BigNumber;\n})(Class.scope);\nBigNumber = Class.scope.BigNumber;\nBigNumber.config({ DECIMAL_PLACES: 10 });\n","class NumberUtils {\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint8(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint16(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint32(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint64(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint32() {\n        return Math.floor(Math.random() * (NumberUtils.UINT32_MAX + 1));\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint64() {\n        return Math.floor(Math.random() * (NumberUtils.UINT64_MAX + 1));\n    }\n\n    /**\n     * @param {string} bin\n     * @return {number}\n     */\n    static fromBinary(bin) {\n        return parseInt(bin, 2);\n    }\n}\n\nNumberUtils.UINT8_MAX = 255;\nNumberUtils.UINT16_MAX = 65535;\nNumberUtils.UINT32_MAX = 4294967295;\nNumberUtils.UINT64_MAX = Number.MAX_SAFE_INTEGER;\n//Object.freeze(NumberUtils);\nClass.register(NumberUtils);\n","class BufferUtils {\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toAscii(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} string\n     * @return {Uint8Array}\n     */\n    static fromAscii(string) {\n        const buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static _codePointTextDecoder(u8) {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not supprot iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } finally {\n                BufferUtils._ISO_8859_15_DECODER = null;\n            }\n        }\n        return BufferUtils._ISO_8859_15_DECODER.decode(u8)\n            .replace('€', '¤').replace('Š', '¦').replace('š', '¨').replace('Ž', '´')\n            .replace('ž', '¸').replace('Œ', '¼').replace('œ', '½').replace('Ÿ', '¾');\n    }\n\n    static _tripletToBase64(num) {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8, start, end) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64(buffer) {\n        if (PlatformUtils.isNodeJs()) {\n            return Buffer.from(buffer).toString('base64');\n        } else if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(new Uint8Array(buffer)));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64Url(buffer) {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '.');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64Url(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64.replace(/_/g, '/').replace(/-/g, '+').replace(/\\./g, '=')), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @param {string} [alphabet] Alphabet to use\n     * @return {string}\n     */\n    static toBase32(buf, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        let shift = 3, carry = 0, byte, symbol, i, res = '';\n\n        for (i = 0; i < buf.length; i++) {\n            byte = buf[i];\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n\n    /**\n     * @param {string} base32\n     * @param {string} [alphabet] Alphabet to use\n     * @return {Uint8Array}\n     */\n    static fromBase32(base32, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        const charmap = [];\n        alphabet.toUpperCase().split('').forEach((c, i) => {\n            if (!(c in charmap)) charmap[c] = i;\n        });\n\n        let symbol, shift = 8, carry = 0, buf = [];\n        base32.toUpperCase().split('').forEach((char) => {\n            // ignore padding\n            if (alphabet.length === 33 && char === alphabet[32]) return;\n\n            symbol = charmap[char] & 0xff;\n\n            shift -= 5;\n            if (shift > 0) {\n                carry |= symbol << shift;\n            } else if (shift < 0) {\n                buf.push(carry | (symbol >> -shift));\n                shift += 8;\n                carry = (symbol << shift) & 0xff;\n            } else {\n                buf.push(carry | symbol);\n                shift = 8;\n                carry = 0;\n            }\n        });\n\n        if (shift !== 8 && carry !== 0) {\n            buf.push(carry);\n        }\n\n        return new Uint8Array(buf);\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toHex(buffer) {\n        let hex = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            hex += BufferUtils.HEX_ALPHABET[code >>> 4];\n            hex += BufferUtils.HEX_ALPHABET[code & 0x0F];\n        }\n        return hex;\n    }\n\n    /**\n     * @param {string} hex\n     * @return {SerialBuffer}\n     */\n    static fromHex(hex) {\n        hex = hex.trim();\n        if (!StringUtils.isHexBytes(hex)) return null;\n        return new SerialBuffer(Uint8Array.from(hex.match(/.{2}/g) || [], byte => parseInt(byte, 16)));\n    }\n\n    /**\n     * @param {*} bytes\n     * @return {string}\n     */\n    static toBinary(buffer) {\n        let bin = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            bin += StringUtils.lpad(code.toString(2), '0', 8);\n        }\n        return bin;\n    }\n\n    /**\n     * @template T\n     * @param {T} a\n     * @param {*} b\n     * @return {T}\n     */\n    static concatTypedArrays(a, b) {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        if (a.length !== b.length) return false;\n        const viewA = new Uint8Array(a);\n        const viewB = new Uint8Array(b);\n        for (let i = 0; i < a.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {number} -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a, b) {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @return {Uint8Array}\n     */\n    static xor(a, b) {\n        const res = new Uint8Array(a.byteLength);\n        for (let i = 0; i < a.byteLength; ++i) {\n            res[i] = a[i] ^ b[i];\n        }\n        return res;\n    }\n}\nBufferUtils.BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nBufferUtils.BASE32_ALPHABET = {\n    RFC4648: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    RFC4648_HEX: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    NIMIQ: '0123456789ABCDEFGHJKLMNPQRSTUVXY'\n};\nBufferUtils.HEX_ALPHABET = '0123456789abcdef';\nBufferUtils._BASE64_LOOKUP = [];\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\n\nClass.register(BufferUtils);\n","class SerialBuffer extends Uint8Array {\n    /**\n     * @param {*} bufferOrArrayOrLength\n     */\n    constructor(bufferOrArrayOrLength) {\n        super(bufferOrArrayOrLength);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} start\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    subarray(start, end) {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    /** @type {number} */\n    get readPos() {\n        return this._readPos;\n    }\n\n    /** @type {number} */\n    set readPos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid readPos ${value}`;\n        this._readPos = value;\n    }\n\n    /** @type {number} */\n    get writePos() {\n        return this._writePos;\n    }\n\n    /** @type {number} */\n    set writePos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid writePos ${value}`;\n        this._writePos = value;\n    }\n\n    /**\n     * Resets the read and write position of the buffer to zero.\n     * @returns {void}\n     */\n    reset() {\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} length\n     * @return {Uint8Array}\n     */\n    read(length) {\n        const value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return new Uint8Array(value);\n    }\n\n    /**\n     * @param {*} array\n     */\n    write(array) {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint8() {\n        return this._view.getUint8(this._readPos++);\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint8(value) {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint16() {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint16(value) {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint32() {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint32(value) {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint64() {\n        const value = this._view.getUint32(this._readPos) * Math.pow(2, 32) + this._view.getUint32(this._readPos + 4);\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint64(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._view.setUint32(this._writePos, Math.floor(value / Math.pow(2, 32)));\n        this._view.setUint32(this._writePos + 4, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @return {number}\n     */\n    readVarUint() {\n        const value = this.readUint8();\n        if (value < 0xFD) {\n            return value;\n        } else if (value === 0xFD) {\n            return this.readUint16();\n        } else if (value === 0xFE) {\n            return this.readUint32();\n        } else /*if (value === 0xFF)*/ {\n            return this.readUint64();\n        }\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeVarUint(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            this.writeUint8(value);\n        } else if (value <= 0xFFFF) {\n            this.writeUint8(0xFD);\n            this.writeUint16(value);\n        } else if (value <= 0xFFFFFFFF) {\n            this.writeUint8(0xFE);\n            this.writeUint32(value);\n        } else {\n            this.writeUint8(0xFF);\n            this.writeUint64(value);\n        }\n    }\n\n    /**\n     * @param {number} value\n     * @returns {number}\n     */\n    static varUintSize(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            return 1;\n        } else if (value <= 0xFFFF) {\n            return 3;\n        } else if (value <= 0xFFFFFFFF) {\n            return 5;\n        } else {\n            return 9;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    readFloat64() {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeFloat64(value) {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readString(length) {\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writeString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length !== length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readPaddedString(length) {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] !== 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writePaddedString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    /**\n     * @return {string}\n     */\n    readVarLengthString() {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw 'Malformed length';\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     */\n    writeVarLengthString(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {number}\n     */\n    static varLengthStringSize(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        return /*length*/ 1 + value.length;\n    }\n}\nClass.register(SerialBuffer);\n","/**\n * @interface\n */\nclass MinerWorker {\n    /**\n     * @param blockHeader\n     * @param compact\n     * @param minNonce\n     * @param maxNonce\n     * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n     */\n    async multiMine(blockHeader, compact, minNonce, maxNonce) {}\n}\nClass.register(MinerWorker);\n","class MinerWorkerImpl extends IWorker.Stub(MinerWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        await WasmHelper.doImportBrowser();\n    }\n\n    async multiMine(input, compact, minNonce, maxNonce) {\n        const hash = new Uint8Array(32);\n        let wasmOut, wasmIn;\n        try {\n            wasmOut = Module._malloc(hash.length);\n            wasmIn = Module._malloc(input.length);\n            Module.HEAPU8.set(input, wasmIn);\n            const nonce = Module._nimiq_argon2_target(wasmOut, wasmIn, input.length, compact, minNonce, maxNonce, 512);\n            if (nonce === maxNonce) return false;\n            hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hash.length));\n            return {hash, nonce};\n        } catch (e) {\n            Log.w(MinerWorkerImpl, e);\n            throw e;\n        } finally {\n            if (wasmOut !== undefined) Module._free(wasmOut);\n            if (wasmIn !== undefined) Module._free(wasmIn);\n        }\n    }\n}\n\nIWorker.prepareForWorkerUse(MinerWorker, new MinerWorkerImpl());\n","/**\n *\n */\nclass MinerWorkerPool extends IWorker.Pool(MinerWorker) {\n    constructor(size = 1) {\n        super((name) => IWorker.startWorkerForProxy(MinerWorker, name), 'miner', size);\n        /** @type {boolean} */\n        this._miningEnabled = false;\n        /** @type {Array.<{minNonce: number, maxNonce: number}>} */\n        this._activeNonces = [];\n        /** @type {Block} */\n        this._block = null;\n        /** @type {number} */\n        this._noncesPerRun = 256;\n        /** @type {Observable} */\n        this._observable = new Observable();\n        /** @type {number} */\n        this._shareCompact = Policy.BLOCK_TARGET_MAX;\n        /** @type {number} */\n        this._runsPerCycle = Infinity;\n        /** @type {number} */\n        this._cycleWait = 100;\n\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superUpdateToSize = super._updateToSize;\n\n        if (PlatformUtils.isNodeJs()) {\n            Log.i(MinerWorkerPool, `Using add-on optimized for instruction set: ${cpuSupport}`);\n\n            /**\n             * @param {SerialBuffer} blockHeader\n             * @param {number} compact\n             * @param {number} minNonce\n             * @param {number} maxNonce\n             * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n             */\n            this.multiMine = function (blockHeader, compact, minNonce, maxNonce) {\n                return new Promise((resolve, fail) => {\n                    NodeNative.node_argon2_target_async(async (nonce) => {\n                        try {\n                            if (nonce === maxNonce) {\n                                resolve(false);\n                            } else {\n                                blockHeader.writePos -= 4;\n                                blockHeader.writeUint32(nonce);\n                                const hash = await (await CryptoWorker.getInstanceAsync()).computeArgon2d(blockHeader);\n                                resolve({hash, nonce});\n                            }\n                        } catch (e) {\n                            fail(e);\n                        }\n                    }, blockHeader, compact, minNonce, maxNonce, 512);\n                });\n            };\n        }\n    }\n\n    /**\n     * @type {number}\n     */\n    get noncesPerRun() {\n        return this._noncesPerRun;\n    }\n\n    /**\n     * @param {number} nonces\n     */\n    set noncesPerRun(nonces) {\n        this._noncesPerRun = nonces;\n    }\n\n    /**\n     * @type {number}\n     */\n    get runsPerCycle() {\n        return this._runsPerCycle;\n    }\n\n    /**\n     * @param {number} runsPerCycle\n     */\n    set runsPerCycle(runsPerCycle) {\n        this._runsPerCycle = runsPerCycle;\n    }\n\n    /**\n     * @type {number}\n     */\n    get cycleWait() {\n        return this._cycleWait;\n    }\n\n    /**\n     * @param {number} cycleWait\n     */\n    set cycleWait(cycleWait) {\n        this._cycleWait = cycleWait;\n    }\n\n    /**\n     * @param {string} type\n     * @param {Function} callback\n     * @return {number}\n     */\n    on(type, callback) { return this._observable.on(type, callback); }\n\n    /**\n     * @param {string} type\n     * @param {number} id\n     */\n    off(type, id) { this._observable.off(type, id); }\n\n    /**\n     * @param {Block} block\n     * @param {number} [shareCompact] target of a share, in compact format.\n     */\n    async startMiningOnBlock(block, shareCompact) {\n        this._block = block;\n        this._shareCompact = shareCompact || block.nBits;\n        if (!this._miningEnabled) {\n            await this._updateToSize();\n            this._activeNonces = [];\n            this._miningEnabled = true;\n            for (let i = 0; i < this.poolSize; ++i) {\n                this._startMiner();\n            }\n        } else {\n            this._activeNonces = [{minNonce:0, maxNonce:0}];\n        }\n    }\n\n    stop() {\n        this._miningEnabled = false;\n    }\n\n    async _updateToSize() {\n        if (!PlatformUtils.isNodeJs()) {\n            await this._superUpdateToSize.call(this);\n        }\n\n        while (this._miningEnabled && this._activeNonces.length < this.poolSize) {\n            this._startMiner();\n        }\n    }\n\n    _startMiner() {\n        if (this._activeNonces.length >= this.poolSize) {\n            return;\n        }\n\n        const minNonce = this._activeNonces.length === 0 ? 0 : Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n        const maxNonce = minNonce + this._noncesPerRun;\n        const nonceRange = {minNonce, maxNonce};\n        this._activeNonces.push(nonceRange);\n        this._singleMiner(nonceRange).catch((e) => Log.e(MinerWorkerPool, e));\n    }\n\n    /**\n     * @param {{minNonce: number, maxNonce: number}} nonceRange\n     * @return {Promise.<void>}\n     * @private\n     */\n    async _singleMiner(nonceRange) {\n        let i = 0;\n        while (this._miningEnabled && (IWorker.areWorkersAsync || PlatformUtils.isNodeJs() || i === 0) && i < this._runsPerCycle) {\n            i++;\n            const block = this._block;\n            const result = await this.multiMine(block.header.serialize(), this._shareCompact, nonceRange.minNonce, nonceRange.maxNonce);\n            if (result) {\n                const hash = new Hash(result.hash);\n                this._observable.fire('share', {\n                    block,\n                    nonce: result.nonce,\n                    hash\n                });\n            } else {\n                this._observable.fire('no-share', {\n                    nonce: nonceRange.maxNonce\n                });\n            }\n            if (this._activeNonces.length > this.poolSize) {\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1);\n                return;\n            } else {\n                const newMin = Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n                const newRange = {minNonce: newMin, maxNonce: newMin + this._noncesPerRun};\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1, newRange);\n                nonceRange = newRange;\n            }\n        }\n        if (this._miningEnabled) {\n            setTimeout(() => this._singleMiner(nonceRange), this._cycleWait);\n        }\n    }\n}\n\nClass.register(MinerWorkerPool);\n","class GenesisConfig {}\nClass.register(GenesisConfig);\n","class ArrayUtils {\n    /**\n     * @template T\n     * @param {Array.<T>} arr\n     * @return {T}\n     */\n    static randomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * @param {Uint8Array} uintarr\n     * @param {number} begin\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    static subarray(uintarr, begin, end) {\n        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n\n    /**\n     * @param {Array} list\n     * @param {number} k\n     * @yields {Array}\n     */\n    static *k_combinations(list, k) {\n        const n = list.length;\n        // Shortcut:\n        if (k > n) {\n            return;\n        }\n        const indices = Array.from(new Array(k), (x,i) => i);\n        yield indices.map(i => list[i]);\n        const reverseRange = Array.from(new Array(k), (x,i) => k-i-1);\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n            let i = k-1, found = false;\n            for (i of reverseRange) {\n                if (indices[i] !== i + n - k) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return;\n            }\n            indices[i] += 1;\n            for (const j of Array.from(new Array(k-i-1), (x,k) => i+k+1)) {\n                indices[j] = indices[j-1] + 1;\n            }\n            yield indices.map(i => list[i]);\n        }\n    }\n}\nClass.register(ArrayUtils);\n","class Assert {\n    /**\n     * @param {boolean} condition\n     * @param {string} [message]\n     * @returns {void}\n     */\n    static that(condition, message = 'Assertion failed') {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nClass.register(Assert);\n","class MerkleTree {\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    static computeRoot(values, fnHash = MerkleTree._hash) {\n        return MerkleTree._computeRoot(values, fnHash);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} fnHash\n     * @returns {Hash}\n     * @private\n     */\n    static _computeRoot(values, fnHash) {\n        const len = values.length;\n        if (len === 0) {\n            return Hash.light(new Uint8Array(0));\n        }\n        if (len === 1) {\n            return fnHash(values[0]);\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const leftHash = MerkleTree._computeRoot(left, fnHash);\n        const rightHash = MerkleTree._computeRoot(right, fnHash);\n        return Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n    }\n\n    /**\n     * @param {Hash|Uint8Array|{hash: function():Hash}|{serialize: function():Uint8Array}} o\n     * @returns {Hash}\n     * @private\n     */\n    static _hash(o) {\n        if (o instanceof Hash) {\n            return o;\n        }\n        if (typeof o.hash === 'function') {\n            return o.hash();\n        }\n        if (typeof o.serialize === 'function') {\n            return Hash.light(o.serialize());\n        }\n        if (o instanceof Uint8Array) {\n            return Hash.light(o);\n        }\n        throw new Error('MerkleTree objects must be Uint8Array or have a .hash()/.serialize() method');\n    }\n}\nClass.register(MerkleTree);\n","class MerklePath {\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     */\n    constructor(nodes) {\n        if (!Array.isArray(nodes) || !NumberUtils.isUint8(nodes.length)\n            || nodes.some(it => !(it instanceof MerklePathNode))) throw new Error('Malformed nodes');\n        /**\n         * @type {Array.<MerklePathNode>}\n         * @private\n         */\n        this._nodes = nodes;\n    }\n\n    /**\n     * @param {Array} values\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerklePath}\n     */\n    static compute(values, leafValue, fnHash = MerkleTree._hash) {\n        const leafHash = fnHash(leafValue);\n        const path = [];\n        MerklePath._compute(values, leafHash, path, fnHash);\n        return new MerklePath(path);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Hash} leafHash\n     * @param {Array.<MerklePathNode>} path\n     * @param {function(o: *):Hash} fnHash\n     * @returns {{containsLeaf:boolean, inner:Hash}}\n     * @private\n     */\n    static _compute(values, leafHash, path, fnHash) {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            return {containsLeaf: hash.equals(leafHash), inner: hash};\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, inner: leftHash} = MerklePath._compute(left, leafHash, path, fnHash);\n        const {containsLeaf: rightLeaf, inner: rightHash} = MerklePath._compute(right, leafHash, path, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        if (leftLeaf) {\n            path.push(new MerklePathNode(rightHash, false));\n            return {containsLeaf: true, inner: hash};\n        } else if (rightLeaf) {\n            path.push(new MerklePathNode(leftHash, true));\n            return {containsLeaf: true, inner: hash};\n        }\n\n        return {containsLeaf: false, inner: hash};\n    }\n\n    /**\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    computeRoot(leafValue, fnHash = MerkleTree._hash) {\n        /** @type {Hash} */\n        let root = fnHash(leafValue);\n        for (const node of this._nodes) {\n            const left = node.left;\n            const hash = node.hash;\n            const concat = new SerialBuffer(hash.serializedSize * 2);\n            if (left) hash.serialize(concat);\n            root.serialize(concat);\n            if (!left) hash.serialize(concat);\n            root = Hash.light(concat);\n        }\n        return root;\n    }\n\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _compress(nodes) {\n        const count = nodes.length;\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = new Uint8Array(leftBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            if (nodes[i].left) {\n                leftBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return leftBits;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MerklePath}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint8();\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = buf.read(leftBitsSize);\n\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            const left = (leftBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            const hash = Hash.unserialize(buf);\n            nodes.push(new MerklePathNode(hash, left));\n        }\n        return new MerklePath(nodes);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._nodes.length);\n        buf.write(MerklePath._compress(this._nodes));\n\n        for (const node of this._nodes) {\n            node.hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        const leftBitsSize = Math.ceil(this._nodes.length / 8);\n        return /*count*/ 1\n            + leftBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {MerklePath} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePath\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]));\n    }\n\n    /** @type {Array.<MerklePathNode>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\nClass.register(MerklePath);\n\nclass MerklePathNode {\n    /**\n     * @param {Hash} hash\n     * @param {boolean} left\n     */\n    constructor(hash, left) {\n        this._hash = hash;\n        this._left = left;\n    }\n\n    /** @type {Hash} */\n    get hash() {\n        return this._hash;\n    }\n\n    /** @type {boolean} */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     * @param {MerklePathNode} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePathNode\n            && this._hash.equals(o.hash)\n            && this._left === o.left;\n    }\n}\nClass.register(MerklePathNode);\n","class Policy {\n    /**\n     * Convert Nimiq decimal to Number of Satoshis.\n     * @param {number} coins Nimiq count in decimal\n     * @return {number} Number of Satoshis\n     */\n    static coinsToSatoshis(coins) {\n        return Math.round(coins * Policy.SATOSHIS_PER_COIN);\n    }\n\n    /**\n     * Convert Number of Satoshis to Nimiq decimal.\n     * @param {number} satoshis Number of Satoshis.\n     * @return {number} Nimiq count in decimal.\n     */\n    static satoshisToCoins(satoshis) {\n        return satoshis / Policy.SATOSHIS_PER_COIN;\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static supplyAfter(blockHeight) {\n        // Calculate last entry in supply cache that is below blockHeight.\n        let startHeight = Math.floor(blockHeight / Policy._supplyCacheInterval) * Policy._supplyCacheInterval;\n        startHeight = Math.max(0, Math.min(startHeight, Policy._supplyCacheMax));\n\n        // Calculate respective block for the last entry of the cache and the targeted height.\n        const startI = startHeight / Policy._supplyCacheInterval;\n        const endI = Math.floor(blockHeight / Policy._supplyCacheInterval);\n\n        // The starting supply is the initial supply at the beginning and a cached value afterwards.\n        let supply = startHeight === 0 ? Policy.INITIAL_SUPPLY : Policy._supplyCache.get(startHeight);\n        // Use and update cache.\n        for (let i = startI; i < endI; ++i) {\n            startHeight = i * Policy._supplyCacheInterval;\n            // Since the cache stores the supply *before* a certain block, subtract one.\n            const endHeight = (i + 1) * Policy._supplyCacheInterval - 1;\n            supply = Policy._supplyAfter(supply, endHeight, startHeight);\n            // Don't forget to add one again.\n            Policy._supplyCache.set(endHeight + 1, supply);\n            Policy._supplyCacheMax = endHeight + 1;\n        }\n\n        // Calculate remaining supply (this also adds the block reward for endI*interval).\n        return Policy._supplyAfter(supply, blockHeight, endI * Policy._supplyCacheInterval);\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} initialSupply\n     * @param {number} blockHeight\n     * @param {number} [startHeight]\n     * @return {number}\n     */\n    static _supplyAfter(initialSupply, blockHeight, startHeight=0) {\n        let supply = initialSupply;\n        for (let i = startHeight; i <= blockHeight; ++i) {\n            supply += Policy._blockRewardAt(supply, i);\n        }\n        return supply;\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static blockRewardAt(blockHeight) {\n        const currentSupply = Policy.supplyAfter(blockHeight - 1);\n        return Policy._blockRewardAt(currentSupply, blockHeight);\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} currentSupply\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static _blockRewardAt(currentSupply, blockHeight) {\n        if (blockHeight <= 0) return 0;\n        const remaining = Policy.TOTAL_SUPPLY - currentSupply;\n        if (blockHeight >= Policy.EMISSION_TAIL_START && remaining >= Policy.EMISSION_TAIL_REWARD) {\n            return Policy.EMISSION_TAIL_REWARD;\n        }\n        const remainder = remaining % Policy.EMISSION_SPEED;\n        return (remaining - remainder) / Policy.EMISSION_SPEED;\n    }\n}\n\n/**\n * Targeted block time in seconds.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_TIME = 60;\n\n/**\n * Maximum block size in bytes.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_SIZE_MAX = 1e5; // 100 kb\n\n/**\n * The highest (easiest) block PoW target.\n * @type {BigNumber}\n * @constant\n */\nPolicy.BLOCK_TARGET_MAX = new BigNumber(2).pow(240);\n\n/**\n * Number of blocks we take into account to calculate next difficulty.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_BLOCK_WINDOW = 120;\n\n/**\n * Limits the rate at which the difficulty is adjusted min/max.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR = 2;\n\n/**\n * Number of blocks a transaction is valid.\n * @type {number}\n * @constant\n */\nPolicy.TRANSACTION_VALIDITY_WINDOW = 120;\n\n\n/* Supply & Emission Parameters */\n\n/**\n * Number of Satoshis per Nimiq.\n * @type {number}\n * @constant\n */\nPolicy.SATOSHIS_PER_COIN = 1e5;\n\n/**\n * Targeted total supply in satoshis.\n * @type {number}\n * @constant\n */\nPolicy.TOTAL_SUPPLY = 21e14;\n\n/**\n * Initial supply before genesis block in satoshis.\n * FIXME: Change for main net.\n * @type {number}\n * @constant\n */\nPolicy.INITIAL_SUPPLY = 252000000000000;\n\n/**\n * Emission speed.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_SPEED = Math.pow(2, 22);\n\n/**\n * First block using constant tail emission until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_START = 48692960;\n\n/**\n * Constant tail emission in satoshis until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_REWARD = 4000;\n\n/* Security parameters */\n\n/**\n * NIPoPoW Security parameter M\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.M = 240;\n\n/**\n * NIPoPoW Security parameter K\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.K = 120;\n\n/**\n * NIPoPoW Security parameter DELTA\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.DELTA = 0.15;\n\n/**\n * Number of blocks the light client downloads to verify the AccountsTree construction.\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.NUM_BLOCKS_VERIFICATION = 250;\n\n\n/* Snapshot Parameters */\n\n/**\n * Maximum number of snapshots.\n * @type {number}\n * @constant\n */\nPolicy.NUM_SNAPSHOTS_MAX = 20;\n\n\n/**\n * Stores the circulating supply before the given block.\n * @type {Map.<number, number>}\n * @private\n */\nPolicy._supplyCache = new Map();\nPolicy._supplyCacheMax = 0; // blocks\nPolicy._supplyCacheInterval = 5000; // blocks\nClass.register(Policy);\n","/**\n * @abstract\n */\nclass Serializable {\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Serializable && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return BufferUtils.compare(this.serialize(), o.serialize());\n    }\n\n    hashCode() {\n        return this.toBase64();\n    }\n\n    /**\n     * @abstract\n     * @param {SerialBuffer} [buf]\n     */\n    serialize(buf) {}\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.toBase64();\n    }\n\n    /**\n     * @return {string}\n     */\n    toBase64() {\n        return BufferUtils.toBase64(this.serialize());\n    }\n\n    /**\n     * @return {string}\n     */\n    toHex() {\n        return BufferUtils.toHex(this.serialize());\n    }\n}\n\nClass.register(Serializable);\n","class Hash extends Serializable {\n    /**\n     * @param {?Uint8Array} arg\n     * @param {Hash.Algorithm} [algorithm]\n     * @private\n     */\n    constructor(arg, algorithm = Hash.Algorithm.BLAKE2B) {\n        if (arg === null) {\n            arg = new Uint8Array(Hash.getSize(algorithm));\n        } else {\n            if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n            if (arg.length !== Hash.getSize(algorithm)) throw new Error('Primitive: Invalid length');\n        }\n        super();\n        this._obj = arg;\n        /** @type {Hash.Algorithm} */\n        this._algorithm = algorithm;\n    }\n\n    /**\n     * @deprecated\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static light(arr) {\n        return Hash.blake2b(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static blake2b(arr) {\n        return new Hash(Hash.computeBlake2b(arr), Hash.Algorithm.BLAKE2B);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @deprecated\n     * @returns {Promise.<Hash>}\n     */\n    static hard(arr) {\n        return Hash.argon2d(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Promise.<Hash>}\n     */\n    static async argon2d(arr) {\n        return new Hash(await (await CryptoWorker.getInstanceAsync()).computeArgon2d(arr), Hash.Algorithm.ARGON2D);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha256(arr) {\n        return new Hash(Hash.computeSha256(arr), Hash.Algorithm.SHA256);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha512(arr) {\n        return new Hash(Hash.computeSha512(arr), Hash.Algorithm.SHA512);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @param {Hash.Algorithm} algorithm\n     * @returns {Hash}\n     */\n    static compute(arr, algorithm) {\n        // !! The algorithms supported by this function are the allowed hash algorithms for HTLCs !!\n        switch (algorithm) {\n            case Hash.Algorithm.BLAKE2B: return Hash.blake2b(arr);\n            case Hash.Algorithm.SHA256: return Hash.sha256(arr);\n            // Hash.Algorithm.SHA512 postponed until hard-fork\n            // Hash.Algorithm.ARGON2 intentionally omitted\n            default: throw new Error('Invalid hash algorithm');\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash.Algorithm} [algorithm]\n     * @returns {Hash}\n     */\n    static unserialize(buf, algorithm = Hash.Algorithm.BLAKE2B) {\n        return new Hash(buf.read(Hash.getSize(algorithm)), algorithm);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /**\n     * @param {number} begin\n     * @param {number} end\n     * @returns {Uint8Array}\n     */\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Hash.SIZE.get(this._algorithm);\n    }\n\n    /** @type {Uint8Array} */\n    get array() {\n        return this._obj;\n    }\n\n    /** @type {Hash.Algorithm} */\n    get algorithm() {\n        return this._algorithm;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Hash && o._algorithm === this._algorithm && super.equals(o);\n    }\n\n    /**\n     * @param {string} base64\n     * @returns {Hash}\n     */\n    static fromBase64(base64) {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @returns {Hash}\n     */\n    static fromHex(hex) {\n        return new Hash(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Hash}\n     */\n    static fromString(str) {\n        try {\n            return Hash.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Hash.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid hash format');\n    }\n\n    /**\n     * @param {Hash} o\n     * @returns {boolean}\n     */\n    static isHash(o) {\n        return o instanceof Hash;\n    }\n\n    /**\n     * @param {Hash.Algorithm} algorithm\n     * @returns {number}\n     */\n    static getSize(algorithm) {\n        const size = Hash.SIZE.get(algorithm);\n        if (typeof size !== 'number') throw new Error('Invalid hash algorithm');\n        return size;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeBlake2b(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.BLAKE2B));\n            NodeNative.node_blake2(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.BLAKE2B);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_blake2(wasmOut, wasmIn, input.length);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha256(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));\n            NodeNative.node_sha256(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA256);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha256(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha512(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_sha512(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha512(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\n/**\n * @enum {number}\n */\nHash.Algorithm = {\n    BLAKE2B: 1,\n    ARGON2D: 2,\n    SHA256: 3,\n    SHA512: 4\n};\n/**\n * @type {Map<Hash.Algorithm, number>}\n */\nHash.SIZE = new Map();\nHash.SIZE.set(Hash.Algorithm.BLAKE2B, 32);\nHash.SIZE.set(Hash.Algorithm.ARGON2D, 32);\nHash.SIZE.set(Hash.Algorithm.SHA256, 32);\nHash.SIZE.set(Hash.Algorithm.SHA512, 64);\n\nHash.NULL = new Hash(new Uint8Array(32));\nClass.register(Hash);\n","class PublicKey extends Serializable {\n    /**\n     * @param {PublicKey} o\n     * @returns {PublicKey}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new PublicKey(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PublicKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {PublicKey}\n     */\n    static derive(privateKey) {\n        return new PublicKey(PublicKey._publicKeyDerive(privateKey._obj));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @return {PublicKey}\n     */\n    static sum(publicKeys) {\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        return PublicKey._delinearizeAndAggregatePublicKeys(publicKeys);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PublicKey}\n     */\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PublicKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PublicKey.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PublicKey && super.equals(o);\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        return Hash.light(this.serialize());\n    }\n\n    /**\n     * @param {PublicKey} o\n     * @return {number}\n     */\n    compare(o) {\n        return BufferUtils.compare(this._obj, o._obj);\n    }\n\n    /**\n     * @return {Address}\n     */\n    toAddress() {\n        return Address.fromHash(this.hash());\n    }\n\n    /**\n     * @return {PeerId}\n     */\n    toPeerId() {\n        return new PeerId(this.hash().subarray(0, 16));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @returns {PublicKey}\n     */\n    static _delinearizeAndAggregatePublicKeys(publicKeys) {\n        const publicKeysObj = publicKeys.map(k => k.serialize());\n        const publicKeysHash = PublicKey._publicKeysHash(publicKeysObj);\n        const raw = PublicKey._publicKeysDelinearizeAndAggregate(publicKeysObj, publicKeysHash);\n        return new PublicKey(raw);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDerive(privateKey) {\n        if (privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_public_key_derive(out, new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const pubKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOut, PrivateKey.SIZE);\n                pubKeyBuffer.set(privateKey);\n                const wasmIn = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmIn, PrivateKey.SIZE);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_public_key_derive(wasmOut, wasmIn);\n                privKeyBuffer.fill(0);\n                const publicKey = new Uint8Array(PublicKey.SIZE);\n                publicKey.set(pubKeyBuffer);\n                return publicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @returns {Uint8Array}\n     */\n    static _publicKeysHash(publicKeys) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_ed25519_hash_public_keys(out, concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                Module._ed25519_hash_public_keys(wasmOut, wasmInPublicKeys, publicKeys.length);\n                const hashedPublicKey = new Uint8Array(hashSize);\n                hashedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hashedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDelinearize(publicKey, publicKeysHash) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_delinearize_public_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_delinearize_public_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey);\n                const delinearizedPublicKey = new Uint8Array(PublicKey.SIZE);\n                delinearizedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return delinearizedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeysDelinearizeAndAggregate(publicKeys, publicKeysHash) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_delinearized_public_keys(out, new Uint8Array(publicKeysHash), concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_aggregate_delinearized_public_keys(wasmOut, wasmInPublicKeysHash, wasmInPublicKeys, publicKeys.length);\n                const aggregatePublicKey = new Uint8Array(PublicKey.SIZE);\n                aggregatePublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggregatePublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPublicKey.SIZE = 32;\n\nClass.register(PublicKey);\n","class Signature extends Serializable {\n    /**\n     * @param {Signature} o\n     * @returns {Signature}\n     */\n    static copy(o) {\n        if (!o) return o;\n        // FIXME Move this to Crypto class.\n        const obj = new Uint8Array(o._obj);\n        return new Signature(obj);\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Signature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {Signature}\n     */\n    static create(privateKey, publicKey, data) {\n        return new Signature(Signature._signatureCreate(privateKey._obj, publicKey._obj, data));\n    }\n\n    /**\n     * @param {Commitment} commitment\n     * @param {Array.<PartialSignature>} signatures\n     * @return {Signature}\n     */\n    static fromPartialSignatures(commitment, signatures) {\n        const raw = Signature._combinePartialSignatures(commitment.serialize(), signatures.map(s => s.serialize()));\n        return new Signature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Signature}\n     */\n    static unserialize(buf) {\n        return new Signature(buf.read(Signature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Signature.SIZE;\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {boolean}\n     */\n    verify(publicKey, data) {\n        return Signature._signatureVerify(publicKey._obj, data, this._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Signature && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} combinedCommitment\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _combinePartialSignatures(combinedCommitment, partialSignatures) {\n        const combinedSignature = Signature._aggregatePartialSignatures(partialSignatures);\n        return BufferUtils.concatTypedArrays(combinedCommitment, combinedSignature);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _aggregatePartialSignatures(partialSignatures) {\n        return partialSignatures.reduce((sigA, sigB) => Signature._scalarsAdd(sigA, sigB));\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @returns {Uint8Array}\n     */\n    static _scalarsAdd(a, b) {\n        if (a.byteLength !== PartialSignature.SIZE || b.byteLength !== PartialSignature.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_add_scalars(out, new Uint8Array(a), new Uint8Array(b));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSum = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInA = Module.stackAlloc(a.length);\n                const wasmInB = Module.stackAlloc(b.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInA, a.length).set(a);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInB, b.length).set(b);\n                Module._ed25519_add_scalars(wasmOutSum, wasmInA, wasmInB);\n                const sum = new Uint8Array(PartialSignature.SIZE);\n                sum.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSum, PartialSignature.SIZE));\n                return sum;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _signatureCreate(privateKey, publicKey, message) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Signature.SIZE);\n            NodeNative.node_ed25519_sign(out, new Uint8Array(message), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSignature = Module.stackAlloc(Signature.SIZE);\n                const signatureBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOutSignature, Signature.SIZE);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInPrivKey = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmInPrivKey, privateKey.length);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_sign(wasmOutSignature, wasmInMessage, message.byteLength, wasmInPubKey, wasmInPrivKey);\n                privKeyBuffer.fill(0);\n\n                const signature = new Uint8Array(Signature.SIZE);\n                signature.set(signatureBuffer);\n                return signature;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    static _signatureVerify(publicKey, message, signature) {\n        if (PlatformUtils.isNodeJs()) {\n            return !!NodeNative.node_ed25519_verify(new Uint8Array(signature), new Uint8Array(message), new Uint8Array(publicKey));\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInSignature = Module.stackAlloc(signature.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInSignature, signature.length).set(signature);\n\n                return !!Module._ed25519_verify(wasmInSignature, wasmInMessage, message.byteLength, wasmInPubKey);\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nSignature.SIZE = 64;\n\nClass.register(Signature);\n","class Address extends Serializable {\n    /**\n     * @param {Address} o\n     * @returns {Address}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Address(obj);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Address}\n     */\n    static fromHash(hash) {\n        return new Address(hash.subarray(0, Address.SERIALIZED_SIZE));\n    }\n\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Address.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Address} Newly created Account object.\n     */\n    static unserialize(buf) {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Address\n            && super.equals(o);\n    }\n\n    static fromString(str) {\n        try {\n            return Address.fromUserFriendlyAddress(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid address format');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {Address}\n     */\n    static fromBase64(base64) {\n        return new Address(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @return {Address}\n     */\n    static fromHex(hex) {\n        return new Address(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @return {Address}\n     */\n    static fromUserFriendlyAddress(str) {\n        str = str.replace(/ /g, '');\n        if (str.substr(0, 2).toUpperCase() !== Address.CCODE) {\n            throw new Error('Invalid Address: Wrong country code');\n        }\n        if (str.length !== 36) {\n            throw new Error('Invalid Address: Should be 36 chars (ignoring spaces)');\n        }\n        if (Address._ibanCheck(str.substr(4) + str.substr(0, 4)) !== 1) {\n            throw new Error('Invalid Address: Checksum invalid');\n        }\n        return new Address(BufferUtils.fromBase32(str.substr(4)));\n    }\n\n    static _ibanCheck(str) {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6)) % 97).toString();\n        }\n\n        return parseInt(tmp);\n    }\n\n    /**\n     * @param {boolean} [withSpaces]\n     * @return {string}\n     */\n    toUserFriendlyAddress(withSpaces = true) {\n        const base32 = BufferUtils.toBase32(this.serialize());\n        // eslint-disable-next-line prefer-template\n        const check = ('00' + (98 - Address._ibanCheck(base32 + Address.CCODE + '00'))).slice(-2);\n        let res = Address.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n}\nAddress.CCODE = 'NQ';\nAddress.SERIALIZED_SIZE = 20;\nAddress.HEX_SIZE = 40;\nAddress.NULL = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nAddress.CONTRACT_CREATION = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nClass.register(Address);\n","/**\n * @abstract\n */\nclass Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint64(balance)) throw new Error('Malformed balance');\n\n        /** @type {Account.Type} */\n        this._type = type;\n        /** @type {number} */\n        this._balance = balance;\n    }\n\n    /**\n     * Create Account object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Account} Newly created Account object.\n     */\n    static unserialize(buf) {\n        const type = /** @type {Account.Type} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Account.TYPE_MAP.has(type)) {\n            throw new Error('Unknown account type');\n        }\n\n        return Account.TYPE_MAP.get(type).unserialize(buf);\n    }\n\n    /**\n     * Serialize this Account object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeUint64(this._balance);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return /*type*/ 1\n            + /*balance*/ 8;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    toString() {\n        return `Account{type=${this._type}, balance=${this._balance.toString()}`;\n    }\n\n    /**\n     * @type {number} Account balance\n     */\n    get balance() {\n        return this._balance;\n    }\n\n    /** @type {Account.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) { throw new Error('Not yet implemented.'); }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            if (transactionsCache.containsTransaction(transaction)) {\n                throw new Error('Double Transaction Error!');\n            }\n            return this.withBalance(newBalance);\n        } else {\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            return this.withBalance(this._balance + transaction.value + transaction.fee);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            return this.withBalance(this._balance + transaction.value);\n        } else {\n            const newBalance = this._balance - transaction.value;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            return this.withBalance(newBalance);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this === Account.INITIAL;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isToBePruned() {\n        return this._balance === 0 && !this.isInitial();\n    }\n}\n\n/**\n * Enum for Account types.\n * Non-zero values are contracts.\n * @enum\n */\nAccount.Type = {\n    /**\n     * Basic account type.\n     * @see {BasicAccount}\n     */\n    BASIC: 0,\n    /**\n     * Account with vesting functionality.\n     * @see {VestingContract}\n     */\n    VESTING: 1,\n    /**\n     * Hashed Time-Locked Contract\n     * @see {HashedTimeLockedContract}\n     */\n    HTLC: 2\n};\n/**\n * @type {Map.<Account.Type, {copy: function(o: *):Account, unserialize: function(buf: SerialBuffer):Account, create: function(balance: number, blockHeight: number, transaction: Transaction):Account, verifyOutgoingTransaction: function(transaction: Transaction):boolean, verifyIncomingTransaction: function(transaction: Transaction):boolean}>}\n */\nAccount.TYPE_MAP = new Map();\n\nClass.register(Account);\n","class PrunedAccount {\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     */\n    constructor(address, account) {\n        if (!(address instanceof Address)) throw new Error('Malformed address');\n\n        /** @type {Address} */\n        this._address = address;\n        /** @type {Account} */\n        this._account = account;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {PrunedAccount}\n     */\n    static unserialize(buf) {\n        return new PrunedAccount(Address.unserialize(buf), Account.unserialize(buf));\n    }\n\n    /**\n     * @param {PrunedAccount} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return this._address.compare(o._address);\n    }\n\n    /**\n     * @returns {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * @returns {Account}\n     */\n    get account() {\n        return this._account;\n    }\n\n    /**\n     * @param buf\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._address.serialize(buf);\n        this._account.serialize(buf);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get serializedSize() {\n        return this._address.serializedSize + this._account.serializedSize;\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this._address.hashCode();\n    }\n}\n\nClass.register(PrunedAccount);\n","/**\n * This is a classic account that can send all his funds and receive any transaction.\n * All outgoing transactions are signed using the key corresponding to this address.\n */\nclass BasicAccount extends Account {\n    /**\n     * @param {BasicAccount} o\n     * @returns {BasicAccount}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new BasicAccount(o._balance);\n    }\n\n    /**\n     * @param {number} [balance]\n     */\n    constructor(balance = 0) {\n        super(Account.Type.BASIC, balance);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BasicAccount}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.BASIC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof BasicAccount\n            && this._type === o._type\n            && this._balance === o._balance;\n    }\n\n    toString() {\n        return `BasicAccount{balance=${this._balance}}`;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        return SignatureProof.verifyTransaction(transaction);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (transaction.data.byteLength > 64) return false;\n        return true;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            const isContractCreation = transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION);\n            const isTypeChange = transaction.recipientType !== this._type;\n            if (isContractCreation !== isTypeChange) {\n                throw new Error('Data Error!');\n            }\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.recipientType !== this._type && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract creation\n            return Account.TYPE_MAP.get(transaction.recipientType).create(this._balance, blockHeight, transaction);\n        }\n        return this;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this._balance === 0;\n    }\n}\n\nAccount.INITIAL = new BasicAccount(0);\nAccount.TYPE_MAP.set(Account.Type.BASIC, BasicAccount);\nClass.register(BasicAccount);\n","class Contract extends Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        super(type, balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (!transaction.recipient.equals(transaction.getContractCreationAddress())) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract already created\n            throw new Error('Data error');\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Revert contract creation\n            return new BasicAccount(this.balance);\n        }\n        return this;\n    }\n}\n\nClass.register(Contract);\n","class HashedTimeLockedContract extends Contract {\n    /**\n     * @param {number} balance\n     * @param {Address} sender\n     * @param {Address} recipient\n     * @param {Hash} hashRoot\n     * @param {number} hashCount\n     * @param {number} timeout\n     * @param {number} totalAmount\n     */\n    constructor(balance = 0, sender = Address.NULL, recipient = Address.NULL, hashRoot = Hash.NULL, hashCount = 1, timeout = 0, totalAmount = balance) {\n        super(Account.Type.HTLC, balance);\n        if (!(sender instanceof Address)) throw new Error('Malformed address');\n        if (!(recipient instanceof Address)) throw new Error('Malformed address');\n        if (!(hashRoot instanceof Hash)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint8(hashCount) || hashCount === 0) throw new Error('Malformed hashCount');\n        if (!NumberUtils.isUint32(timeout)) throw new Error('Malformed timeout');\n        if (!NumberUtils.isUint64(totalAmount)) throw new Error('Malformed totalAmount');\n\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Hash} */\n        this._hashRoot = hashRoot;\n        /** @type {number} */\n        this._hashCount = hashCount;\n        /** @type {number} */\n        this._timeout = timeout;\n        /** @type {number} */\n        this._totalAmount = totalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        const buf = new SerialBuffer(transaction.data);\n\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {HashedTimeLockedContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.HTLC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n        const totalAmount = buf.readUint64();\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout, totalAmount);\n    }\n\n\n    /**\n     * Serialize this HTLC object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._sender.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._hashRoot.algorithm);\n        this._hashRoot.serialize(buf);\n        buf.writeUint8(this._hashCount);\n        buf.writeUint32(this._timeout);\n        buf.writeUint64(this._totalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._sender.serializedSize\n            + this._recipient.serializedSize\n            + /*hashAlgorithm*/ 1\n            + this._hashRoot.serializedSize\n            + /*hashCount*/ 1\n            + /*timeout*/ 4\n            + /*totalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Hash} */\n    get hashRoot() {\n        return this._hashRoot;\n    }\n\n    /** @type {number} */\n    get hashCount() {\n        return this._hashCount;\n    }\n\n    /** @type {number} */\n    get timeout() {\n        return this._timeout;\n    }\n\n    /** @type {number} */\n    get totalAmount() {\n        return this._totalAmount;\n    }\n\n    toString() {\n        return `HashedTimeLockedContract{balance=${this._balance}, sender=${this._sender.toUserFriendlyAddress(false)}, recipient=${this._sender.toUserFriendlyAddress(false)}, amount=${this._totalAmount}/${this._hashCount}, timeout=${this._timeout}}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof HashedTimeLockedContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._sender.equals(o._sender)\n            && this._recipient.equals(o._recipient)\n            && this._hashRoot.equals(o._hashRoot)\n            && this._hashCount === o._hashCount\n            && this._timeout === o._timeout\n            && this._totalAmount === o._totalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.proof);\n            const type = buf.readUint8();\n            switch (type) {\n                case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                    const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                    const hashDepth = buf.readUint8();\n                    const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                    let preImage = Hash.unserialize(buf, hashAlgorithm);\n\n                    // Verify that the preImage hashed hashDepth times matches the _provided_ hashRoot.\n                    for (let i = 0; i < hashDepth; ++i) {\n                        preImage = Hash.compute(preImage.array, hashAlgorithm);\n                    }\n                    if (!hashRoot.equals(preImage)) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE:\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n\n            // Reject overlong proof.\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return true; // Accept\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.data);\n\n            Address.unserialize(buf); // sender address\n            Address.unserialize(buf); // recipient address\n            const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n            Hash.unserialize(buf, hashAlgorithm);\n            buf.readUint8(); // hash count\n            buf.readUint32(); // timeout\n\n            // Blacklist Argon2 hash function.\n            if (hashAlgorithm === Hash.Algorithm.ARGON2D) {\n                return false;\n            }\n\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return Contract.verifyIncomingTransaction(transaction);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new HashedTimeLockedContract(balance, this._sender, this._recipient, this._hashRoot, this._hashCount, this._timeout, this._totalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        const buf = new SerialBuffer(transaction.proof);\n        const type = buf.readUint8();\n        let minCap = 0;\n        switch (type) {\n            case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                // Check that the contract has not expired yet.\n                if (this._timeout < blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Check that the provided hashRoot is correct.\n                const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                const hashDepth = buf.readUint8();\n                const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                if (!hashRoot.equals(this._hashRoot)) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Ignore the preImage.\n                Hash.unserialize(buf, hashAlgorithm);\n\n                // Verify that the transaction is signed by the authorized recipient.\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                minCap = Math.max(0, Math.floor((1 - (hashDepth / this._hashCount)) * this._totalAmount));\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE: {\n                if (this._timeout >= blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            default:\n                throw new Error('Proof Error!');\n        }\n\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n        }\n\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n}\n\nHashedTimeLockedContract.ProofType = {\n    REGULAR_TRANSFER: 1,\n    EARLY_RESOLVE: 2,\n    TIMEOUT_RESOLVE: 3\n};\n\nAccount.TYPE_MAP.set(Account.Type.HTLC, HashedTimeLockedContract);\nClass.register(HashedTimeLockedContract);\n","class VestingContract extends Contract {\n    /**\n     * @param {number} [balance]\n     * @param {Address} [owner]\n     * @param {number} [vestingStart]\n     * @param {number} [vestingStepBlocks]\n     * @param {number} [vestingStepAmount]\n     * @param {number} [vestingTotalAmount]\n     */\n    constructor(balance = 0, owner = Address.NULL, vestingStart = 0, vestingStepBlocks = 0, vestingStepAmount = balance, vestingTotalAmount = balance) {\n        super(Account.Type.VESTING, balance);\n        if (!(owner instanceof Address)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint32(vestingStart)) throw new Error('Malformed vestingStart');\n        if (!NumberUtils.isUint32(vestingStepBlocks)) throw new Error('Malformed vestingStepBlocks');\n        if (!NumberUtils.isUint64(vestingStepAmount)) throw new Error('Malformed vestingStepAmount');\n        if (!NumberUtils.isUint64(vestingTotalAmount)) throw new Error('Malformed lowerCap');\n\n        /** @type {Address} */\n        this._owner = owner;\n        /** @type {number} */\n        this._vestingStart = vestingStart;\n        /** @type {number} */\n        this._vestingStepBlocks = vestingStepBlocks;\n        /** @type {number} */\n        this._vestingStepAmount = vestingStepAmount;\n        /** @type {number} */\n        this._vestingTotalAmount = vestingTotalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        /** @type {number} */\n        let vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount;\n        const buf = new SerialBuffer(transaction.data);\n        const owner = Address.unserialize(buf);\n        vestingTotalAmount = transaction.value;\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n                // Only block number: vest full amount at that block\n                vestingStart = 0;\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = vestingTotalAmount;\n                break;\n            case Address.SERIALIZED_SIZE + 16:\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                break;\n            case Address.SERIALIZED_SIZE + 24:\n                // Create a vesting account with some instantly vested funds or additional funds considered.\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                vestingTotalAmount = buf.readUint64();\n                break;\n            default:\n                throw new Error('Invalid transaction data');\n        }\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {VestingContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.VESTING) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const owner = Address.unserialize(buf);\n        const vestingStart = buf.readUint32();\n        const vestingStepBlocks = buf.readUint32();\n        const vestingStepAmount = buf.readUint64();\n        const vestingTotalAmount = buf.readUint64();\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * Serialize this VestingContract object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._owner.serialize(buf);\n        buf.writeUint32(this._vestingStart);\n        buf.writeUint32(this._vestingStepBlocks);\n        buf.writeUint64(this._vestingStepAmount);\n        buf.writeUint64(this._vestingTotalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._owner.serializedSize\n            + /*vestingStart*/ 4\n            + /*vestingStepBlocks*/ 4\n            + /*vestingStepAmount*/ 8\n            + /*vestingTotalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get owner() {\n        return this._owner;\n    }\n\n    /** @type {number} */\n    get vestingStart() {\n        return this._vestingStart;\n    }\n\n    /** @type {number} */\n    get vestingStepBlocks() {\n        return this._vestingStepBlocks;\n    }\n\n    /** @type {number} */\n    get vestingStepAmount() {\n        return this._vestingStepAmount;\n    }\n\n    /** @type {number} */\n    get vestingTotalAmount() {\n        return this._vestingTotalAmount;\n    }\n\n    toString() {\n        return `VestingAccount{balance=${this._balance}, owner=${this._owner.toUserFriendlyAddress()}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof VestingContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._owner.equals(o._owner)\n            && this._vestingStart === o._vestingStart\n            && this._vestingStepBlocks === o._vestingStepBlocks\n            && this._vestingStepAmount === o._vestingStepAmount\n            && this._vestingTotalAmount === o._vestingTotalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        const buf = new SerialBuffer(transaction.proof);\n\n        if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n            return false;\n        }\n\n        if (buf.readPos !== buf.byteLength) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n            case Address.SERIALIZED_SIZE + 16:\n            case Address.SERIALIZED_SIZE + 24:\n                return Contract.verifyIncomingTransaction(transaction);\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new VestingContract(balance, this._owner, this._vestingStart, this._vestingStepBlocks, this._vestingStepAmount, this._vestingTotalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const minCap = this.getMinCap(blockHeight);\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n\n            const buf = new SerialBuffer(transaction.proof);\n            if (!SignatureProof.unserialize(buf).isSignedBy(this._owner)) {\n                throw new Error('Proof Error!');\n            }\n        }\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n\n    /**\n     * @param {number} blockHeight\n     * @returns {number}\n     */\n    getMinCap(blockHeight) {\n        return this._vestingStepBlocks && this._vestingStepAmount > 0\n            ? Math.max(0, this._vestingTotalAmount - Math.floor((blockHeight - this._vestingStart) / this._vestingStepBlocks) * this._vestingStepAmount)\n            : 0;\n    }\n}\n\nAccount.TYPE_MAP.set(Account.Type.VESTING, VestingContract);\nClass.register(VestingContract);\n","class BlockHeader {\n    /**\n     * @param {Hash} prevHash\n     * @param {Hash} interlinkHash\n     * @param {Hash} bodyHash\n     * @param {Hash} accountsHash\n     * @param {number} nBits\n     * @param {number} height\n     * @param {number} timestamp\n     * @param {number} nonce\n     * @param {number} version\n     */\n    constructor(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version = BlockHeader.CURRENT_VERSION) {\n        if (!NumberUtils.isUint16(version)) throw 'Malformed version';\n        if (!Hash.isHash(prevHash)) throw 'Malformed prevHash';\n        if (!Hash.isHash(interlinkHash)) throw 'Malformed interlinkHash';\n        if (!Hash.isHash(bodyHash)) throw 'Malformed bodyHash';\n        if (!Hash.isHash(accountsHash)) throw 'Malformed accountsHash';\n        if (!NumberUtils.isUint32(nBits) || !BlockUtils.isValidCompact(nBits)) throw 'Malformed nBits';\n        if (!NumberUtils.isUint32(height)) throw 'Invalid height';\n        if (!NumberUtils.isUint32(timestamp)) throw 'Malformed timestamp';\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n\n        /** @type {number} */\n        this._version = version;\n        /** @type {Hash} */\n        this._prevHash = prevHash;\n        /** @type {Hash} */\n        this._interlinkHash = interlinkHash;\n        /** @type {Hash} */\n        this._bodyHash = bodyHash;\n        /** @type {Hash} */\n        this._accountsHash = accountsHash;\n        /** @type {number} */\n        this._nBits = nBits;\n        /** @type {number} */\n        this._height = height;\n        /** @type {number} */\n        this._timestamp = timestamp;\n        /** @type {number} */\n        this._nonce = nonce;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {BlockHeader}\n     */\n    static unserialize(buf) {\n        const version = buf.readUint16();\n        if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw new Error(`Unsupported block version ${version}`);\n        const prevHash = Hash.unserialize(buf);\n        const interlinkHash = Hash.unserialize(buf);\n        const bodyHash = Hash.unserialize(buf);\n        const accountsHash = Hash.unserialize(buf);\n        const nBits = buf.readUint32();\n        const height = buf.readUint32();\n        const timestamp = buf.readUint32();\n        const nonce = buf.readUint32();\n        return new BlockHeader(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._version);\n        this._prevHash.serialize(buf);\n        this._interlinkHash.serialize(buf);\n        this._bodyHash.serialize(buf);\n        this._accountsHash.serialize(buf);\n        buf.writeUint32(this._nBits);\n        buf.writeUint32(this._height);\n        buf.writeUint32(this._timestamp);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*version*/ 2\n            + this._prevHash.serializedSize\n            + this._interlinkHash.serializedSize\n            + this._bodyHash.serializedSize\n            + this._accountsHash.serializedSize\n            + /*nBits*/ 4\n            + /*height*/ 4\n            + /*timestamp*/ 4\n            + /*nonce*/ 4;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<boolean>}\n     */\n    async verifyProofOfWork(buf) {\n        const pow = await this.pow(buf);\n        return BlockUtils.isProofOfWork(pow, this.target);\n    }\n\n    /**\n     * @param {BlockHeader} prevHeader\n     * @returns {boolean}\n     */\n    isImmediateSuccessorOf(prevHeader) {\n        // Check that the height is one higher than the previous height.\n        if (this.height !== prevHeader.height + 1) {\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this.timestamp < prevHeader.timestamp) {\n            return false;\n        }\n\n        // Check that the hash of the predecessor block equals prevHash.\n        const prevHash = prevHeader.hash();\n        if (!this.prevHash.equals(prevHash)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Hash}\n     */\n    hash(buf) {\n        this._hash = this._hash || Hash.light(this.serialize(buf));\n        return this._hash;\n    }\n    \n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<Hash>}\n     */\n    async pow(buf) {\n        this._pow = this._pow || await Hash.hard(this.serialize(buf));\n        return this._pow;\n    }\n\n    /**\n     * @param {BlockHeader|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockHeader\n            && this._prevHash.equals(o.prevHash)\n            && this._interlinkHash.equals(o.interlinkHash)\n            && this._bodyHash.equals(o.bodyHash)\n            && this._accountsHash.equals(o.accountsHash)\n            && this._nBits === o.nBits\n            && this._height === o.height\n            && this._timestamp === o.timestamp\n            && this._nonce === o.nonce;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return 'BlockHeader{'\n            + `prevHash=${this._prevHash}, `\n            + `interlinkHash=${this._interlinkHash}, `\n            + `bodyHash=${this._bodyHash}, `\n            + `accountsHash=${this._accountsHash}, `\n            + `nBits=${this._nBits.toString(16)}, `\n            + `height=${this._height}, `\n            + `timestamp=${this._timestamp}, `\n            + `nonce=${this._nonce}`\n            + '}';\n    }\n\n    /** @type {number} */\n    get version() {\n        return this._version;\n    }\n\n    /** @type {Hash} */\n    get prevHash() {\n        return this._prevHash;\n    }\n\n    /** @type {Hash} */\n    get interlinkHash() {\n        return this._interlinkHash;\n    }\n\n    /** @type {Hash} */\n    get bodyHash() {\n        return this._bodyHash;\n    }\n\n    /** @type {Hash} */\n    get accountsHash() {\n        return this._accountsHash;\n    }\n\n    /** @type {number} */\n    get nBits() {\n        return this._nBits;\n    }\n\n    /** @type {BigNumber} */\n    get target() {\n        return BlockUtils.compactToTarget(this._nBits);\n    }\n\n    /** @type {BigNumber} */\n    get difficulty() {\n        return BlockUtils.compactToDifficulty(this._nBits);\n    }\n\n    /** @type {number} */\n    get height() {\n        return this._height;\n    }\n\n    /** @type {number} */\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    /** @type {number} */\n    get nonce() {\n        return this._nonce;\n    }\n\n    // XXX The miner changes the nonce of an existing BlockHeader during the\n    // mining process.\n    /** @type {number} */\n    set nonce(n) {\n        this._nonce = n;\n        this._hash = null;\n        this._pow = null;\n    }\n}\n// FIXME: Clean up for mainnet.\nBlockHeader.Version = {\n    V1: 1\n};\nBlockHeader.CURRENT_VERSION = BlockHeader.Version.V1;\nBlockHeader.SUPPORTED_VERSIONS = [\n    BlockHeader.Version.V1\n];\nBlockHeader.SERIALIZED_SIZE = 146;\nClass.register(BlockHeader);\n","class BlockInterlink {\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} prevHash\n     * @returns {{repeatBits: Uint8Array, compressed: Array.<Hash>}}\n     * @protected\n     */\n    static _compress(hashes, prevHash) {\n        const count = hashes.length;\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = new Uint8Array(repeatBitsSize);\n\n        let lastHash = prevHash;\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const hash = hashes[i];\n            if (!hash.equals(lastHash)) {\n                compressed.push(hash);\n                lastHash = hash;\n            } else {\n                repeatBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return {repeatBits, compressed};\n    }\n\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} [prevHash]\n     * @param {Uint8Array} [repeatBits]\n     * @param {Array.<Hash>} [compressed]\n     */\n    constructor(hashes, prevHash, repeatBits, compressed) {\n        if (!Array.isArray(hashes) || !NumberUtils.isUint8(hashes.length)\n            || hashes.some(it => !(it instanceof Hash))) throw new Error('Malformed hashes');\n        if ((repeatBits || compressed) && !(repeatBits && compressed)) throw new Error('Malformed repeatBits/compressed');\n        if (!prevHash && !repeatBits) throw new Error('Either prevHash or repeatBits/compressed required');\n\n        if (!repeatBits) {\n            ({repeatBits, compressed} = BlockInterlink._compress(hashes, prevHash));\n        }\n\n        /** @type {Array.<Hash>} */\n        this._hashes = hashes;\n        /** @type {Uint8Array} */\n        this._repeatBits = repeatBits;\n        /** @type {Array.<Hash>} */\n        this._compressed = compressed;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash} prevHash\n     * @returns {BlockInterlink}\n     */\n    static unserialize(buf, prevHash) {\n        const count = buf.readUint8();\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = buf.read(repeatBitsSize);\n\n        let hash = prevHash;\n        const hashes = [];\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const repeated = (repeatBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            if (!repeated) {\n                hash = Hash.unserialize(buf);\n                compressed.push(hash);\n            }\n            hashes.push(hash);\n        }\n\n        return new BlockInterlink(hashes, prevHash, repeatBits, compressed);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._hashes.length);\n        buf.write(this._repeatBits);\n        for (const hash of this._compressed) {\n            hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return /*count*/ 1\n            + this._repeatBits.length\n            + this._compressed.reduce((sum, hash) => sum + hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {BlockInterlink|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockInterlink\n            && this._hashes.length === o._hashes.length\n            && this._hashes.every((hash, i) => hash.equals(o.hashes[i]));\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot([this._repeatBits, GenesisConfig.GENESIS_HASH, ...this._compressed]);\n        }\n        return this._hash;\n    }\n\n    /**\n     * @type {Array.<Hash>}\n     */\n    get hashes() {\n        return this._hashes;\n    }\n\n    /**\n     * @type {number}\n     */\n    get length() {\n        return this._hashes.length;\n    }\n}\nClass.register(BlockInterlink);\n","class BlockBody {\n    /**\n     * @param {Uint8Array} extraData\n     * @returns {number}\n     */\n    static getMetadataSize(extraData) {\n        return Address.SERIALIZED_SIZE\n            + /*extraDataLength*/ 1\n            + extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n    }\n\n    /**\n     * @param {Address} minerAddr\n     * @param {Array.<Transaction>} transactions\n     * @param {Uint8Array} [extraData]\n     * @param {Array.<PrunedAccount>} prunedAccounts\n     */\n    constructor(minerAddr, transactions, extraData = new Uint8Array(0), prunedAccounts = []) {\n        if (!(minerAddr instanceof Address)) throw 'Malformed minerAddr';\n        if (!Array.isArray(transactions) || transactions.some(it => !(it instanceof Transaction))) throw 'Malformed transactions';\n        if (!(extraData instanceof Uint8Array) || !NumberUtils.isUint8(extraData.byteLength)) throw 'Malformed extraData';\n\n        /** @type {Address} */\n        this._minerAddr = minerAddr;\n        /** @type {Uint8Array} */\n        this._extraData = extraData;\n        /** @type {Array.<Transaction>} */\n        this._transactions = transactions;\n        /** @type {Array.<PrunedAccount>} */\n        this._prunedAccounts = prunedAccounts;\n        /** @type {Hash} */\n        this._hash = null;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BlockBody}\n     */\n    static unserialize(buf) {\n        const minerAddr = Address.unserialize(buf);\n        const extraDataLength = buf.readUint8();\n        const extraData = buf.read(extraDataLength);\n        const numTransactions = buf.readUint16();\n        const transactions = new Array(numTransactions);\n        for (let i = 0; i < numTransactions; i++) {\n            transactions[i] = Transaction.unserialize(buf);\n        }\n        const numPrunedAccounts = buf.readUint16();\n        const prunedAccounts = [];\n        for (let i = 0; i < numPrunedAccounts; i++) {\n            prunedAccounts.push(PrunedAccount.unserialize(buf));\n        }\n        return new BlockBody(minerAddr, transactions, extraData, prunedAccounts);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._minerAddr.serialize(buf);\n        buf.writeUint8(this._extraData.byteLength);\n        buf.write(this._extraData);\n        buf.writeUint16(this._transactions.length);\n        for (const tx of this._transactions) {\n            tx.serialize(buf);\n        }\n        buf.writeUint16(this._prunedAccounts.length);\n        for (const acc of this._prunedAccounts) {\n            acc.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        let size = this._minerAddr.serializedSize\n            + /*extraDataLength*/ 1\n            + this._extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n        for (const tx of this._transactions) {\n            size += tx.serializedSize;\n        }\n        size += this._prunedAccounts.reduce((sum, acc) => sum + acc.serializedSize, 0);\n        return size;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    verify() {\n        /** @type {Transaction} */\n        let previousTx = null;\n        for (const tx of this._transactions) {\n            // Ensure transactions are ordered and unique.\n            if (previousTx && previousTx.compareBlockOrder(tx) >= 0) {\n                Log.w(BlockBody, 'Invalid block - transactions not ordered.');\n                return false;\n            }\n            previousTx = tx;\n\n            // Check that all transactions are valid.\n            if (!tx.verify()) {\n                Log.w(BlockBody, 'Invalid block - invalid transaction');\n                return false;\n            }\n        }\n\n        let previousAcc = null;\n        for (const acc of this._prunedAccounts) {\n            // Ensure pruned accounts are ordered and unique.\n            if (previousAcc && previousAcc.compare(acc) >= 0) {\n                Log.w(BlockBody, 'Invalid block - pruned accounts not ordered.');\n                return false;\n            }\n            previousAcc = acc;\n            \n            // Check that pruned accounts are actually supposed to be pruned\n            if (!acc.account.isToBePruned()) {\n                Log.w(BlockBody, 'Invalid block - invalid pruned account');\n                return false;\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {Array}\n     */\n    getMerkleLeafs() {\n        return [this._minerAddr, this._extraData, ...this._transactions, ...this.prunedAccounts];\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot(this.getMerkleLeafs());\n        }\n        return this._hash;\n    }\n\n    /**\n     * @param {BlockBody} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockBody\n            && this._minerAddr.equals(o.minerAddr)\n            && BufferUtils.equals(this._extraData, o.extraData)\n            && this._transactions.length === o.transactions.length\n            && this._transactions.every((tx, i) => tx.equals(o.transactions[i]));\n    }\n\n    /**\n     * @return {Array.<Address>}\n     */\n    getAddresses() {\n        const addresses = [this._minerAddr];\n        for (const tx of this._transactions) {\n            addresses.push(tx.sender, tx.recipient);\n        }\n        return addresses;\n    }\n\n    /** @type {Uint8Array} */\n    get extraData() {\n        return this._extraData;\n    }\n\n    /** @type {Address} */\n    get minerAddr() {\n        return this._minerAddr;\n    }\n\n    /** @type {Array.<Transaction>} */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /** @type {number} */\n    get transactionCount() {\n        return this._transactions.length;\n    }\n\n    /** @type {Array.<PrunedAccount>} */\n    get prunedAccounts() {\n        return this._prunedAccounts;\n    }\n}\n\nClass.register(BlockBody);\n","class BlockUtils {\n    /**\n     * @param {number} compact\n     * @returns {BigNumber}\n     */\n    static compactToTarget(compact) {\n        return new BigNumber(compact & 0xffffff).times(new BigNumber(2).pow(8 * Math.max((compact >> 24) - 3, 0)));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static targetToCompact(target) {\n        if (!target.isFinite() || target.isNaN()) throw 'Invalid Target';\n\n        // Divide to get first byte\n        let size = Math.max(Math.ceil(Math.log2(target.toNumber()) / 8), 1);\n        const firstByte = target / Math.pow(2, (size - 1) * 8);\n\n        // If the first (most significant) byte is greater than 127 (0x7f),\n        // prepend a zero byte.\n        if (firstByte >= 0x80 && size >= 3) {\n            size++;\n        }\n\n        // The first byte of the 'compact' format is the number of bytes,\n        // including the prepended zero if it's present.\n        // The following three bytes are the first three bytes of the above\n        // representation. If less than three bytes are present, then one or\n        // more of the last bytes of the compact representation will be zero.\n        return (size << 24) + ((target / Math.pow(2, Math.max(size - 3, 0) * 8)) & 0xffffff);\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static getTargetHeight(target) {\n        // Precision loss should be ok here.\n        return Math.ceil(Math.log2(target.toNumber()));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static getTargetDepth(target) {\n        return BlockUtils.getTargetHeight(Policy.BLOCK_TARGET_MAX) - BlockUtils.getTargetHeight(target);\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {BigNumber}\n     */\n    static compactToDifficulty(compact) {\n        return Policy.BLOCK_TARGET_MAX.div(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {BigNumber} difficulty\n     * @returns {number}\n     */\n    static difficultyToCompact(difficulty) {\n        return BlockUtils.targetToCompact(BlockUtils.difficultyToTarget(difficulty));\n    }\n\n    /**\n     * @param {BigNumber} difficulty\n     * @returns {BigNumber}\n     */\n    static difficultyToTarget(difficulty) {\n        return Policy.BLOCK_TARGET_MAX.div(difficulty);\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {BigNumber}\n     */\n    static targetToDifficulty(target) {\n        return Policy.BLOCK_TARGET_MAX.div(target);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {BigNumber}\n     */\n    static hashToTarget(hash) {\n        return new BigNumber(hash.toHex(), 16);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {BigNumber}\n     */\n    static realDifficulty(hash) {\n        return BlockUtils.targetToDifficulty(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {number}\n     */\n    static getHashDepth(hash) {\n        return BlockUtils.getTargetDepth(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {BigNumber} target\n     * @returns {boolean}\n     */\n    static isProofOfWork(hash, target) {\n        return new BigNumber(hash.toHex(), 16).lte(target);\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {boolean}\n     */\n\n    static isValidCompact(compact) {\n        return BlockUtils.isValidTarget(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {?BigNumber} target\n     * @returns {boolean}\n     */\n    static isValidTarget(target) {\n        return target !== null && target.gte(1) && target.lte(Policy.BLOCK_TARGET_MAX);\n    }\n\n    /**\n     * @param {BlockHeader} headBlock\n     * @param {BlockHeader} tailBlock\n     * @param {BigNumber} deltaTotalDifficulty\n     * @returns {BigNumber}\n     */\n    static getNextTarget(headBlock, tailBlock, deltaTotalDifficulty) {\n        Assert.that(\n            (headBlock.height - tailBlock.height === Policy.DIFFICULTY_BLOCK_WINDOW)\n                || (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW && tailBlock.height === 1),\n            `Tail and head block must be ${Policy.DIFFICULTY_BLOCK_WINDOW} blocks apart`);\n\n        let actualTime = headBlock.timestamp - tailBlock.timestamp;\n\n        // Simulate that the Policy.BLOCK_TIME was achieved for the blocks before the genesis block, i.e. we simulate\n        // a sliding window that starts before the genesis block. Assume difficulty = 1 for these blocks.\n        if (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW) {\n            actualTime += (Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1) * Policy.BLOCK_TIME;\n            deltaTotalDifficulty = deltaTotalDifficulty.plus(Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1);\n        }\n\n        // Compute the target adjustment factor.\n        const expectedTime = Policy.DIFFICULTY_BLOCK_WINDOW * Policy.BLOCK_TIME;\n        let adjustment = actualTime / expectedTime;\n\n        // Clamp the adjustment factor to [1 / MAX_ADJUSTMENT_FACTOR, MAX_ADJUSTMENT_FACTOR].\n        adjustment = Math.max(adjustment, 1 / Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n        adjustment = Math.min(adjustment, Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n\n        // Compute the next target.\n        const averageDifficulty = deltaTotalDifficulty.div(Policy.DIFFICULTY_BLOCK_WINDOW);\n        const averageTarget = BlockUtils.difficultyToTarget(averageDifficulty);\n        let nextTarget = averageTarget.times(adjustment);\n\n        // Make sure the target is below or equal the maximum allowed target (difficulty 1).\n        // Also enforce a minimum target of 1.\n        nextTarget = BigNumber.min(nextTarget, Policy.BLOCK_TARGET_MAX);\n        nextTarget = BigNumber.max(nextTarget, 1);\n\n        // XXX Reduce target precision to nBits precision.\n        const nBits = BlockUtils.targetToCompact(nextTarget);\n        return BlockUtils.compactToTarget(nBits);\n    }\n}\nClass.register(BlockUtils);\n","class Block {\n    /**\n     * @param {BlockHeader} header\n     * @param {BlockInterlink} interlink\n     * @param {BlockBody} [body]\n     */\n    constructor(header, interlink, body) {\n        if (!(header instanceof BlockHeader)) throw 'Malformed header';\n        if (!(interlink instanceof BlockInterlink)) throw 'Malformed interlink';\n        if (body && !(body instanceof BlockBody)) throw 'Malformed body';\n\n        /** @type {BlockHeader} */\n        this._header = header;\n        /** @type {BlockInterlink} */\n        this._interlink = interlink;\n        /** @type {BlockBody} */\n        this._body = body;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Block}\n     */\n    static unserialize(buf) {\n        const header = BlockHeader.unserialize(buf);\n        const interlink = BlockInterlink.unserialize(buf, header.prevHash);\n\n        let body = undefined;\n        const bodyPresent = buf.readUint8();\n        if (bodyPresent) {\n            body = BlockBody.unserialize(buf);\n        }\n\n        return new Block(header, interlink, body);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._header.serialize(buf);\n        this._interlink.serialize(buf);\n\n        if (this._body) {\n            buf.writeUint8(1);\n            this._body.serialize(buf);\n        } else {\n            buf.writeUint8(0);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._header.serializedSize\n            + this._interlink.serializedSize\n            + /*bodyPresent*/ 1\n            + (this._body ? this._body.serializedSize : 0);\n    }\n\n    /**\n     * @param {Time} time\n     * @returns {Promise.<boolean>}\n     */\n    async verify(time) {\n        if (this._valid === undefined) {\n            if (this.isLight() || this.body.transactions.length < 150 || !IWorker.areWorkersAsync) {\n                // worker overhead doesn't pay off for small transaction numbers\n                this._valid = await this._verify(time.now());\n            } else {\n                const transactionValid = this.body.transactions.map(t => t._valid);\n                const worker = await CryptoWorker.getInstanceAsync();\n                const {valid, pow, interlinkHash, bodyHash} = await worker.blockVerify(this.serialize(),\n                    transactionValid, time.now(), GenesisConfig.GENESIS_HASH.serialize(), GenesisConfig.NETWORK_ID);\n                this._valid = valid;\n                this.header._pow = Hash.unserialize(new SerialBuffer(pow));\n                this.interlink._hash = Hash.unserialize(new SerialBuffer(interlinkHash));\n                this.body._hash = Hash.unserialize(new SerialBuffer(bodyHash));\n            }\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} timeNow\n     * @returns {Promise.<boolean>}\n     */\n    async _verify(timeNow) {\n        // Check that the timestamp is not too far into the future.\n        if (this._header.timestamp * 1000 > timeNow + Block.TIMESTAMP_DRIFT_MAX * 1000) {\n            Log.w(Block, 'Invalid block - timestamp too far in the future');\n            return false;\n        }\n\n        // Check that the header hash matches the difficulty.\n        if (!(await this._header.verifyProofOfWork())) {\n            Log.w(Block, 'Invalid block - PoW verification failed');\n            return false;\n        }\n\n        // Check that the maximum block size is not exceeded.\n        if (this.serializedSize > Policy.BLOCK_SIZE_MAX) {\n            Log.w(Block, 'Invalid block - max block size exceeded');\n            return false;\n        }\n\n        // Verify that the interlink is valid.\n        if (!this._verifyInterlink()) {\n            return false;\n        }\n\n        // XXX Verify the body only if it is present.\n        if (this.isFull() && !this._verifyBody()) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyInterlink() {\n        // Skip check for genesis block due to the cyclic dependency (since the interlink hash contains the genesis block hash).\n        if (this.height === 1 && this._header.interlinkHash.equals(new Hash(null))) {\n            return true;\n        }\n\n        // Check that the interlinkHash given in the header matches the actual interlinkHash.\n        const interlinkHash = this._interlink.hash();\n        if (!this._header.interlinkHash.equals(interlinkHash)) {\n            Log.w(Block, 'Invalid block - interlink hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyBody() {\n        // Check that the body is valid.\n        if (!this._body.verify()) {\n            return false;\n        }\n\n        // Check that bodyHash given in the header matches the actual body hash.\n        const bodyHash = this._body.hash();\n        if (!this._header.bodyHash.equals(bodyHash)) {\n            Log.w(Block, 'Invalid block - body hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isImmediateSuccessorOf(predecessor) {\n        // Check the header.\n        if (!this._header.isImmediateSuccessorOf(predecessor.header)) {\n            return false;\n        }\n\n        // Check that the interlink is correct.\n        const interlink = await predecessor.getNextInterlink(this.target, this.version);\n        if (!this._interlink.equals(interlink)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isInterlinkSuccessorOf(predecessor) {\n        // Check that the height is higher than the predecessor's.\n        if (this._header.height <= predecessor.header.height) {\n            Log.v(Block, 'No interlink successor - height');\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this._header.timestamp < predecessor.header.timestamp) {\n            Log.v(Block, 'No interlink successor - timestamp');\n            return false;\n        }\n\n        // Check that the predecessor is contained in this block's interlink and verify its position.\n        const prevHash = predecessor.hash();\n        if (!GenesisConfig.GENESIS_HASH.equals(prevHash)) {\n            const prevPow = await predecessor.pow();\n            const targetHeight = BlockUtils.getTargetHeight(this.target);\n            let blockFound = false;\n\n            let depth = 0;\n            for (; depth < this._interlink.length; depth++) {\n                if (prevHash.equals(this._interlink.hashes[depth])) {\n                    blockFound = true;\n                    const target = new BigNumber(2).pow(targetHeight - depth);\n                    if (!BlockUtils.isProofOfWork(prevPow, target)) {\n                        Log.v(Block, 'No interlink successor - invalid position in interlink');\n                        return false;\n                    }\n                }\n            }\n\n            if (!blockFound) {\n                Log.v(Block, 'No interlink successor - not in interlink');\n                return false;\n            }\n        }\n\n        // If the predecessor happens to be the immediate predecessor, check additionally:\n        // - that the height of the successor is one higher\n        // - that the interlink is correct.\n        if (this._header.prevHash.equals(prevHash)) {\n            if (this._header.height !== predecessor.header.height + 1) {\n                Log.v(Block, 'No interlink successor - immediate height');\n                return false;\n            }\n\n            const interlink = await predecessor.getNextInterlink(this.target, this.version);\n            const interlinkHash = interlink.hash();\n            if (!this._header.interlinkHash.equals(interlinkHash)) {\n                Log.v(Block, 'No interlink successor - immediate interlink');\n                return false;\n            }\n        }\n        // Otherwise, if the prevHash doesn't match but the blocks should be adjacent according to their height fields,\n        // this cannot be a valid successor of predecessor.\n        else if (this._header.height === predecessor.header.height + 1) {\n            Log.v(Block, 'No interlink successor - immediate height (2)');\n            return false;\n        }\n        // Otherwise, check that the interlink construction is valid given the information we have.\n        else {\n            // TODO Take different targets into account.\n\n            // The number of new blocks in the interlink is bounded by the height difference.\n            /** @type {HashSet.<Hash>} */\n            const hashes = new HashSet();\n            hashes.addAll(this._interlink.hashes);\n            hashes.removeAll(predecessor.interlink.hashes);\n            if (hashes.length > this._header.height - predecessor.header.height) {\n                Log.v(Block, 'No interlink successor - too many new blocks');\n                return false;\n            }\n\n            // Check that the interlink is not too short.\n            const thisDepth = BlockUtils.getTargetDepth(this.target);\n            const prevDepth = BlockUtils.getTargetDepth(predecessor.target);\n            const depthDiff = thisDepth - prevDepth;\n            if (this._interlink.length < predecessor.interlink.length - depthDiff) {\n                Log.v(Block, 'No interlink successor - interlink too short');\n                return false;\n            }\n\n            // If the same block is found in both interlinks, all blocks at lower depths must be the same in both interlinks.\n            let commonBlock = false;\n            const thisInterlink = this._interlink.hashes;\n            const prevInterlink = predecessor.interlink.hashes;\n            for (let i = 1; i < prevInterlink.length && i - depthDiff < thisInterlink.length; i++) {\n                if (prevInterlink[i].equals(thisInterlink[i - depthDiff])) {\n                    commonBlock = true;\n                }\n                else if (commonBlock) {\n                    Log.v(Block, 'No interlink successor - invalid common suffix');\n                    return false;\n                }\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isSuccessorOf(predecessor) {\n        // TODO Improve this! Lots of duplicate checks.\n        return (await this.isImmediateSuccessorOf(predecessor)) || (await this.isInterlinkSuccessorOf(predecessor));\n    }\n\n    /**\n     * @param {BigNumber} nextTarget\n     * @param {number} [nextVersion]\n     * @returns {Promise.<BlockInterlink>}\n     */\n    async getNextInterlink(nextTarget, nextVersion = BlockHeader.CURRENT_VERSION) {\n        /** @type {Array.<Hash>} */\n        const hashes = [];\n        const hash = this.hash();\n\n        // Compute how many times this blockHash should be included in the next interlink.\n        const thisPowDepth = BlockUtils.getHashDepth(await this.pow());\n        const nextTargetDepth = BlockUtils.getTargetDepth(nextTarget);\n        const numOccurrences = Math.max(thisPowDepth - nextTargetDepth + 1, 0);\n\n        // Push this blockHash numOccurrences times onto the next interlink.\n        for (let i = 0; i < numOccurrences; i++) {\n            hashes.push(hash);\n        }\n\n        // Compute how many blocks to omit from the beginning of this interlink.\n        const thisTargetDepth = BlockUtils.getTargetDepth(this.target);\n        const targetOffset = nextTargetDepth - thisTargetDepth;\n        const interlinkOffset = numOccurrences + targetOffset;\n\n        // Push the remaining hashes from this interlink.\n        for (let i = interlinkOffset; i < this.interlink.length; i++) {\n            hashes.push(this.interlink.hashes[i]);\n        }\n        \n        return new BlockInterlink(hashes, hash);\n    }\n\n    /**\n     * @returns {Block}\n     */\n    shallowCopy() {\n        return new Block(this._header, this._interlink, this._body);\n    }\n\n    /**\n     * @param {Block|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Block\n            && this._header.equals(o._header)\n            && this._interlink.equals(o._interlink)\n            && (this._body ? this._body.equals(o._body) : !o._body);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isLight() {\n        return !this._body;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isFull() {\n        return !!this._body;\n    }\n\n    /**\n     * @returns {Block}\n     */\n    toLight() {\n        return this.isLight() ? this : new Block(this._header, this._interlink);\n    }\n\n    /**\n     * @param {BlockBody} body\n     * @returns {Block}\n     */\n    toFull(body) {\n        return this.isFull() ? this : new Block(this._header, this._interlink, body);\n    }\n\n    /**\n     * @type {BlockHeader}\n     */\n    get header() {\n        return this._header;\n    }\n\n    /**\n     * @type {BlockInterlink}\n     */\n    get interlink() {\n        return this._interlink;\n    }\n\n    /**\n     * @type {BlockBody}\n     */\n    get body() {\n        if (this.isLight()) {\n            throw 'Cannot access body of light block';\n        }\n        return this._body;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get version() {\n        return this._header.version;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get prevHash() {\n        return this._header.prevHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get bodyHash() {\n        return this._header.bodyHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get accountsHash() {\n        return this._header.accountsHash;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nBits() {\n        return this._header.nBits;\n    }\n\n    /**\n     * @type {BigNumber}\n     */\n    get target() {\n        return this._header.target;\n    }\n\n    /**\n     * @type {BigNumber}\n     */\n    get difficulty() {\n        return this._header.difficulty;\n    }\n\n    /**\n     * @type {number}\n     */\n    get height() {\n        return this._header.height;\n    }\n    \n    /**\n     * @type {number}\n     */\n    get timestamp() {\n        return this._header.timestamp;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nonce() {\n        return this._header.nonce;\n    }\n\n    /**\n     * @type {Address}\n     */\n    get minerAddr() {\n        return this._body.minerAddr;\n    }\n\n    /**\n     * @type {Array.<Transaction>}\n     */\n    get transactions() {\n        return this._body.transactions;\n    }\n\n    /**\n     * @type {number}\n     */\n    get transactionCount() {\n        return this._body.transactionCount;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Hash}\n     */\n    hash(buf) {\n        return this._header.hash(buf);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Promise.<Hash>}\n     */\n    pow(buf) {\n        return this._header.pow(buf);\n    }\n\n    toString() {\n        return `Block{height=${this.height},prev=${this.prevHash}}`;\n    }\n\n}\nBlock.TIMESTAMP_DRIFT_MAX = 600 /* seconds */; // 10 minutes\nClass.register(Block);\n","/**\n * @abstract\n */\nclass Transaction {\n    /**\n     * @param {Transaction.Format} format\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(format, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId = GenesisConfig.NETWORK_ID) {\n        if (!(sender instanceof Address)) throw new Error('Malformed sender');\n        if (!NumberUtils.isUint8(senderType)) throw new Error('Malformed sender type');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient');\n        if (!NumberUtils.isUint8(recipientType)) throw new Error('Malformed recipient type');\n        if (!NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed value');\n        if (!NumberUtils.isUint64(fee)) throw new Error('Malformed fee');\n        if (!NumberUtils.isUint32(validityStartHeight)) throw new Error('Malformed validityStartHeight');\n        if (!NumberUtils.isUint8(flags) && (flags & ~(Transaction.Flag.ALL)) > 0) throw new Error('Malformed flags');\n        if (!(data instanceof Uint8Array) || !(NumberUtils.isUint16(data.byteLength))) throw new Error('Malformed data');\n        if (proof && (!(proof instanceof Uint8Array) || !(NumberUtils.isUint16(proof.byteLength)))) throw new Error('Malformed proof');\n        if (!NumberUtils.isUint8(networkId)) throw new Error('Malformed networkId');\n\n        /** @type {Transaction.Format} */\n        this._format = format;\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Account.Type} */\n        this._senderType = senderType;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Account.Type} */\n        this._recipientType = recipientType;\n        /** @type {number} */\n        this._value = value;\n        /** @type {number} */\n        this._fee = fee;\n        /** @type {number} */\n        this._networkId = networkId;\n        /** @type {number} */\n        this._validityStartHeight = validityStartHeight;\n        /** @type {Transaction.Flag | *} */\n        this._flags = flags;\n        /** @type {Uint8Array} */\n        this._data = data;\n        /** @type {Uint8Array} */\n        this._proof = proof;\n\n        if (this._recipient === Address.CONTRACT_CREATION) this._recipient = this.getContractCreationAddress();\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const format = /** @type {Transaction.Format} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format).unserialize(buf);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        buf.writeUint16(this._data.byteLength);\n        buf.write(this._data);\n        this._sender.serialize(buf);\n        buf.writeUint8(this._senderType);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._recipientType);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        buf.writeUint8(this._flags);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return /*dataSize*/ 2\n            + this._data.byteLength\n            + this._sender.serializedSize\n            + /*senderType*/ 1\n            + this._recipient.serializedSize\n            + /*recipientType*/ 1\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + /*flags*/ 1;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     */\n    verify(networkId) {\n        if (this._valid === undefined) {\n            this._valid = this._verify(networkId);\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     * @private\n     */\n    _verify(networkId = GenesisConfig.NETWORK_ID) {\n        if (this._networkId !== networkId) {\n            Log.w(Transaction, 'Transaction is not valid in this network', this);\n            return false;\n        }\n        // Check that sender != recipient.\n        if (this._recipient.equals(this._sender)) {\n            Log.w(Transaction, 'Sender and recipient must not match', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.has(this._senderType) || !Account.TYPE_MAP.has(this._recipientType)) {\n            Log.w(Transaction, 'Invalid account type', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._senderType).verifyOutgoingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for sender', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._recipientType).verifyIncomingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for recipient', this);\n            return false;\n        }\n        return true;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        throw new Error('Getter needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        throw new Error('Method needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        // Exclude the signature, we don't want transactions to be malleable.\n        this._hash = this._hash || Hash.light(this.serializeContent());\n        return this._hash;\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compare(o) {\n        if (this.fee / this.serializedSize > o.fee / o.serializedSize) return -1;\n        if (this.fee / this.serializedSize < o.fee / o.serializedSize) return 1;\n        if (this.serializedSize > o.serializedSize) return -1;\n        if (this.serializedSize < o.serializedSize) return 1;\n        if (this.fee > o.fee) return -1;\n        if (this.fee < o.fee) return 1;\n        if (this.value > o.value) return -1;\n        if (this.value < o.value) return 1;\n        return this.compareBlockOrder(o);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compareBlockOrder(o) {\n        // This function must return 0 iff this.equals(o).\n        const recCompare = this._recipient.compare(o._recipient);\n        if (recCompare !== 0) return recCompare;\n        if (this._validityStartHeight < o._validityStartHeight) return -1;\n        if (this._validityStartHeight > o._validityStartHeight) return 1;\n        if (this._fee > o._fee) return -1;\n        if (this._fee < o._fee) return 1;\n        if (this._value > o._value) return -1;\n        if (this._value < o._value) return 1;\n        const senderCompare = this._sender.compare(o._sender);\n        if (senderCompare !== 0) return senderCompare;\n        if (this._recipientType < o._recipientType) return -1;\n        if (this._recipientType > o._recipientType) return 1;\n        if (this._senderType < o._senderType) return -1;\n        if (this._senderType > o._senderType) return 1;\n        if (this._flags < o._flags) return -1;\n        if (this._flags > o._flags) return 1;\n        return BufferUtils.compare(this._data, o._data);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {boolean}\n     */\n    equals(o) {\n        // This ignores format and proof to be consistent with hash():\n        //   tx1.hash() == tx2.hash() iff tx1.equals(t2)\n        return o instanceof Transaction\n            && this._sender.equals(o._sender)\n            && this._senderType === o._senderType\n            && this._recipient.equals(o._recipient)\n            && this._recipientType === o._recipientType\n            && this._value === o._value\n            && this._fee === o._fee\n            && this._validityStartHeight === o._validityStartHeight\n            && this._networkId === o._networkId\n            && this._flags === o._flags\n            && BufferUtils.equals(this._data, o._data);\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `Transaction{`\n            + `sender=${this._sender.toBase64()}, `\n            + `recipient=${this._recipient.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `validityStartHeight=${this._validityStartHeight}, `\n            + `networkId=${this._networkId}`\n            + `}`;\n    }\n\n    /**\n     * @return {Address}\n     */\n    getContractCreationAddress() {\n        const tx = Transaction.unserialize(this.serialize());\n        tx._recipient = Address.NULL;\n        tx._hash = null;\n        return Address.fromHash(tx.hash());\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Account.Type} */\n    get senderType() {\n        return this._senderType;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Account.Type} */\n    get recipientType() {\n        return this._recipientType;\n    }\n\n    /** @type {number} */\n    get value() {\n        return this._value;\n    }\n\n    /** @type {number} */\n    get fee() {\n        return this._fee;\n    }\n\n    /** @type {number} */\n    get feePerByte() {\n        return this._fee / this.serializedSize;\n    }\n\n    /** @type {number} */\n    get networkId() {\n        return this._networkId;\n    }\n\n    /** @type {number} */\n    get validityStartHeight() {\n        return this._validityStartHeight;\n    }\n\n    /** @type {number} */\n    get flags() {\n        return this._flags;\n    }\n\n    /**\n     * @param {Transaction.Flag} flag\n     * @returns {boolean}\n     */\n    hasFlag(flag) {\n        return (this._flags & flag) > 0;\n    }\n\n    /** @type {Uint8Array} */\n    get data() {\n        return this._data;\n    }\n\n    /** @type {Uint8Array} */\n    get proof() {\n        return this._proof;\n    }\n\n    // Sender proof is set by the Wallet after signing a transaction.\n    /** @type {Uint8Array} */\n    set proof(proof) {\n        this._proof = proof;\n    }\n}\n\n/**\n * Enum for Transaction formats.\n * @enum\n */\nTransaction.Format = {\n    BASIC: 0,\n    EXTENDED: 1\n};\n/**\n * @enum\n */\nTransaction.Flag = {\n    NONE: 0,\n    CONTRACT_CREATION: 0b1,\n    ALL: 0b1\n};\n/** @type {Map.<Transaction.Format, {unserialize: function(buf: SerialBuffer):Transaction}>} */\nTransaction.FORMAT_MAP = new Map();\n\nClass.register(Transaction);\n","class SignatureProof {\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    static verifyTransaction(transaction) {\n        try {\n            const buffer = new SerialBuffer(transaction.proof);\n            const proof = SignatureProof.unserialize(buffer);\n\n            // Reject proof if it is longer than needed.\n            if (buffer.readPos !== buffer.byteLength) {\n                Log.w(SignatureProof, 'Invalid SignatureProof - overlong');\n                return false;\n            }\n\n            return proof.verify(transaction.sender, transaction.serializeContent());\n        } catch (e) {\n            Log.w(SignatureProof, `Failed to verify transaction: ${e.message || e}`, e);\n            return false;\n        }\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static singleSig(publicKey, signature) {\n        return new SignatureProof(publicKey, new MerklePath([]), signature);\n    }\n\n    /**\n     * @param {PublicKey} signerKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static multiSig(signerKey, publicKeys, signature) {\n        const merklePath = MerklePath.compute(publicKeys, signerKey);\n        return new SignatureProof(signerKey, merklePath, signature);\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {MerklePath} merklePath\n     * @param {Signature} signature\n     */\n    constructor(publicKey, merklePath, signature) {\n        if (!(publicKey instanceof PublicKey)) throw new Error('Malformed publickKey');\n        if (!(merklePath instanceof MerklePath)) throw new Error('Malformed merklePath');\n        if (signature && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        /**\n         * @type {PublicKey}\n         * @private\n         */\n        this._publicKey = publicKey;\n        /**\n         * @type {MerklePath}\n         * @private\n         */\n        this._merklePath = merklePath;\n        /**\n         * @type {Signature}\n         * @private\n         */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {SignatureProof}\n     */\n    static unserialize(buf) {\n        const publicKey = PublicKey.unserialize(buf);\n        const merklePath = MerklePath.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new SignatureProof(publicKey, merklePath, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._publicKey.serialize(buf);\n        this._merklePath.serialize(buf);\n\n        // The SignatureProof is sometimes serialized before the signature is set (e.g. when creating transactions).\n        // Simply don't serialize the signature if it's missing as this should never go over the wire.\n        // We always expect the signature to be present when unserializing.\n        if (this._signature) {\n            this._signature.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._publicKey.serializedSize\n            + this._merklePath.serializedSize\n            + (this._signature ? this._signature.serializedSize : 0);\n    }\n\n    /**\n     * @param {SignatureProof} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof SignatureProof\n            && this._publicKey.equals(o._publicKey)\n            && this._merklePath.equals(o._merklePath)\n            && (this._signature ? this._signature.equals(o._signature) : this._signature === o._signature);\n    }\n\n    /**\n     * @param {?Address} sender\n     * @param {Uint8Array} data\n     * @returns {boolean}\n     */\n    verify(sender, data) {\n        if (sender !== null && !this.isSignedBy(sender)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signer does not match sender address');\n            return false;\n        }\n\n        if (!this._signature) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is missing');\n            return false;\n        }\n\n        if (!this._signature.verify(this._publicKey, data)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is invalid');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Address} sender\n     * @returns {boolean}\n     */\n    isSignedBy(sender) {\n        const merkleRoot = this._merklePath.computeRoot(this._publicKey);\n        const signerAddr = Address.fromHash(merkleRoot);\n        return signerAddr.equals(sender);\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {MerklePath} */\n    get merklePath() {\n        return this._merklePath;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {Signature} */\n    set signature(signature) {\n        this._signature = signature;\n    }\n}\n\nClass.register(SignatureProof);\n","class BasicTransaction extends Transaction {\n    /**\n     * @param {PublicKey} senderPubKey\n     * @param {Address} recipient\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Signature} [signature]\n     * @param {number} [networkId]\n     */\n    constructor(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId) {\n        if (!(senderPubKey instanceof PublicKey)) throw new Error('Malformed senderPubKey');\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        const proof = SignatureProof.singleSig(senderPubKey, signature);\n        super(Transaction.Format.BASIC, senderPubKey.toAddress(), Account.Type.BASIC, recipient, Account.Type.BASIC, value, fee, validityStartHeight, Transaction.Flag.NONE, new Uint8Array(0), proof.serialize(), networkId);\n\n        /**\n         * @type {SignatureProof}\n         * @private\n         */\n        this._signatureProof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        Assert.that(type === Transaction.Format.BASIC);\n\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new BasicTransaction(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.BASIC);\n        this.senderPubKey.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        this.signature.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.senderPubKey.serializedSize\n            + this._recipient.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + this.signature.serializedSize;\n    }\n\n    /**\n     * @type {PublicKey}\n     */\n    get senderPubKey() {\n        return this._signatureProof.publicKey;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    get signature() {\n        return this._signatureProof.signature;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    set signature(signature) {\n        this._signatureProof.signature = signature;\n        this._proof = this._signatureProof.serialize();\n    }\n}\nTransaction.FORMAT_MAP.set(Transaction.Format.BASIC, BasicTransaction);\nClass.register(BasicTransaction);\n","class ExtendedTransaction extends Transaction {\n\n    /**\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof = new Uint8Array(0), networkId) {\n        super(Transaction.Format.EXTENDED, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = /** @type {Transaction.Format} */ buf.readUint8();\n        Assert.that(type === Transaction.Format.EXTENDED);\n\n        const dataSize = buf.readUint16();\n        const data = buf.read(dataSize);\n        const sender = Address.unserialize(buf);\n        const senderType = /** @type {Account.Type} */ buf.readUint8();\n        const recipient = Address.unserialize(buf);\n        const recipientType = /** @type {Account.Type} */ buf.readUint8();\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const flags = buf.readUint8();\n        const proofSize = buf.readUint16();\n        const proof = buf.read(proofSize);\n        return new ExtendedTransaction(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.EXTENDED);\n        this.serializeContent(buf);\n        buf.writeUint16(this._proof.byteLength);\n        buf.write(this._proof);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.serializedContentSize\n            + /*proofSize*/ 2\n            + this._proof.byteLength;\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.EXTENDED, ExtendedTransaction);\nClass.register(ExtendedTransaction);\n"]}